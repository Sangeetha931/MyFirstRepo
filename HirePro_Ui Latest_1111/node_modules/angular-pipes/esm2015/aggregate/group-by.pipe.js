import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { getProperty, isArray, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let GroupByPipe = class GroupByPipe {
    transform(input, prop) {
        if (!isArray(input)) {
            return input;
        }
        const arr = {};
        for (const value of input) {
            const field = getProperty(value, prop);
            if (isUndefined(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map(key => ({ key, value: arr[key] }));
    }
};
GroupByPipe.ɵfac = function GroupByPipe_Factory(t) { return new (t || GroupByPipe)(); };
GroupByPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "groupBy", type: GroupByPipe, pure: true });
export { GroupByPipe };
let NgGroupByPipeModule = class NgGroupByPipeModule {
};
NgGroupByPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgGroupByPipeModule });
NgGroupByPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgGroupByPipeModule_Factory(t) { return new (t || NgGroupByPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupByPipe, [{
        type: Pipe,
        args: [{
                name: 'groupBy'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgGroupByPipeModule, { declarations: [GroupByPipe], exports: [GroupByPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgGroupByPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GroupByPipe],
                exports: [GroupByPipe]
            }]
    }], null, null); })();
export { NgGroupByPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hZ2dyZWdhdGUvZ3JvdXAtYnkucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtuRSxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQUcsSUFDekIsU0FBUyxDQUFDLEtBQVUsRUFBRSxJQUFZO0FBQUksUUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE1BQU0sR0FBRyxHQUFrQyxFQUFFLENBQUM7QUFDbEQsUUFDSSxLQUFLLE1BQU0sS0FBSyxJQUFJLEtBQUssRUFBRTtBQUMvQixZQUFNLE1BQU0sS0FBSyxHQUFRLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEQsWUFDTSxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUNuQyxnQkFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLGFBQU87QUFDUCxZQUNNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsU0FBSztBQUNMLFFBQ0ksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuRSxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFwQlksV0FBVyw0QkFIdkIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLFNBQVMsT0FDaEIsQ0FBQyxJQUNXO0dBQVcsQ0FvQnZCLHdGQUNEO0FBQ0EsU0F0QmEsV0FBVztBQTBCeEIsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7QUFBRyxDQUFBLENBQUE7QUFBdEIsbUJBQW1CLDRCQUovQixRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztTQUFXLENBQUMsVUFDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQ3ZCLENBQUMsSUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7MEJBQ25DOztBQWpDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFwQkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFvQkEsQUFwQkEsQUFBQSxBQTBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0UHJvcGVydHksIGlzQXJyYXksIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdncm91cEJ5JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHByb3A6IHN0cmluZyk6IEFycmF5PGFueT4ge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJyOiB7IFtrZXk6IHN0cmluZ106IEFycmF5PGFueT4gfSA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgaW5wdXQpIHtcclxuICAgICAgY29uc3QgZmllbGQ6IGFueSA9IGdldFByb3BlcnR5KHZhbHVlLCBwcm9wKTtcclxuXHJcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhcnJbZmllbGRdKSkge1xyXG4gICAgICAgIGFycltmaWVsZF0gPSBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXJyW2ZpZWxkXS5wdXNoKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYXJyKS5tYXAoa2V5ID0+ICh7IGtleSwgdmFsdWU6IGFycltrZXldIH0pKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbR3JvdXBCeVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtHcm91cEJ5UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0dyb3VwQnlQaXBlTW9kdWxlIHt9XHJcbiJdfQ==