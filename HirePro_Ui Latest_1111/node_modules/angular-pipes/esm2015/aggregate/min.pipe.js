import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let MinPipe = class MinPipe {
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        let min = input[0];
        input.forEach((value) => {
            if (min > value) {
                min = value;
            }
        });
        return min;
    }
};
MinPipe.ɵfac = function MinPipe_Factory(t) { return new (t || MinPipe)(); };
MinPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "min", type: MinPipe, pure: true });
export { MinPipe };
let NgMinPipeModule = class NgMinPipeModule {
};
NgMinPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMinPipeModule });
NgMinPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMinPipeModule_Factory(t) { return new (t || NgMinPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinPipe, [{
        type: Pipe,
        args: [{
                name: 'min'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMinPipeModule, { declarations: [MinPipe], exports: [MinPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMinPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MinPipe],
                exports: [MinPipe]
            }]
    }], null, null); })();
export { NgMinPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYWdncmVnYXRlL21pbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt6QyxJQUFhLE9BQU8sR0FBcEIsTUFBYSxPQUFPO0FBQUcsSUFDckIsU0FBUyxDQUFDLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUM1QixZQUFNLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLFNBQUs7QUFDTCxRQUNJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUNJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtBQUNqQyxZQUFNLElBQUksR0FBRyxHQUFHLEtBQUssRUFBRTtBQUN2QixnQkFBUSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3BCLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxPQUFPLEdBQUcsQ0FBQztBQUNmLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQXBCWSxPQUFPLDRCQUhuQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsS0FBSyxPQUNaLENBQUMsSUFDVztHQUFPLENBb0JuQiw0RUFDRDtBQUNBLFNBdEJhLE9BQU87QUEwQnBCLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFBRyxDQUFBLENBQUE7QUFBbEIsZUFBZSw0QkFKM0IsUUFBUSxDQUFDLFVBQ1IsWUFBWTtDQUFFLENBQUMsT0FBTyxDQUFDLFVBQ3ZCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUNuQixDQUFDLElBQ1csZUFBZSxDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDL0I7O0FBakNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXBCQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQW9CQSxBQXBCQSxBQUFBLEFBMEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdtaW4nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWluUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWluID0gaW5wdXRbMF07XHJcblxyXG4gICAgaW5wdXQuZm9yRWFjaCgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICBpZiAobWluID4gdmFsdWUpIHtcclxuICAgICAgICBtaW4gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1pbjtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbTWluUGlwZV0sXHJcbiAgZXhwb3J0czogW01pblBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdNaW5QaXBlTW9kdWxlIHt9XHJcbiJdfQ==