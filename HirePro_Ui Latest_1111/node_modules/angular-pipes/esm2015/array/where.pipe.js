import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let WherePipe = class WherePipe {
    /**
     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
     */
    transform(input, fn) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(fn)) {
            return input.filter(fn);
        }
        else if (isArray(fn)) {
            const [key, value] = fn;
            return input.filter((item) => getProperty(item, key) === value);
        }
        else if (fn) {
            return input.filter((item) => item === fn);
        }
        else {
            return input;
        }
    }
};
WherePipe.ɵfac = function WherePipe_Factory(t) { return new (t || WherePipe)(); };
WherePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "where", type: WherePipe, pure: true });
export { WherePipe };
let NgWherePipeModule = class NgWherePipeModule {
};
NgWherePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWherePipeModule });
NgWherePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWherePipeModule_Factory(t) { return new (t || NgWherePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WherePipe, [{
        type: Pipe,
        args: [{
                name: 'where'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWherePipeModule, { declarations: [WherePipe], exports: [WherePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWherePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WherePipe],
                exports: [WherePipe]
            }]
    }], null, null); })();
export { NgWherePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hlcmUucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS93aGVyZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS2xFLElBQWEsU0FBUyxHQUF0QixNQUFhLFNBQVM7QUFBRyxJQUN2QjtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsU0FBUyxDQUFDLEtBQVUsRUFBRSxFQUFPO0FBQUksUUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3hCLFlBQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLFNBQUs7QUFBQyxhQUFLLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQzVCLFlBQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDOUIsWUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDM0UsU0FBSztBQUFDLGFBQUssSUFBSSxFQUFFLEVBQUU7QUFDbkIsWUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN0RCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQXBCWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBb0JyQixrRkFDRDtBQUNBLFNBdEJhLFNBQVM7QUEwQnRCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQUcsQ0FBQSxDQUFBO0FBQXBCLGlCQUFpQiw0QkFKN0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFO0FBQUMsU0FBUyxDQUFDLFVBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUNyQixDQUFDLElBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNqQzs7QUFqQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFwQkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFvQkEsQUFwQkEsQUFBQSxBQTBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgZ2V0UHJvcGVydHkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3doZXJlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFdoZXJlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIC8qKlxyXG4gICAqIFN1cHBvcnQgYSBmdW5jdGlvbiBvciBhIHZhbHVlIG9yIHRoZSBzaG9ydGhhbmQgWydrZXknLCB2YWx1ZV0gbGlrZSB0aGUgbG9kYXNoIHNob3J0aGFuZC5cclxuICAgKi9cclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZm46IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgcmV0dXJuIGlucHV0LmZpbHRlcihmbik7XHJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XHJcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGZuO1xyXG4gICAgICByZXR1cm4gaW5wdXQuZmlsdGVyKChpdGVtOiBhbnkpID0+IGdldFByb3BlcnR5KGl0ZW0sIGtleSkgPT09IHZhbHVlKTtcclxuICAgIH0gZWxzZSBpZiAoZm4pIHtcclxuICAgICAgcmV0dXJuIGlucHV0LmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtID09PSBmbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1doZXJlUGlwZV0sXHJcbiAgZXhwb3J0czogW1doZXJlUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1doZXJlUGlwZU1vZHVsZSB7fVxyXG4iXX0=