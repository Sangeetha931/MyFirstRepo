import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let TakePipe = class TakePipe {
    transform(input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, quantity || 1);
    }
};
TakePipe.ɵfac = function TakePipe_Factory(t) { return new (t || TakePipe)(); };
TakePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "take", type: TakePipe, pure: true });
export { TakePipe };
let NgTakePipeModule = class NgTakePipeModule {
};
NgTakePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakePipeModule });
NgTakePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakePipeModule_Factory(t) { return new (t || NgTakePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakePipe, [{
        type: Pipe,
        args: [{
                name: 'take'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakePipeModule, { declarations: [TakePipe], exports: [TakePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakePipe],
                exports: [TakePipe]
            }]
    }], null, null); })();
export { NgTakePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFrZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3Rha2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekMsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUTtBQUFHLElBQ3RCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsUUFBaUI7QUFBSSxRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBUlksUUFBUSw0QkFIcEIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLE1BQU0sT0FDYixDQUFDLElBQ1c7R0FBUSxDQVFwQiwrRUFDRDtBQUNBLFNBVmEsUUFBUTtBQWNyQixJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtBQUFHLENBQUEsQ0FBQTtBQUFuQixnQkFBZ0IsNEJBSjVCLFFBQVEsQ0FBQyxVQUNSLFlBQVk7QUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUN4QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FDcEIsQ0FBQyxJQUNXLGdCQUFnQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDaEM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3Rha2UnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFrZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcXVhbnRpdHk/OiBudW1iZXIpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIHF1YW50aXR5IHx8IDEpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtUYWtlUGlwZV0sXHJcbiAgZXhwb3J0czogW1Rha2VQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nVGFrZVBpcGVNb2R1bGUge31cclxuIl19