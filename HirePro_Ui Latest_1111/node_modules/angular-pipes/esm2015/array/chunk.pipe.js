import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let ChunkPipe = class ChunkPipe {
    transform(input, size = 1) {
        if (!isArray(input)) {
            return input;
        }
        return [].concat.apply([], input.map((_elem, i) => {
            return i % size ? [] : [input.slice(i, i + size)];
        }));
    }
};
ChunkPipe.ɵfac = function ChunkPipe_Factory(t) { return new (t || ChunkPipe)(); };
ChunkPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "chunk", type: ChunkPipe, pure: true });
export { ChunkPipe };
let NgChunkPipeModule = class NgChunkPipeModule {
};
NgChunkPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChunkPipeModule });
NgChunkPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgChunkPipeModule_Factory(t) { return new (t || NgChunkPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChunkPipe, [{
        type: Pipe,
        args: [{
                name: 'chunk'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChunkPipeModule, { declarations: [ChunkPipe], exports: [ChunkPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChunkPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ChunkPipe],
                exports: [ChunkPipe]
            }]
    }], null, null); })();
export { NgChunkPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmsucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9jaHVuay5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt6QyxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQUcsSUFDdkIsU0FBUyxDQUFDLEtBQVUsRUFBRSxPQUFlLENBQUM7QUFBSSxRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDcEIsRUFBRSxFQUNGLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFVLEVBQUUsQ0FBUyxFQUFFLEVBQUU7QUFDMUMsWUFBUSxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxRCxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFiWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBYXJCLGtGQUNEO0FBQ0EsU0FmYSxTQUFTO0FBbUJ0QixJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtBQUFHLENBQUEsQ0FBQTtBQUFwQixpQkFBaUIsNEJBSjdCLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRTtBQUFDLFNBQVMsQ0FBQyxVQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FDckIsQ0FBQyxJQUNXLGlCQUFpQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDakM7O0FBMUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFiQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWFBLEFBYkEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnY2h1bmsnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2h1bmtQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHNpemU6IG51bWJlciA9IDEpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShcclxuICAgICAgW10sXHJcbiAgICAgIGlucHV0Lm1hcCgoX2VsZW06IGFueSwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGkgJSBzaXplID8gW10gOiBbaW5wdXQuc2xpY2UoaSwgaSArIHNpemUpXTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NodW5rUGlwZV0sXHJcbiAgZXhwb3J0czogW0NodW5rUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0NodW5rUGlwZU1vZHVsZSB7fVxyXG4iXX0=