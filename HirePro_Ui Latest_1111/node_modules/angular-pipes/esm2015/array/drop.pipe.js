import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let DropPipe = class DropPipe {
    transform(input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(quantity || 1, input.lenth);
    }
};
DropPipe.ɵfac = function DropPipe_Factory(t) { return new (t || DropPipe)(); };
DropPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "drop", type: DropPipe, pure: true });
export { DropPipe };
let NgDropPipeModule = class NgDropPipeModule {
};
NgDropPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDropPipeModule });
NgDropPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDropPipeModule_Factory(t) { return new (t || NgDropPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropPipe, [{
        type: Pipe,
        args: [{
                name: 'drop'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDropPipeModule, { declarations: [DropPipe], exports: [DropPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDropPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DropPipe],
                exports: [DropPipe]
            }]
    }], null, null); })();
export { NgDropPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L2Ryb3AucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekMsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUTtBQUFHLElBQ3RCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsUUFBaUI7QUFBSSxRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQVJZLFFBQVEsNEJBSHBCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxNQUFNLE9BQ2IsQ0FBQyxJQUNXO0dBQVEsQ0FRcEIsK0VBQ0Q7QUFDQSxTQVZhLFFBQVE7QUFjckIsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFBRyxDQUFBLENBQUE7QUFBbkIsZ0JBQWdCLDRCQUo1QixRQUFRLENBQUMsVUFDUixZQUFZO0FBQUUsQ0FBQyxRQUFRLENBQUMsVUFDeEIsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQ3BCLENBQUMsSUFDVyxnQkFBZ0IsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7MEJBQ2hDOztBQXJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZHJvcCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEcm9wUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBxdWFudGl0eT86IG51bWJlcik6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQuc2xpY2UocXVhbnRpdHkgfHwgMSwgaW5wdXQubGVudGgpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtEcm9wUGlwZV0sXHJcbiAgZXhwb3J0czogW0Ryb3BQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRHJvcFBpcGVNb2R1bGUge31cclxuIl19