import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
var FirstOrDefaultPipe_1;
import { Pipe, NgModule } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
let FirstOrDefaultPipe = FirstOrDefaultPipe_1 = class FirstOrDefaultPipe {
    static find(input, predicate, defaultValue) {
        let found = false;
        let result;
        let i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    }
    transform(input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe_1.find(input, predicate, defaultValue);
        }
        else if (isArray(predicate)) {
            const [key, value] = predicate;
            return FirstOrDefaultPipe_1.find(input, (item) => getProperty(item, key) === value, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe_1.find(input, item => item === predicate, defaultValue);
        }
        else {
            return input;
        }
    }
};
FirstOrDefaultPipe.ɵfac = function FirstOrDefaultPipe_Factory(t) { return new (t || FirstOrDefaultPipe)(); };
FirstOrDefaultPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "firstOrDefault", type: FirstOrDefaultPipe, pure: true });
export { FirstOrDefaultPipe };
let NgFirstOrDefaultPipeModule = class NgFirstOrDefaultPipeModule {
};
NgFirstOrDefaultPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFirstOrDefaultPipeModule });
NgFirstOrDefaultPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFirstOrDefaultPipeModule_Factory(t) { return new (t || NgFirstOrDefaultPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirstOrDefaultPipe, [{
        type: Pipe,
        args: [{
                name: 'firstOrDefault'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFirstOrDefaultPipeModule, { declarations: [FirstOrDefaultPipe], exports: [FirstOrDefaultPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFirstOrDefaultPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FirstOrDefaultPipe],
                exports: [FirstOrDefaultPipe]
            }]
    }], null, null); })();
export { NgFirstOrDefaultPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyc3Qtb3ItZGVmYXVsdC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L2ZpcnN0LW9yLWRlZmF1bHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBS3ZGLElBQWEsa0JBQWtCLDBCQUEvQixNQUFhLGtCQUFrQjtBQUFHLElBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBWSxFQUFFLFNBQThCLEVBQUUsWUFBa0I7QUFBSSxRQUN0RixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdEIsUUFBSSxJQUFJLE1BQVcsQ0FBQztBQUNwQixRQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2YsUUFDSSxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDekMsWUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUMsU0FBSztBQUNMLFFBQ0ksSUFBSSxLQUFLLEVBQUU7QUFDZixZQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsU0FBSztBQUNMLFFBQ0ksSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO0FBQzlFLFlBQU0sTUFBTSxHQUFHLFlBQVksQ0FBQztBQUM1QixTQUFLO0FBQ0wsUUFDSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSCxJQUNFLFNBQVMsQ0FBQyxLQUFVLEVBQUUsU0FBK0MsRUFBRSxZQUFrQjtBQUFJLFFBQzNGLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUMvQixZQUFNLE9BQU8sb0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBdUIsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzFGLFNBQUs7QUFBQyxhQUFLLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ25DLFlBQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBYSxTQUFTLENBQUM7QUFDL0MsWUFBTSxPQUFPLG9CQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzNHLFNBQUs7QUFBQyxhQUFLLElBQUksU0FBUyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxvQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFVLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzRixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQXJDWSxrQkFBa0IsbURBSDlCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxnQkFBZ0I7R0FDdkIsQ0FBQyxJQUNXLGtCQUFrQixDQXFDOUIsc0ZBQ0Q7QUFDQSxTQXZDYSxrQkFBa0I7QUEyQy9CLElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0FBQUcsQ0FBQSxDQUFBO0FBQTdCLDBCQUEwQiw0QkFKdEMsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBa0IsQ0FBQyxVQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUM5QixDQUFDLElBQ1csMEJBQTBCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUMxQzs7QUFsREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXJDQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXFDQSxBQXJDQSxBQUFBLEFBMkNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBpc0Z1bmN0aW9uLCBnZXRQcm9wZXJ0eSwgQ29sbGVjdGlvblByZWRpY2F0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZmlyc3RPckRlZmF1bHQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlyc3RPckRlZmF1bHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgZmluZChpbnB1dDogYW55W10sIHByZWRpY2F0ZTogQ29sbGVjdGlvblByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlPzogYW55KTogYW55IHtcclxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgbGV0IHJlc3VsdDogYW55O1xyXG4gICAgbGV0IGkgPSAtMTtcclxuXHJcbiAgICB3aGlsZSAoIWZvdW5kICYmICsraSA8IGlucHV0Lmxlbmd0aCkge1xyXG4gICAgICBmb3VuZCA9IHByZWRpY2F0ZShpbnB1dFtpXSwgaSwgaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmb3VuZCkge1xyXG4gICAgICByZXN1bHQgPSBpbnB1dFtpXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJlZGljYXRlOiBDb2xsZWN0aW9uUHJlZGljYXRlIHwgc3RyaW5nW10gfCBhbnksIGRlZmF1bHRWYWx1ZT86IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgPENvbGxlY3Rpb25QcmVkaWNhdGU+cHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHByZWRpY2F0ZSkpIHtcclxuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gPHN0cmluZ1tdPnByZWRpY2F0ZTtcclxuICAgICAgcmV0dXJuIEZpcnN0T3JEZWZhdWx0UGlwZS5maW5kKGlucHV0LCAoaXRlbTogYW55KSA9PiBnZXRQcm9wZXJ0eShpdGVtLCBrZXkpID09PSB2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcclxuICAgIH0gZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgaXRlbSA9PiBpdGVtID09PSA8YW55PnByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRmlyc3RPckRlZmF1bHRQaXBlXSxcclxuICBleHBvcnRzOiBbRmlyc3RPckRlZmF1bHRQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRmlyc3RPckRlZmF1bHRQaXBlTW9kdWxlIHt9XHJcbiJdfQ==