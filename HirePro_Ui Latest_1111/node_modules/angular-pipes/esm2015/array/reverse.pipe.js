import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let ReversePipe = class ReversePipe {
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        return [...input].reverse();
    }
};
ReversePipe.ɵfac = function ReversePipe_Factory(t) { return new (t || ReversePipe)(); };
ReversePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "reverse", type: ReversePipe, pure: true });
export { ReversePipe };
let NgReversePipeModule = class NgReversePipeModule {
};
NgReversePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReversePipeModule });
NgReversePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReversePipeModule_Factory(t) { return new (t || NgReversePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReversePipe, [{
        type: Pipe,
        args: [{
                name: 'reverse'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReversePipeModule, { declarations: [ReversePipe], exports: [ReversePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReversePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReversePipe],
                exports: [ReversePipe]
            }]
    }], null, null); })();
export { NgReversePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3JldmVyc2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztBQUFHLElBQ3pCLFNBQVMsQ0FBQyxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQVJZLFdBQVcsNEJBSHZCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxTQUFTLE9BQ2hCLENBQUMsSUFDVztHQUFXLENBUXZCLHdGQUNEO0FBQ0EsU0FWYSxXQUFXO0FBY3hCLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0FBQUcsQ0FBQSxDQUFBO0FBQXRCLG1CQUFtQiw0QkFKL0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBVyxDQUFDLFVBQzNCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUN2QixDQUFDLElBQ1csbUJBQW1CLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNuQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFSQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdyZXZlcnNlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJldmVyc2VQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFsuLi5pbnB1dF0ucmV2ZXJzZSgpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSZXZlcnNlUGlwZV0sXHJcbiAgZXhwb3J0czogW1JldmVyc2VQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUmV2ZXJzZVBpcGVNb2R1bGUge31cclxuIl19