import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { count } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let CountPipe = class CountPipe {
    transform(input) {
        return count(input);
    }
};
CountPipe.ɵfac = function CountPipe_Factory(t) { return new (t || CountPipe)(); };
CountPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "count", type: CountPipe, pure: true });
export { CountPipe };
let NgCountPipeModule = class NgCountPipeModule {
};
NgCountPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCountPipeModule });
NgCountPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCountPipeModule_Factory(t) { return new (t || NgCountPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountPipe, [{
        type: Pipe,
        args: [{
                name: 'count'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCountPipeModule, { declarations: [CountPipe], exports: [CountPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCountPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CountPipe],
                exports: [CountPipe]
            }]
    }], null, null); })();
export { NgCountPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9jb3VudC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2QyxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQUcsSUFDdkIsU0FBUyxDQUFDLEtBQVU7QUFBSSxRQUN0QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFKWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBSXJCLGtGQUNEO0FBQ0EsU0FOYSxTQUFTO0FBVXRCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQUcsQ0FBQSxDQUFBO0FBQXBCLGlCQUFpQiw0QkFKN0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFO0FBQUMsU0FBUyxDQUFDLFVBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUNyQixDQUFDLElBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNqQzs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUpBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgY291bnQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2NvdW50JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIENvdW50UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIHJldHVybiBjb3VudChpbnB1dCk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NvdW50UGlwZV0sXHJcbiAgZXhwb3J0czogW0NvdW50UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0NvdW50UGlwZU1vZHVsZSB7fVxyXG4iXX0=