import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { shuffle } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let ShufflePipe = class ShufflePipe {
    transform(input) {
        return shuffle(input);
    }
};
ShufflePipe.ɵfac = function ShufflePipe_Factory(t) { return new (t || ShufflePipe)(); };
ShufflePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "shuffle", type: ShufflePipe, pure: true });
export { ShufflePipe };
let NgShufflePipeModule = class NgShufflePipeModule {
};
NgShufflePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgShufflePipeModule });
NgShufflePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgShufflePipeModule_Factory(t) { return new (t || NgShufflePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShufflePipe, [{
        type: Pipe,
        args: [{
                name: 'shuffle'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgShufflePipeModule, { declarations: [ShufflePipe], exports: [ShufflePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgShufflePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ShufflePipe],
                exports: [ShufflePipe]
            }]
    }], null, null); })();
export { NgShufflePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3NodWZmbGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztBQUFHLElBQ3pCLFNBQVMsQ0FBQyxLQUFVO0FBQUksUUFDdEIsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBSlksV0FBVyw0QkFIdkIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLFNBQVMsT0FDaEIsQ0FBQyxJQUNXO0dBQVcsQ0FJdkIsd0ZBQ0Q7QUFDQSxTQU5hLFdBQVc7QUFVeEIsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7QUFBRyxDQUFBLENBQUE7QUFBdEIsbUJBQW1CLDRCQUovQixRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztTQUFXLENBQUMsVUFDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQ3ZCLENBQUMsSUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7MEJBQ25DOztBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBzaHVmZmxlIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdzaHVmZmxlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNodWZmbGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgcmV0dXJuIHNodWZmbGUoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTaHVmZmxlUGlwZV0sXHJcbiAgZXhwb3J0czogW1NodWZmbGVQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2h1ZmZsZVBpcGVNb2R1bGUge31cclxuIl19