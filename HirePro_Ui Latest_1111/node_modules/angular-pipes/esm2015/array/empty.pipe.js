import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { empty } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let EmptyPipe = class EmptyPipe {
    transform(input) {
        return empty(input);
    }
};
EmptyPipe.ɵfac = function EmptyPipe_Factory(t) { return new (t || EmptyPipe)(); };
EmptyPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "empty", type: EmptyPipe, pure: true });
export { EmptyPipe };
let NgEmptyPipeModule = class NgEmptyPipeModule {
};
NgEmptyPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEmptyPipeModule });
NgEmptyPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEmptyPipeModule_Factory(t) { return new (t || NgEmptyPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmptyPipe, [{
        type: Pipe,
        args: [{
                name: 'empty'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEmptyPipeModule, { declarations: [EmptyPipe], exports: [EmptyPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEmptyPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EmptyPipe],
                exports: [EmptyPipe]
            }]
    }], null, null); })();
export { NgEmptyPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9lbXB0eS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2QyxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQUcsSUFDdkIsU0FBUyxDQUFDLEtBQVU7QUFBSSxRQUN0QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFKWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBSXJCLGtGQUNEO0FBQ0EsU0FOYSxTQUFTO0FBVXRCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQUcsQ0FBQSxDQUFBO0FBQXBCLGlCQUFpQiw0QkFKN0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFO0FBQUMsU0FBUyxDQUFDLFVBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUNyQixDQUFDLElBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNqQzs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUpBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2VtcHR5JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEVtcHR5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIHJldHVybiBlbXB0eShpbnB1dCk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0VtcHR5UGlwZV0sXHJcbiAgZXhwb3J0czogW0VtcHR5UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0VtcHR5UGlwZU1vZHVsZSB7fVxyXG4iXX0=