import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, isDeepObject, unwrapDeep, deepIndexOf } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let IntersectionPipe = class IntersectionPipe {
    transform(a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            const unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return unwrapped.reduce((intersection, value) => intersection.concat(deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1 ? value : []), []);
        }
        return a.reduce((intersection, value) => intersection.concat(b.indexOf(value) !== -1 && intersection.indexOf(value) === -1 ? value : []), []);
    }
};
IntersectionPipe.ɵfac = function IntersectionPipe_Factory(t) { return new (t || IntersectionPipe)(); };
IntersectionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "intersection", type: IntersectionPipe, pure: true });
export { IntersectionPipe };
let NgIntersectionPipeModule = class NgIntersectionPipeModule {
};
NgIntersectionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIntersectionPipeModule });
NgIntersectionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIntersectionPipeModule_Factory(t) { return new (t || NgIntersectionPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionPipe, [{
        type: Pipe,
        args: [{
                name: 'intersection'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIntersectionPipeModule, { declarations: [IntersectionPipe], exports: [IntersectionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIntersectionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IntersectionPipe],
                exports: [IntersectionPipe]
            }]
    }], null, null); })();
export { NgIntersectionPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYXJyYXkvaW50ZXJzZWN0aW9uLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS2hGLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQUcsSUFDOUIsU0FBUyxDQUFDLENBQU8sRUFBRSxDQUFPO0FBQUksUUFDNUIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDMUQsWUFBTSxPQUFPLEVBQUUsQ0FBQztBQUNoQixTQUFLO0FBQ0wsUUFDSSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6QixZQUFNLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0IsZ0JBQVEsT0FBTyxFQUFFLENBQUM7QUFDbEIsYUFBTztBQUNQLFlBQ00sT0FBTyxTQUFTLENBQUMsTUFBTSxDQUNyQixDQUFDLFlBQW1CLEVBQUUsS0FBVSxFQUFFLEVBQUUsQ0FDbEMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQzNHLEVBQUUsQ0FDSCxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUNiLENBQUMsWUFBbUIsRUFBRSxLQUFVLEVBQUUsRUFBRSxDQUNsQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDakcsRUFBRSxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUF6QlksZ0JBQWdCLDRCQUg1QixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsY0FBYyxPQUNyQixDQUFDLElBQ1c7R0FBZ0IsQ0F5QjVCLHVHQUNEO0FBQ0EsU0EzQmEsZ0JBQWdCO0FBK0I3QixJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtBQUFHLENBQUEsQ0FBQTtBQUEzQix3QkFBd0IsNEJBSnBDLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQWdCLENBQUMsVUFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FDNUIsQ0FBQyxJQUNXLHdCQUF3QixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDeEM7O0FBdENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXpCQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXlCQSxBQXpCQSxBQUFBLEFBK0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBpc0RlZXBPYmplY3QsIHVud3JhcERlZXAsIGRlZXBJbmRleE9mIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpbnRlcnNlY3Rpb24nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShhPzogYW55LCBiPzogYW55KTogYW55IHtcclxuICAgIGlmICgoIWlzQXJyYXkoYSkgJiYgIWlzRGVlcE9iamVjdChhKSkgfHwgIWlzQXJyYXkoYikpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0RlZXBPYmplY3QoYSkpIHtcclxuICAgICAgY29uc3QgdW53cmFwcGVkID0gdW53cmFwRGVlcChhKTtcclxuICAgICAgaWYgKCFpc0FycmF5KHVud3JhcHBlZCkpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB1bndyYXBwZWQucmVkdWNlKFxyXG4gICAgICAgIChpbnRlcnNlY3Rpb246IGFueVtdLCB2YWx1ZTogYW55KSA9PlxyXG4gICAgICAgICAgaW50ZXJzZWN0aW9uLmNvbmNhdChkZWVwSW5kZXhPZihiLCB2YWx1ZSkgIT09IC0xICYmIGRlZXBJbmRleE9mKGludGVyc2VjdGlvbiwgdmFsdWUpID09PSAtMSA/IHZhbHVlIDogW10pLFxyXG4gICAgICAgIFtdXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGEucmVkdWNlKFxyXG4gICAgICAoaW50ZXJzZWN0aW9uOiBhbnlbXSwgdmFsdWU6IGFueSkgPT5cclxuICAgICAgICBpbnRlcnNlY3Rpb24uY29uY2F0KGIuaW5kZXhPZih2YWx1ZSkgIT09IC0xICYmIGludGVyc2VjdGlvbi5pbmRleE9mKHZhbHVlKSA9PT0gLTEgPyB2YWx1ZSA6IFtdKSxcclxuICAgICAgW11cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0ludGVyc2VjdGlvblBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJbnRlcnNlY3Rpb25QaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSW50ZXJzZWN0aW9uUGlwZU1vZHVsZSB7fVxyXG4iXX0=