import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let InitialPipe = class InitialPipe {
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, input.length - 1);
    }
};
InitialPipe.ɵfac = function InitialPipe_Factory(t) { return new (t || InitialPipe)(); };
InitialPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "initial", type: InitialPipe, pure: true });
export { InitialPipe };
let NgInitialPipeModule = class NgInitialPipeModule {
};
NgInitialPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgInitialPipeModule });
NgInitialPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgInitialPipeModule_Factory(t) { return new (t || NgInitialPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InitialPipe, [{
        type: Pipe,
        args: [{
                name: 'initial'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgInitialPipeModule, { declarations: [InitialPipe], exports: [InitialPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgInitialPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [InitialPipe],
                exports: [InitialPipe]
            }]
    }], null, null); })();
export { NgInitialPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L2luaXRpYWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztBQUFHLElBQ3pCLFNBQVMsQ0FBQyxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxXQUFXLDRCQUh2QixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsU0FBUyxPQUNoQixDQUFDLElBQ1c7R0FBVyxDQVF2Qix3RkFDRDtBQUNBLFNBVmEsV0FBVztBQWN4QixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtBQUFHLENBQUEsQ0FBQTtBQUF0QixtQkFBbUIsNEJBSi9CLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQVcsQ0FBQyxVQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FDdkIsQ0FBQyxJQUNXLG1CQUFtQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDbkM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2luaXRpYWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW5pdGlhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQuc2xpY2UoMCwgaW5wdXQubGVuZ3RoIC0gMSk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0luaXRpYWxQaXBlXSxcclxuICBleHBvcnRzOiBbSW5pdGlhbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJbml0aWFsUGlwZU1vZHVsZSB7fVxyXG4iXX0=