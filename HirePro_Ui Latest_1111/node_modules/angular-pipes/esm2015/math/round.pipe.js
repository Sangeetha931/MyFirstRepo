import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { createRound, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let RoundPipe = class RoundPipe {
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('round')(value, precision);
    }
};
RoundPipe.ɵfac = function RoundPipe_Factory(t) { return new (t || RoundPipe)(); };
RoundPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "round", type: RoundPipe, pure: true });
export { RoundPipe };
let NgRoundPipeModule = class NgRoundPipeModule {
};
NgRoundPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRoundPipeModule });
NgRoundPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRoundPipeModule_Factory(t) { return new (t || NgRoundPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RoundPipe, [{
        type: Pipe,
        args: [{
                name: 'round'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRoundPipeModule, { declarations: [RoundPipe], exports: [RoundPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRoundPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RoundPipe],
                exports: [RoundPipe]
            }]
    }], null, null); })();
export { NgRoundPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9tYXRoL3JvdW5kLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2RCxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQUcsSUFDdkIsU0FBUyxDQUFDLEtBQVUsRUFBRSxZQUFpQixDQUFDO0FBQUksUUFDMUMsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDN0IsWUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLFNBQUs7QUFDTCxRQUNJLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBUXJCLGtGQUNEO0FBQ0EsU0FWYSxTQUFTO0FBY3RCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQUcsQ0FBQSxDQUFBO0FBQXBCLGlCQUFpQiw0QkFKN0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFO0FBQUMsU0FBUyxDQUFDLFVBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUNyQixDQUFDLElBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNqQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNyZWF0ZVJvdW5kLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncm91bmQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUm91bmRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIHByZWNpc2lvbjogYW55ID0gMCk6IGFueSB7XHJcbiAgICBpZiAoaXNTdHJpbmcocHJlY2lzaW9uKSkge1xyXG4gICAgICBwcmVjaXNpb24gPSBwYXJzZUludChwcmVjaXNpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcmVhdGVSb3VuZCgncm91bmQnKSh2YWx1ZSwgcHJlY2lzaW9uKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbUm91bmRQaXBlXSxcclxuICBleHBvcnRzOiBbUm91bmRQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUm91bmRQaXBlTW9kdWxlIHt9XHJcbiJdfQ==