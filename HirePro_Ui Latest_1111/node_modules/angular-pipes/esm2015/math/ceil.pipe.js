import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { createRound, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let CeilPipe = class CeilPipe {
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('ceil')(value, precision);
    }
};
CeilPipe.ɵfac = function CeilPipe_Factory(t) { return new (t || CeilPipe)(); };
CeilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ceil", type: CeilPipe, pure: true });
export { CeilPipe };
let NgCeilPipeModule = class NgCeilPipeModule {
};
NgCeilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCeilPipeModule });
NgCeilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCeilPipeModule_Factory(t) { return new (t || NgCeilPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CeilPipe, [{
        type: Pipe,
        args: [{
                name: 'ceil'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCeilPipeModule, { declarations: [CeilPipe], exports: [CeilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCeilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CeilPipe],
                exports: [CeilPipe]
            }]
    }], null, null); })();
export { NgCeilPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VpbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL21hdGgvY2VpbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdkQsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUTtBQUFHLElBQ3RCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsWUFBaUIsQ0FBQztBQUFJLFFBQzFDLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQzdCLFlBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxTQUFLO0FBQ0wsUUFDSSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBUlksUUFBUSw0QkFIcEIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLE1BQU0sT0FDYixDQUFDLElBQ1c7R0FBUSxDQVFwQiwrRUFDRDtBQUNBLFNBVmEsUUFBUTtBQWNyQixJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtBQUFHLENBQUEsQ0FBQTtBQUFuQixnQkFBZ0IsNEJBSjVCLFFBQVEsQ0FBQyxVQUNSLFlBQVk7QUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUN4QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FDcEIsQ0FBQyxJQUNXLGdCQUFnQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDaEM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFSQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBjcmVhdGVSb3VuZCwgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2NlaWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2VpbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgcHJlY2lzaW9uOiBhbnkgPSAwKTogYW55IHtcclxuICAgIGlmIChpc1N0cmluZyhwcmVjaXNpb24pKSB7XHJcbiAgICAgIHByZWNpc2lvbiA9IHBhcnNlSW50KHByZWNpc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZVJvdW5kKCdjZWlsJykodmFsdWUsIHByZWNpc2lvbik7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NlaWxQaXBlXSxcclxuICBleHBvcnRzOiBbQ2VpbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdDZWlsUGlwZU1vZHVsZSB7fVxyXG4iXX0=