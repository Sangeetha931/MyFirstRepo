import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { createRound, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let FloorPipe = class FloorPipe {
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('floor')(value, precision);
    }
};
FloorPipe.ɵfac = function FloorPipe_Factory(t) { return new (t || FloorPipe)(); };
FloorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "floor", type: FloorPipe, pure: true });
export { FloorPipe };
let NgFloorPipeModule = class NgFloorPipeModule {
};
NgFloorPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFloorPipeModule });
NgFloorPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFloorPipeModule_Factory(t) { return new (t || NgFloorPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FloorPipe, [{
        type: Pipe,
        args: [{
                name: 'floor'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFloorPipeModule, { declarations: [FloorPipe], exports: [FloorPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFloorPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FloorPipe],
                exports: [FloorPipe]
            }]
    }], null, null); })();
export { NgFloorPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvb3IucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9tYXRoL2Zsb29yLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2RCxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQUcsSUFDdkIsU0FBUyxDQUFDLEtBQVUsRUFBRSxZQUFpQixDQUFDO0FBQUksUUFDMUMsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDN0IsWUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLFNBQUs7QUFDTCxRQUNJLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxTQUFTLDRCQUhyQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsT0FBTyxPQUNkLENBQUMsSUFDVztHQUFTLENBUXJCLGtGQUNEO0FBQ0EsU0FWYSxTQUFTO0FBY3RCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQUcsQ0FBQSxDQUFBO0FBQXBCLGlCQUFpQiw0QkFKN0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFO0FBQUMsU0FBUyxDQUFDLFVBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUNyQixDQUFDLElBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNqQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNyZWF0ZVJvdW5kLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZmxvb3InLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmxvb3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIHByZWNpc2lvbjogYW55ID0gMCk6IGFueSB7XHJcbiAgICBpZiAoaXNTdHJpbmcocHJlY2lzaW9uKSkge1xyXG4gICAgICBwcmVjaXNpb24gPSBwYXJzZUludChwcmVjaXNpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcmVhdGVSb3VuZCgnZmxvb3InKSh2YWx1ZSwgcHJlY2lzaW9uKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRmxvb3JQaXBlXSxcclxuICBleHBvcnRzOiBbRmxvb3JQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRmxvb3JQaXBlTW9kdWxlIHt9XHJcbiJdfQ==