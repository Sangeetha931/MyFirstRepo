import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let OrdinalPipe = class OrdinalPipe {
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        if (this.endsWithTenth(input)) {
            return input + 'th';
        }
        else {
            const cardinal = input.toString().charAt(input.toString().length - 1);
            switch (cardinal) {
                case '1':
                    return input + 'st';
                case '2':
                    return input + 'nd';
                case '3':
                    return input + 'rd';
                default:
                    return input + 'th';
            }
        }
    }
    endsWithTenth(input) {
        const beforeLastDigit = input.toString().charAt(input.toString().length - 2);
        return beforeLastDigit === '1';
    }
};
OrdinalPipe.ɵfac = function OrdinalPipe_Factory(t) { return new (t || OrdinalPipe)(); };
OrdinalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ordinal", type: OrdinalPipe, pure: true });
export { OrdinalPipe };
let NgOrdinalPipeModule = class NgOrdinalPipeModule {
};
NgOrdinalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOrdinalPipeModule });
NgOrdinalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOrdinalPipeModule_Factory(t) { return new (t || NgOrdinalPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OrdinalPipe, [{
        type: Pipe,
        args: [{
                name: 'ordinal'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOrdinalPipeModule, { declarations: [OrdinalPipe], exports: [OrdinalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOrdinalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [OrdinalPipe],
                exports: [OrdinalPipe]
            }]
    }], null, null); })();
export { NgOrdinalPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkaW5hbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL21hdGgvb3JkaW5hbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtoRCxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQUcsSUFDekIsU0FBUyxDQUFDLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2hDLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ25DLFlBQU0sT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQzFCLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUUsWUFDTSxRQUFRLFFBQVEsRUFBRTtBQUN4QixnQkFBUSxLQUFLLEdBQUc7QUFDaEIsb0JBQVUsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQzlCLGdCQUFRLEtBQUssR0FBRztBQUNoQixvQkFBVSxPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDOUIsZ0JBQVEsS0FBSyxHQUFHO0FBQ2hCLG9CQUFVLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztBQUM5QixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztBQUM5QixhQUFPO0FBQ1AsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1UsYUFBYSxDQUFDLEtBQVU7QUFBSSxRQUNsQyxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakYsUUFDSSxPQUFPLGVBQWUsS0FBSyxHQUFHLENBQUM7QUFDbkMsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBN0JZLFdBQVcsNEJBSHZCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxTQUFTLE9BQ2hCLENBQUMsSUFDVztHQUFXLENBNkJ2Qix3RkFDRDtBQUNBLFNBL0JhLFdBQVc7QUFtQ3hCLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0FBQUcsQ0FBQSxDQUFBO0FBQXRCLG1CQUFtQiw0QkFKL0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBVyxDQUFDLFVBQzNCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUN2QixDQUFDLElBQ1csbUJBQW1CLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNuQzs7QUExQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBN0JBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBNkJBLEFBN0JBLEFBQUEsQUFtQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzTnVtYmVyRmluaXRlIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdvcmRpbmFsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZGluYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc051bWJlckZpbml0ZShpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuICdOYU4nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmVuZHNXaXRoVGVudGgoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dCArICd0aCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBjYXJkaW5hbCA9IGlucHV0LnRvU3RyaW5nKCkuY2hhckF0KGlucHV0LnRvU3RyaW5nKCkubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICBzd2l0Y2ggKGNhcmRpbmFsKSB7XHJcbiAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICByZXR1cm4gaW5wdXQgKyAnc3QnO1xyXG4gICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ25kJztcclxuICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgIHJldHVybiBpbnB1dCArICdyZCc7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiBpbnB1dCArICd0aCc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZW5kc1dpdGhUZW50aChpbnB1dDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBiZWZvcmVMYXN0RGlnaXQgPSBpbnB1dC50b1N0cmluZygpLmNoYXJBdChpbnB1dC50b1N0cmluZygpLmxlbmd0aCAtIDIpO1xyXG5cclxuICAgIHJldHVybiBiZWZvcmVMYXN0RGlnaXQgPT09ICcxJztcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbT3JkaW5hbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtPcmRpbmFsUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ09yZGluYWxQaXBlTW9kdWxlIHt9XHJcbiJdfQ==