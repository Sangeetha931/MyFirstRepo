import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
var BytesPipe_1;
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite, isPositive, isInteger, toDecimal } from '../utils/utils';
let BytesPipe = BytesPipe_1 = class BytesPipe {
    transform(input, decimal = 0, from = 'B', to) {
        if (!(isNumberFinite(input) && isNumberFinite(decimal) && isInteger(decimal) && isPositive(decimal))) {
            return input;
        }
        let bytes = input;
        let unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = BytesPipe_1.formats[unit].prev;
        }
        if (to) {
            const format = BytesPipe_1.formats[to];
            const result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
            return BytesPipe_1.formatResult(result, to);
        }
        for (const key in BytesPipe_1.formats) {
            if (BytesPipe_1.formats.hasOwnProperty(key)) {
                const format = BytesPipe_1.formats[key];
                if (bytes < format.max) {
                    const result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
                    return BytesPipe_1.formatResult(result, key);
                }
            }
        }
    }
    static formatResult(result, unit) {
        return `${result} ${unit}`;
    }
    static calculateResult(format, bytes) {
        const prev = format.prev ? BytesPipe_1.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    }
};
BytesPipe.ɵfac = function BytesPipe_Factory(t) { return new (t || BytesPipe)(); };
BytesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "bytes", type: BytesPipe, pure: true });
BytesPipe.formats = {
    B: { max: 1024 },
    kB: { max: Math.pow(1024, 2), prev: 'B' },
    KB: { max: Math.pow(1024, 2), prev: 'B' },
    MB: { max: Math.pow(1024, 3), prev: 'kB' },
    GB: { max: Math.pow(1024, 4), prev: 'MB' },
    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' },
};
export { BytesPipe };
let NgBytesPipeModule = class NgBytesPipeModule {
};
NgBytesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBytesPipeModule });
NgBytesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBytesPipeModule_Factory(t) { return new (t || NgBytesPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BytesPipe, [{
        type: Pipe,
        args: [{
                name: 'bytes'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBytesPipeModule, { declarations: [BytesPipe], exports: [BytesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBytesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [BytesPipe],
                exports: [BytesPipe]
            }]
    }], null, null); })();
export { NgBytesPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,