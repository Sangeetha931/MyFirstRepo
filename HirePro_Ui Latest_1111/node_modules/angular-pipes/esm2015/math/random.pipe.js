import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let RandomPipe = class RandomPipe {
    transform(input, min = 0, max = 1) {
        if (!isNumberFinite(min) || !isNumberFinite(max)) {
            return input;
        }
        if (min > max) {
            max = min;
            min = 0;
        }
        return Math.random() * (max - min) + min;
    }
};
RandomPipe.ɵfac = function RandomPipe_Factory(t) { return new (t || RandomPipe)(); };
RandomPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "random", type: RandomPipe, pure: true });
export { RandomPipe };
let NgRandomPipeModule = class NgRandomPipeModule {
};
NgRandomPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRandomPipeModule });
NgRandomPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRandomPipeModule_Factory(t) { return new (t || NgRandomPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RandomPipe, [{
        type: Pipe,
        args: [{
                name: 'random'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRandomPipeModule, { declarations: [RandomPipe], exports: [RandomPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRandomPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RandomPipe],
                exports: [RandomPipe]
            }]
    }], null, null); })();
export { NgRandomPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvbWF0aC9yYW5kb20ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLaEQsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVTtBQUFHLElBQ3hCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsTUFBYyxDQUFDLEVBQUUsTUFBYyxDQUFDO0FBQUksUUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN0RCxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRTtBQUNuQixZQUFNLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEIsWUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQWJZLFVBQVUsNEJBSHRCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxRQUFRLE9BQ2YsQ0FBQyxJQUNXO0dBQVUsQ0FhdEIscUZBQ0Q7QUFDQSxTQWZhLFVBQVU7QUFtQnZCLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0FBQUcsQ0FBQSxDQUFBO0FBQXJCLGtCQUFrQiw0QkFKOUIsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBVSxDQUFDLFVBQzFCLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUN0QixDQUFDLElBQ1csa0JBQWtCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNsQzs7QUExQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBYUEsQUFiQSxBQUFBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc051bWJlckZpbml0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncmFuZG9tJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJhbmRvbVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgbWluOiBudW1iZXIgPSAwLCBtYXg6IG51bWJlciA9IDEpOiBhbnkge1xyXG4gICAgaWYgKCFpc051bWJlckZpbml0ZShtaW4pIHx8ICFpc051bWJlckZpbml0ZShtYXgpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWluID4gbWF4KSB7XHJcbiAgICAgIG1heCA9IG1pbjtcclxuICAgICAgbWluID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSYW5kb21QaXBlXSxcclxuICBleHBvcnRzOiBbUmFuZG9tUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1JhbmRvbVBpcGVNb2R1bGUge31cclxuIl19