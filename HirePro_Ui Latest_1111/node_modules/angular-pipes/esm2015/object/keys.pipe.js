import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let KeysPipe = class KeysPipe {
    transform(input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input);
    }
};
KeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };
KeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: KeysPipe, pure: true });
export { KeysPipe };
let NgKeysPipeModule = class NgKeysPipeModule {
};
NgKeysPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgKeysPipeModule });
NgKeysPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgKeysPipeModule_Factory(t) { return new (t || NgKeysPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{
        type: Pipe,
        args: [{ name: 'keys' }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgKeysPipeModule, { declarations: [KeysPipe], exports: [KeysPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgKeysPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [KeysPipe],
                exports: [KeysPipe]
            }]
    }], null, null); })();
export { NgKeysPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL29iamVjdC9rZXlzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDLElBQWEsUUFBUSxHQUFyQixNQUFhLFFBQVE7QUFBRyxJQUN0QixTQUFTLENBQUMsS0FBVTtBQUFJLFFBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBUlksUUFBUSw0QkFEcEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLElBQ1YsUUFBUSxDQVFwQjttRkFDRDtBQUNBLFNBVmEsUUFBUTtBQWNyQixJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtBQUFHLENBQUEsQ0FBQTtBQUFuQixnQkFBZ0IsNEJBSjVCLFFBQVEsQ0FBQyxVQUNSLFlBQVk7QUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUN4QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FDcEIsQ0FBQyxJQUNXLGdCQUFnQixDQUFHOzs7Ozs7Ozs7Ozs7MEJBQ2hDOztBQW5CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFSQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ2tleXMnIH0pXHJcbmV4cG9ydCBjbGFzcyBLZXlzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNPYmplY3QoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtLZXlzUGlwZV0sXHJcbiAgZXhwb3J0czogW0tleXNQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nS2V5c1BpcGVNb2R1bGUge31cclxuIl19