import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject, isArray, isNil } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let DefaultsPipe = class DefaultsPipe {
    transform(input, defaults) {
        if (!isObject(defaults)) {
            return input;
        }
        if (isNil(input)) {
            return defaults;
        }
        if (isArray(input)) {
            return input.map((item) => {
                if (isObject(item)) {
                    return Object.assign({}, defaults, item);
                }
                if (isNil(item)) {
                    return defaults;
                }
                return item;
            });
        }
        if (isObject(input)) {
            return Object.assign({}, defaults, input);
        }
        return input;
    }
};
DefaultsPipe.ɵfac = function DefaultsPipe_Factory(t) { return new (t || DefaultsPipe)(); };
DefaultsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "defaults", type: DefaultsPipe, pure: true });
export { DefaultsPipe };
let NgDefaultsPipeModule = class NgDefaultsPipeModule {
};
NgDefaultsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDefaultsPipeModule });
NgDefaultsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDefaultsPipeModule_Factory(t) { return new (t || NgDefaultsPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultsPipe, [{
        type: Pipe,
        args: [{ name: 'defaults' }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDefaultsPipeModule, { declarations: [DefaultsPipe], exports: [DefaultsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDefaultsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DefaultsPipe],
                exports: [DefaultsPipe]
            }]
    }], null, null); })();
export { NgDefaultsPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9vYmplY3QvZGVmYXVsdHMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUcxRCxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0FBQUcsSUFDMUIsU0FBUyxDQUFDLEtBQVUsRUFBRSxRQUFhO0FBQUksUUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM3QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3RCLFlBQU0sT0FBTyxRQUFRLENBQUM7QUFDdEIsU0FBSztBQUNMLFFBQ0ksSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDeEIsWUFBTSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtBQUNyQyxnQkFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1QixvQkFBVSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRCxpQkFBUztBQUNULGdCQUNRLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3pCLG9CQUFVLE9BQU8sUUFBUSxDQUFDO0FBQzFCLGlCQUFTO0FBQ1QsZ0JBQ1EsT0FBTyxJQUFJLENBQUM7QUFDcEIsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxRQUNJLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUM7QUFDakIsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBOUJZLFlBQVksNEJBRHhCLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxJQUNkLFlBQVksQ0E4QnhCOytGQUNEO0FBQ0EsU0FoQ2EsWUFBWTtBQW9DekIsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFBRyxDQUFBLENBQUE7QUFBdkIsb0JBQW9CLDRCQUpoQyxRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztTQUFZLENBQUMsVUFDNUIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQ3hCLENBQUMsSUFDVyxvQkFBb0IsQ0FBRzs7Ozs7Ozs7Ozs7OzBCQUNwQzs7QUF6Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBOUJBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBOEJBLEFBOUJBLEFBQUEsQUFvQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzT2JqZWN0LCBpc0FycmF5LCBpc05pbCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ2RlZmF1bHRzJyB9KVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGRlZmF1bHRzOiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc09iamVjdChkZWZhdWx0cykpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc05pbChpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQubWFwKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoaXNPYmplY3QoaXRlbSkpIHtcclxuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgaXRlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNOaWwoaXRlbSkpIHtcclxuICAgICAgICAgIHJldHVybiBkZWZhdWx0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnB1dDtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRGVmYXVsdHNQaXBlXSxcclxuICBleHBvcnRzOiBbRGVmYXVsdHNQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRGVmYXVsdHNQaXBlTW9kdWxlIHt9XHJcbiJdfQ==