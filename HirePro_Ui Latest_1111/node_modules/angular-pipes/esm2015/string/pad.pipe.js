import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { pad, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let PadPipe = class PadPipe {
    transform(input, length = 0, character = ' ') {
        if (!isString(input)) {
            return input;
        }
        return pad(input, length, character);
    }
};
PadPipe.ɵfac = function PadPipe_Factory(t) { return new (t || PadPipe)(); };
PadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pad", type: PadPipe, pure: true });
export { PadPipe };
let NgPadPipeModule = class NgPadPipeModule {
};
NgPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPadPipeModule });
NgPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPadPipeModule_Factory(t) { return new (t || NgPadPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PadPipe, [{
        type: Pipe,
        args: [{
                name: 'pad'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPadPipeModule, { declarations: [PadPipe], exports: [PadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PadPipe],
                exports: [PadPipe]
            }]
    }], null, null); })();
export { NgPadPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvc3RyaW5nL3BhZC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLL0MsSUFBYSxPQUFPLEdBQXBCLE1BQWEsT0FBTztBQUFHLElBQ3JCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsU0FBaUIsQ0FBQyxFQUFFLFlBQW9CLEdBQUc7QUFBSSxRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6QyxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxPQUFPLDRCQUhuQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsS0FBSyxPQUNaLENBQUMsSUFDVztHQUFPLENBUW5CLDRFQUNEO0FBQ0EsU0FWYSxPQUFPO0FBY3BCLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFBRyxDQUFBLENBQUE7QUFBbEIsZUFBZSw0QkFKM0IsUUFBUSxDQUFDLFVBQ1IsWUFBWTtDQUFFLENBQUMsT0FBTyxDQUFDLFVBQ3ZCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUNuQixDQUFDLElBQ1csZUFBZSxDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDL0I7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgcGFkLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncGFkJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgbGVuZ3RoOiBudW1iZXIgPSAwLCBjaGFyYWN0ZXI6IHN0cmluZyA9ICcgJyk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhZChpbnB1dCwgbGVuZ3RoLCBjaGFyYWN0ZXIpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtQYWRQaXBlXSxcclxuICBleHBvcnRzOiBbUGFkUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1BhZFBpcGVNb2R1bGUge31cclxuIl19