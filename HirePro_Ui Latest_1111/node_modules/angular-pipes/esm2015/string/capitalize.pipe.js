import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, upperFirst } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let CapitalizePipe = class CapitalizePipe {
    transform(input, all = false) {
        if (!isString(input)) {
            return input;
        }
        if (!all) {
            return upperFirst(input.toLowerCase());
        }
        else {
            return input
                .toLowerCase()
                .split(' ')
                .map((value) => upperFirst(value))
                .join(' ');
        }
    }
};
CapitalizePipe.ɵfac = function CapitalizePipe_Factory(t) { return new (t || CapitalizePipe)(); };
CapitalizePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "capitalize", type: CapitalizePipe, pure: true });
export { CapitalizePipe };
let NgCapitalizePipeModule = class NgCapitalizePipeModule {
};
NgCapitalizePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCapitalizePipeModule });
NgCapitalizePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCapitalizePipeModule_Factory(t) { return new (t || NgCapitalizePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CapitalizePipe, [{
        type: Pipe,
        args: [{
                name: 'capitalize'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCapitalizePipeModule, { declarations: [CapitalizePipe], exports: [CapitalizePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCapitalizePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CapitalizePipe],
                exports: [CapitalizePipe]
            }]
    }], null, null); })();
export { NgCapitalizePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwaXRhbGl6ZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9jYXBpdGFsaXplLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt0RCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0FBQUcsSUFDNUIsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFlLEtBQUs7QUFBSSxRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNkLFlBQU0sT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDN0MsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLE9BQU8sS0FBSztBQUNsQixpQkFBUyxXQUFXLEVBQUU7QUFDdEIsaUJBQVMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNuQixpQkFBUyxHQUFHLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxpQkFBUyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQWhCWSxjQUFjLDRCQUgxQixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsWUFBWSxPQUNuQixDQUFDLElBQ1c7R0FBYyxDQWdCMUIsaUdBQ0Q7QUFDQSxTQWxCYSxjQUFjO0FBc0IzQixJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtBQUFHLENBQUEsQ0FBQTtBQUF6QixzQkFBc0IsNEJBSmxDLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQWMsQ0FBQyxVQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FDMUIsQ0FBQyxJQUNXLHNCQUFzQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDdEM7O0FBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFoQkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFnQkEsQUFoQkEsQUFBQSxBQXNCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIHVwcGVyRmlyc3QgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2NhcGl0YWxpemUnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FwaXRhbGl6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgYWxsOiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWxsKSB7XHJcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KGlucHV0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGlucHV0XHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAuc3BsaXQoJyAnKVxyXG4gICAgICAgIC5tYXAoKHZhbHVlOiBzdHJpbmcpID0+IHVwcGVyRmlyc3QodmFsdWUpKVxyXG4gICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NhcGl0YWxpemVQaXBlXSxcclxuICBleHBvcnRzOiBbQ2FwaXRhbGl6ZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdDYXBpdGFsaXplUGlwZU1vZHVsZSB7fVxyXG4iXX0=