import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let TemplatePipe = class TemplatePipe {
    transform(input, ...args) {
        if (!isString(input) || args.length === 0) {
            return input;
        }
        let template = input;
        for (let i = 0; i < args.length; ++i) {
            template = template.replace(`$${i + 1}`, args[i]);
        }
        return template;
    }
};
TemplatePipe.ɵfac = function TemplatePipe_Factory(t) { return new (t || TemplatePipe)(); };
TemplatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "template", type: TemplatePipe, pure: true });
export { TemplatePipe };
let NgTemplatePipeModule = class NgTemplatePipeModule {
};
NgTemplatePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTemplatePipeModule });
NgTemplatePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTemplatePipeModule_Factory(t) { return new (t || NgTemplatePipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePipe, [{
        type: Pipe,
        args: [{
                name: 'template'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTemplatePipeModule, { declarations: [TemplatePipe], exports: [TemplatePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTemplatePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TemplatePipe],
                exports: [TemplatePipe]
            }]
    }], null, null); })();
export { NgTemplatePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvdGVtcGxhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUMsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtBQUFHLElBQzFCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsR0FBRyxJQUFXO0FBQUksUUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzFDLFlBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsU0FBSztBQUNMLFFBQ0ksT0FBTyxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBYlksWUFBWSw0QkFIeEIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLFVBQVUsT0FDakIsQ0FBQyxJQUNXO0dBQVksQ0FheEIsMkZBQ0Q7QUFDQSxTQWZhLFlBQVk7QUFtQnpCLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0FBQUcsQ0FBQSxDQUFBO0FBQXZCLG9CQUFvQiw0QkFKaEMsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBWSxDQUFDLFVBQzVCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUN4QixDQUFDLElBQ1csb0JBQW9CLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNwQzs7QUExQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFiQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWFBLEFBYkEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3RlbXBsYXRlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSB8fCBhcmdzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRlbXBsYXRlID0gaW5wdXQ7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKGAkJHtpICsgMX1gLCBhcmdzW2ldKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGVtcGxhdGU7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1RlbXBsYXRlUGlwZV0sXHJcbiAgZXhwb3J0czogW1RlbXBsYXRlUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1RlbXBsYXRlUGlwZU1vZHVsZSB7fVxyXG4iXX0=