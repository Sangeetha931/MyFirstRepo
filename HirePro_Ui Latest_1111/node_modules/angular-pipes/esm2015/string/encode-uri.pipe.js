import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let EncodeURIPipe = class EncodeURIPipe {
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURI(input);
    }
};
EncodeURIPipe.ɵfac = function EncodeURIPipe_Factory(t) { return new (t || EncodeURIPipe)(); };
EncodeURIPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "encodeURI", type: EncodeURIPipe, pure: true });
export { EncodeURIPipe };
let NgEncodeURIPipeModule = class NgEncodeURIPipeModule {
};
NgEncodeURIPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEncodeURIPipeModule });
NgEncodeURIPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEncodeURIPipeModule_Factory(t) { return new (t || NgEncodeURIPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EncodeURIPipe, [{
        type: Pipe,
        args: [{
                name: 'encodeURI'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEncodeURIPipeModule, { declarations: [EncodeURIPipe], exports: [EncodeURIPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEncodeURIPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EncodeURIPipe],
                exports: [EncodeURIPipe]
            }]
    }], null, null); })();
export { NgEncodeURIPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLXVyaS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9lbmNvZGUtdXJpLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSzFDLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7QUFBRyxJQUMzQixTQUFTLENBQUMsS0FBVTtBQUN0QixRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxhQUFhLDRCQUh6QixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsV0FBVyxPQUNsQixDQUFDLElBQ1c7R0FBYSxDQVF6Qiw4RkFDRDtBQUNBLFNBVmEsYUFBYTtBQWMxQixJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtBQUFHLENBQUEsQ0FBQTtBQUF4QixxQkFBcUIsNEJBSmpDLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQWEsQ0FBQyxVQUM3QixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FDekIsQ0FBQyxJQUNXLHFCQUFxQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDckM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2VuY29kZVVSSScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFbmNvZGVVUklQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpIHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZW5jb2RlVVJJKGlucHV0KTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRW5jb2RlVVJJUGlwZV0sXHJcbiAgZXhwb3J0czogW0VuY29kZVVSSVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdFbmNvZGVVUklQaXBlTW9kdWxlIHt9XHJcbiJdfQ==