import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let SlugifyPipe = class SlugifyPipe {
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return input
            .toLowerCase()
            .trim()
            .replace(/[^a-z0-9\s-]/g, ' ')
            .replace(/[\s-]+/g, '-');
    }
};
SlugifyPipe.ɵfac = function SlugifyPipe_Factory(t) { return new (t || SlugifyPipe)(); };
SlugifyPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "slugify", type: SlugifyPipe, pure: true });
export { SlugifyPipe };
let NgSlugifyPipeModule = class NgSlugifyPipeModule {
};
NgSlugifyPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSlugifyPipeModule });
NgSlugifyPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSlugifyPipeModule_Factory(t) { return new (t || NgSlugifyPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlugifyPipe, [{
        type: Pipe,
        args: [{ name: 'slugify' }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSlugifyPipeModule, { declarations: [SlugifyPipe], exports: [SlugifyPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSlugifyPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SlugifyPipe],
                exports: [SlugifyPipe]
            }]
    }], null, null); })();
export { NgSlugifyPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2x1Z2lmeS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9zbHVnaWZ5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7QUFBRyxJQUN6QixTQUFTLENBQUMsS0FBVTtBQUFJLFFBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUs7QUFDaEIsYUFBTyxXQUFXLEVBQUU7QUFDcEIsYUFBTyxJQUFJLEVBQUU7QUFDYixhQUFPLE9BQU8sQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDO0FBQ3BDLGFBQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFaWSxXQUFXLDRCQUR2QixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsSUFDYixXQUFXLENBWXZCOzRGQUNEO0FBQ0EsU0FkYSxXQUFXO0FBa0J4QixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtBQUFHLENBQUEsQ0FBQTtBQUF0QixtQkFBbUIsNEJBSi9CLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQVcsQ0FBQyxVQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FDdkIsQ0FBQyxJQUNXLG1CQUFtQixDQUFHOzs7Ozs7Ozs7Ozs7MEJBQ25DOztBQXZCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFaQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVlBLEFBWkEsQUFBQSxBQWtCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICdzbHVnaWZ5JyB9KVxyXG5leHBvcnQgY2xhc3MgU2x1Z2lmeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0XHJcbiAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgIC50cmltKClcclxuICAgICAgLnJlcGxhY2UoL1teYS16MC05XFxzLV0vZywgJyAnKVxyXG4gICAgICAucmVwbGFjZSgvW1xccy1dKy9nLCAnLScpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTbHVnaWZ5UGlwZV0sXHJcbiAgZXhwb3J0czogW1NsdWdpZnlQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2x1Z2lmeVBpcGVNb2R1bGUge31cclxuIl19