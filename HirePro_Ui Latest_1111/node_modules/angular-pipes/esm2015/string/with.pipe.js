import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isNull } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let WithPipe = class WithPipe {
    transform(input, start = null, ends = null, csensitive = false) {
        if (!isString(input) || (isNull(start) && isNull(ends)) || start == '' || ends == '') {
            return input;
        }
        input = csensitive ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            let a = !input.indexOf(csensitive ? start : start.toLowerCase());
            let b = input.indexOf(csensitive ? ends : ends.toLowerCase(), input.length - ends.length) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf(csensitive ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            let position = input.length - ends.length;
            return input.indexOf(csensitive ? ends : ends.toLowerCase(), position) !== -1;
        }
    }
};
WithPipe.ɵfac = function WithPipe_Factory(t) { return new (t || WithPipe)(); };
WithPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "with", type: WithPipe, pure: true });
export { WithPipe };
let NgWithPipeModule = class NgWithPipeModule {
};
NgWithPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWithPipeModule });
NgWithPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWithPipeModule_Factory(t) { return new (t || NgWithPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WithPipe, [{
        type: Pipe,
        args: [{ name: 'with' }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWithPipeModule, { declarations: [WithPipe], exports: [WithPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWithPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WithPipe],
                exports: [WithPipe]
            }]
    }], null, null); })();
export { NgWithPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUdsRCxJQUFhLFFBQVEsR0FBckIsTUFBYSxRQUFRO0FBQUcsSUFDdEIsU0FBUyxDQUFDLEtBQWEsRUFBRSxRQUF1QixJQUFJLEVBQUUsT0FBc0IsSUFBSSxFQUFFLGFBQXNCLEtBQUs7QUFBSSxRQUMvRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUMxRixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JELFFBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN6QyxZQUFNLElBQUksQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDaEYsWUFBTSxJQUFJLENBQUMsR0FBWSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEgsWUFDTSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtBQUNsQyxnQkFBUSxPQUFPLElBQUksQ0FBQztBQUNwQixhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN4QixZQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN0RSxTQUFLO0FBQ0wsUUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3ZCLFlBQU0sSUFBSSxRQUFRLEdBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3JELFlBQ00sT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDcEYsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQTdCWSxRQUFRLDRCQURwQixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFDVixRQUFRLENBNkJwQjttRkFDRDtBQUNBLFNBL0JhLFFBQVE7QUFtQ3JCLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQUcsQ0FBQSxDQUFBO0FBQW5CLGdCQUFnQiw0QkFKNUIsUUFBUSxDQUFDLFVBQ1IsWUFBWTtBQUFFLENBQUMsUUFBUSxDQUFDLFVBQ3hCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUNwQixDQUFDLElBQ1csZ0JBQWdCLENBQUc7Ozs7Ozs7Ozs7OzswQkFDaEM7O0FBeENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUE3QkEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE2QkEsQUE3QkEsQUFBQSxBQW1DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIGlzTnVsbCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3dpdGgnIH0pXHJcbmV4cG9ydCBjbGFzcyBXaXRoUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogc3RyaW5nLCBzdGFydDogc3RyaW5nIHwgbnVsbCA9IG51bGwsIGVuZHM6IHN0cmluZyB8IG51bGwgPSBudWxsLCBjc2Vuc2l0aXZlOiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkgfHwgKGlzTnVsbChzdGFydCkgJiYgaXNOdWxsKGVuZHMpKSB8fCBzdGFydCA9PSAnJyB8fCBlbmRzID09ICcnKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dCA9IGNzZW5zaXRpdmUgPyBpbnB1dCA6IGlucHV0LnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgaWYgKCFpc051bGwoc3RhcnQpICYmICFpc051bGwoZW5kcykpIHtcclxuICAgICAgbGV0IGE6IGJvb2xlYW4gPSAhaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gc3RhcnQgOiBzdGFydC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgbGV0IGI6IGJvb2xlYW4gPSBpbnB1dC5pbmRleE9mKGNzZW5zaXRpdmUgPyBlbmRzIDogZW5kcy50b0xvd2VyQ2FzZSgpLCBpbnB1dC5sZW5ndGggLSBlbmRzLmxlbmd0aCkgIT09IC0xO1xyXG5cclxuICAgICAgaWYgKGEgPT0gdHJ1ZSAmJiBiID09IHRydWUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTnVsbChzdGFydCkpIHtcclxuICAgICAgcmV0dXJuICFpbnB1dC5pbmRleE9mKGNzZW5zaXRpdmUgPyBzdGFydCA6IHN0YXJ0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNOdWxsKGVuZHMpKSB7XHJcbiAgICAgIGxldCBwb3NpdGlvbjogYW55ID0gaW5wdXQubGVuZ3RoIC0gZW5kcy5sZW5ndGg7XHJcblxyXG4gICAgICByZXR1cm4gaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gZW5kcyA6IGVuZHMudG9Mb3dlckNhc2UoKSwgcG9zaXRpb24pICE9PSAtMTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbV2l0aFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtXaXRoUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1dpdGhQaXBlTW9kdWxlIHt9XHJcbiJdfQ==