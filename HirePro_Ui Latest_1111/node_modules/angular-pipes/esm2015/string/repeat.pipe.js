import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let RepeatPipe = class RepeatPipe {
    transform(input, times = 1, characters = '') {
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        const repeated = [input];
        for (let i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    }
};
RepeatPipe.ɵfac = function RepeatPipe_Factory(t) { return new (t || RepeatPipe)(); };
RepeatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "repeat", type: RepeatPipe, pure: true });
export { RepeatPipe };
let NgRepeatPipeModule = class NgRepeatPipeModule {
};
NgRepeatPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRepeatPipeModule });
NgRepeatPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRepeatPipeModule_Factory(t) { return new (t || NgRepeatPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RepeatPipe, [{
        type: Pipe,
        args: [{
                name: 'repeat'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRepeatPipeModule, { declarations: [RepeatPipe], exports: [RepeatPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRepeatPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RepeatPipe],
                exports: [RepeatPipe]
            }]
    }], null, null); })();
export { NgRepeatPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvc3RyaW5nL3JlcGVhdC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUsxQyxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0FBQUcsSUFDeEIsU0FBUyxDQUFDLEtBQVUsRUFBRSxRQUFnQixDQUFDLEVBQUUsYUFBcUIsRUFBRTtBQUFJLFFBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7QUFDcEIsWUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLFNBQUs7QUFDTCxRQUNJLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsUUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQ3BDLFlBQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixTQUFLO0FBQ0wsUUFDSSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBakJZLFVBQVUsNEJBSHRCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxRQUFRLE9BQ2YsQ0FBQyxJQUNXO0dBQVUsQ0FpQnRCLHFGQUNEO0FBQ0EsU0FuQmEsVUFBVTtBQXVCdkIsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7QUFBRyxDQUFBLENBQUE7QUFBckIsa0JBQWtCLDRCQUo5QixRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztTQUFVLENBQUMsVUFDMUIsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQ3RCLENBQUMsSUFDVyxrQkFBa0IsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7MEJBQ2xDOztBQTlCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWpCQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWlCQSxBQWpCQSxBQUFBLEFBdUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncmVwZWF0JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlcGVhdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgdGltZXM6IG51bWJlciA9IDEsIGNoYXJhY3RlcnM6IHN0cmluZyA9ICcnKTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGltZXMgPD0gMCkge1xyXG4gICAgICB0aW1lcyA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVwZWF0ZWQgPSBbaW5wdXRdO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aW1lczsgKytpKSB7XHJcbiAgICAgIHJlcGVhdGVkLnB1c2goaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXBlYXRlZC5qb2luKGNoYXJhY3RlcnMpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSZXBlYXRQaXBlXSxcclxuICBleHBvcnRzOiBbUmVwZWF0UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1JlcGVhdFBpcGVNb2R1bGUge31cclxuIl19