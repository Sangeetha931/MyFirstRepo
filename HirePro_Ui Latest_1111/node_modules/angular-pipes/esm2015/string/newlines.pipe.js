import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let NewlinesPipe = class NewlinesPipe {
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
    }
};
NewlinesPipe.ɵfac = function NewlinesPipe_Factory(t) { return new (t || NewlinesPipe)(); };
NewlinesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "newlines", type: NewlinesPipe, pure: true });
export { NewlinesPipe };
let NgNewlinesPipeModule = class NgNewlinesPipeModule {
};
NgNewlinesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgNewlinesPipeModule });
NgNewlinesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgNewlinesPipeModule_Factory(t) { return new (t || NgNewlinesPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NewlinesPipe, [{
        type: Pipe,
        args: [{
                name: 'newlines'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgNewlinesPipeModule, { declarations: [NewlinesPipe], exports: [NewlinesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNewlinesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [NewlinesPipe],
                exports: [NewlinesPipe]
            }]
    }], null, null); })();
export { NgNewlinesPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3bGluZXMucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvbmV3bGluZXMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUMsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtBQUFHLElBQzFCLFNBQVMsQ0FBQyxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN0RCxJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFSWSxZQUFZLDRCQUh4QixJQUFJLENBQUMsVUFDSixJQUFJLEVBQUUsVUFBVSxPQUNqQixDQUFDLElBQ1c7R0FBWSxDQVF4QiwyRkFDRDtBQUNBLFNBVmEsWUFBWTtBQWN6QixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtBQUFHLENBQUEsQ0FBQTtBQUF2QixvQkFBb0IsNEJBSmhDLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQVksQ0FBQyxVQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FDeEIsQ0FBQyxJQUNXLG9CQUFvQixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDcEM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFSQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbmV3bGluZXMnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmV3bGluZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgJzxiciAvPicpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtOZXdsaW5lc1BpcGVdLFxyXG4gIGV4cG9ydHM6IFtOZXdsaW5lc1BpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdOZXdsaW5lc1BpcGVNb2R1bGUge31cclxuIl19