// idea from https://github.com/a8m/angular-filter
import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
let StripTagsPipe = class StripTagsPipe {
    transform(input) {
        if (!isString(input) || isUndefined(input))
            return input;
        return input.replace(/<\S[^><]*>/g, '');
    }
};
StripTagsPipe.ɵfac = function StripTagsPipe_Factory(t) { return new (t || StripTagsPipe)(); };
StripTagsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "stripTags", type: StripTagsPipe, pure: true });
export { StripTagsPipe };
let NgStripTagsPipeModule = class NgStripTagsPipeModule {
};
NgStripTagsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgStripTagsPipeModule });
NgStripTagsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgStripTagsPipeModule_Factory(t) { return new (t || NgStripTagsPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripTagsPipe, [{
        type: Pipe,
        args: [{
                name: 'stripTags'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgStripTagsPipeModule, { declarations: [StripTagsPipe], exports: [StripTagsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgStripTagsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [StripTagsPipe],
                exports: [StripTagsPipe]
            }]
    }], null, null); })();
export { NgStripTagsPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXAtdGFncy5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9zdHJpcC10YWdzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBQ2xEO0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3ZELElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7QUFBRyxJQUMzQixTQUFTLENBQUMsS0FBYTtBQUFJLFFBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQztBQUFFLFlBQUEsT0FBTyxLQUFLLENBQUM7QUFDN0QsUUFDSSxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQU5ZLGFBQWEsNEJBSHpCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxXQUFXLE9BQ2xCLENBQUMsSUFDVztHQUFhLENBTXpCLDhGQUNEO0FBQ0EsU0FSYSxhQUFhO0FBWTFCLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0FBQUcsQ0FBQSxDQUFBO0FBQXhCLHFCQUFxQiw0QkFKakMsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBYSxDQUFDLFVBQzdCLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUN6QixDQUFDLElBQ1cscUJBQXFCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUNyQzs7QUFyQkEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQU5BLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaWRlYSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hOG0vYW5ndWxhci1maWx0ZXJcclxuXHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc3RyaXBUYWdzJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFN0cmlwVGFnc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSB8fCBpc1VuZGVmaW5lZChpbnB1dCkpIHJldHVybiBpbnB1dDtcclxuXHJcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvPFxcU1tePjxdKj4vZywgJycpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTdHJpcFRhZ3NQaXBlXSxcclxuICBleHBvcnRzOiBbU3RyaXBUYWdzUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1N0cmlwVGFnc1BpcGVNb2R1bGUge31cclxuIl19