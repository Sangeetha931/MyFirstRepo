import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let IsNotIdenticalPipe = class IsNotIdenticalPipe {
    transform(first, second) {
        return first !== second;
    }
};
IsNotIdenticalPipe.ɵfac = function IsNotIdenticalPipe_Factory(t) { return new (t || IsNotIdenticalPipe)(); };
IsNotIdenticalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "notIdentical", type: IsNotIdenticalPipe, pure: true });
export { IsNotIdenticalPipe };
let NgIsNotIdenticalPipeModule = class NgIsNotIdenticalPipeModule {
};
NgIsNotIdenticalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNotIdenticalPipeModule });
NgIsNotIdenticalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNotIdenticalPipeModule_Factory(t) { return new (t || NgIsNotIdenticalPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNotIdenticalPipe, [{
        type: Pipe,
        args: [{
                name: 'notIdentical'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNotIdenticalPipeModule, { declarations: [IsNotIdenticalPipe], exports: [IsNotIdenticalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNotIdenticalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNotIdenticalPipe],
                exports: [IsNotIdenticalPipe]
            }]
    }], null, null); })();
export { NgIsNotIdenticalPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbm90LWlkZW50aWNhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtbm90LWlkZW50aWNhbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlELElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0FBQUcsSUFDaEMsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFXO0FBQUksUUFDbkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUpZLGtCQUFrQiw0QkFIOUIsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLGNBQWMsT0FDckIsQ0FBQyxJQUNXO0NBQWtCLENBSTlCLDZHQUNEO0FBQ0EsU0FOYSxrQkFBa0I7QUFVL0IsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7QUFBRyxDQUFBLENBQUE7QUFBN0IsMEJBQTBCLDRCQUp0QyxRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztTQUFrQixDQUFDLFVBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQzlCLENBQUMsSUFDVywwQkFBMEIsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7MEJBQzFDOztBQWhCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUpBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbm90SWRlbnRpY2FsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTm90SWRlbnRpY2FsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZpcnN0ICE9PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0lzTm90SWRlbnRpY2FsUGlwZV0sXHJcbiAgZXhwb3J0czogW0lzTm90SWRlbnRpY2FsUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0lzTm90SWRlbnRpY2FsUGlwZU1vZHVsZSB7fVxyXG4iXX0=