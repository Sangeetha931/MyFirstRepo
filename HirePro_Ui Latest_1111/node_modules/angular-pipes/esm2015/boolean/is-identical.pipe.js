import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let IsIdenticalPipe = class IsIdenticalPipe {
    transform(first, second) {
        return first === second;
    }
};
IsIdenticalPipe.ɵfac = function IsIdenticalPipe_Factory(t) { return new (t || IsIdenticalPipe)(); };
IsIdenticalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "identical", type: IsIdenticalPipe, pure: true });
export { IsIdenticalPipe };
let NgIsIdenticalPipeModule = class NgIsIdenticalPipeModule {
};
NgIsIdenticalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsIdenticalPipeModule });
NgIsIdenticalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsIdenticalPipeModule_Factory(t) { return new (t || NgIsIdenticalPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsIdenticalPipe, [{
        type: Pipe,
        args: [{
                name: 'identical'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsIdenticalPipeModule, { declarations: [IsIdenticalPipe], exports: [IsIdenticalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsIdenticalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsIdenticalPipe],
                exports: [IsIdenticalPipe]
            }]
    }], null, null); })();
export { NgIsIdenticalPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtaWRlbnRpY2FsLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy1pZGVudGljYWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUs5RCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0FBQUcsSUFDN0IsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFXO0FBQUksUUFDbkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUpZLGVBQWUsNEJBSDNCLElBQUksQ0FBQyxVQUNKLElBQUksRUFBRSxXQUFXLE9BQ2xCLENBQUMsSUFDVztDQUFlLENBSTNCLG9HQUNEO0FBQ0EsU0FOYSxlQUFlO0FBVTVCLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0FBQUcsQ0FBQSxDQUFBO0FBQTFCLHVCQUF1Qiw0QkFKbkMsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLENBQUM7U0FBZSxDQUFDLFVBQy9CLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUMzQixDQUFDLElBQ1csdUJBQXVCLENBQUc7Ozs7Ozs7Ozs7Ozs7OzBCQUN2Qzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lkZW50aWNhbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0lkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmaXJzdCA9PT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0lkZW50aWNhbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc0lkZW50aWNhbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc0lkZW50aWNhbFBpcGVNb2R1bGUge31cclxuIl19