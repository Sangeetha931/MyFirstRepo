import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { NgIsEqualPipeModule } from './is-equal.pipe';
import { NgIsGreaterOrEqualPipeModule } from './is-greater-or-equal.pipe';
import { NgIsGreaterPipeModule } from './is-greater.pipe';
import { NgIsIdenticalPipeModule } from './is-identical.pipe';
import { NgIsLessOrEqualPipeModule } from './is-less-or-equal.pipe';
import { NgIsLessPipeModule } from './is-less.pipe';
import { NgIsNotEqualPipeModule } from './is-not-equal.pipe';
import { NgIsNotIdenticalPipeModule } from './is-not-identical.pipe';
import { NgIsNullPipeModule } from './is-null.pipe';
import { NgIsUndefinedPipeModule } from './is-undefined.pipe';
import { NgIsNilPipeModule } from './is-nil.pipe';
import { NgIsFunctionPipeModule } from './is-function.pipe';
import { NgIsNumberPipeModule } from './is-number.pipe';
import { NgIsStringPipeModule } from './is-string.pipe';
import { NgIsArrayPipeModule } from './is-array.pipe';
import { NgIsObjectPipeModule } from './is-object.pipe';
import { NgIsDefinedPipeModule } from './is-defined.pipe';
import * as ɵngcc0 from '@angular/core';
let NgTypesPipesModule = class NgTypesPipesModule {
};
NgTypesPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTypesPipesModule });
NgTypesPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTypesPipesModule_Factory(t) { return new (t || NgTypesPipesModule)(); }, imports: [[
            NgIsNullPipeModule,
            NgIsUndefinedPipeModule,
            NgIsNilPipeModule,
            NgIsFunctionPipeModule,
            NgIsNumberPipeModule,
            NgIsStringPipeModule,
            NgIsArrayPipeModule,
            NgIsObjectPipeModule,
            NgIsDefinedPipeModule,
        ]] });
export { NgTypesPipesModule };
let NgConditionsPipesModule = class NgConditionsPipesModule {
};
NgConditionsPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgConditionsPipesModule });
NgConditionsPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgConditionsPipesModule_Factory(t) { return new (t || NgConditionsPipesModule)(); }, imports: [[
            NgIsEqualPipeModule,
            NgIsGreaterOrEqualPipeModule,
            NgIsGreaterPipeModule,
            NgIsIdenticalPipeModule,
            NgIsLessOrEqualPipeModule,
            NgIsLessPipeModule,
            NgIsNotEqualPipeModule,
            NgIsNotIdenticalPipeModule,
        ]] });
export { NgConditionsPipesModule };
let NgBooleanPipesModule = class NgBooleanPipesModule {
};
NgBooleanPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBooleanPipesModule });
NgBooleanPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBooleanPipesModule_Factory(t) { return new (t || NgBooleanPipesModule)(); }, imports: [[NgConditionsPipesModule, NgTypesPipesModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTypesPipesModule, { imports: function () { return [NgIsNullPipeModule,
        NgIsUndefinedPipeModule,
        NgIsNilPipeModule,
        NgIsFunctionPipeModule,
        NgIsNumberPipeModule,
        NgIsStringPipeModule,
        NgIsArrayPipeModule,
        NgIsObjectPipeModule,
        NgIsDefinedPipeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTypesPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgIsNullPipeModule,
                    NgIsUndefinedPipeModule,
                    NgIsNilPipeModule,
                    NgIsFunctionPipeModule,
                    NgIsNumberPipeModule,
                    NgIsStringPipeModule,
                    NgIsArrayPipeModule,
                    NgIsObjectPipeModule,
                    NgIsDefinedPipeModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgConditionsPipesModule, { imports: function () { return [NgIsEqualPipeModule,
        NgIsGreaterOrEqualPipeModule,
        NgIsGreaterPipeModule,
        NgIsIdenticalPipeModule,
        NgIsLessOrEqualPipeModule,
        NgIsLessPipeModule,
        NgIsNotEqualPipeModule,
        NgIsNotIdenticalPipeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgConditionsPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgIsEqualPipeModule,
                    NgIsGreaterOrEqualPipeModule,
                    NgIsGreaterPipeModule,
                    NgIsIdenticalPipeModule,
                    NgIsLessOrEqualPipeModule,
                    NgIsLessPipeModule,
                    NgIsNotEqualPipeModule,
                    NgIsNotIdenticalPipeModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBooleanPipesModule, { imports: [NgConditionsPipesModule, NgTypesPipesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBooleanPipesModule, [{
        type: NgModule,
        args: [{
                imports: [NgConditionsPipesModule, NgTypesPipesModule]
            }]
    }], null, null); })();
export { NgBooleanPipesModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9ib29sZWFuLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBZTFELElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0FBQUcsQ0FBQSxDQUFBO0FBQXJCLGtCQUFrQiw0QkFiOUIsUUFBUSxDQUFDLFVBQ1IsT0FBTyxFQUFFO09BQ1Asa0JBQWtCLGNBQ2xCLHVCQUF1QixjQUN2QixpQkFBaUIsY0FDakIsc0JBQXNCLGNBQ3RCO01BQW9CLGNBQ3BCO1FBQW9CLGNBQ3BCO0lBQW1CLGNBQ25CO09BQW9CLGNBQ3BCO01BQXFCLFdBQ3RCLE9BQ0YsQ0FBQyxJQUNXO2FBQWtCLENBQUc7Ozs7Y0FDbEM7QUFDQSxTQUZhLGtCQUFrQjtBQWMvQixJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtBQUFHLENBQUEsQ0FBQTtBQUExQix1QkFBdUIsNEJBWm5DLFFBQVEsQ0FBQyxVQUNSLE9BQU8sRUFBRTtFQUNQLG1CQUFtQixjQUNuQiw0QkFBNEIsY0FDNUIscUJBQXFCLGNBQ3JCLHVCQUF1QixjQUN2QjtFQUF5QixjQUN6QjtDQUFrQixjQUNsQixzQkFBc0I7U0FDdEI7QUFBMEIsV0FDM0IsT0FDRixDQUFDLElBQ1c7U0FBdUIsQ0FBRzs7OztjQUN2QztBQUNBLFNBRmEsdUJBQXVCO0FBS3BDLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0FBQUcsQ0FBQSxDQUFBO0FBQXZCLG9CQUFvQiw0QkFIaEMsUUFBUSxDQUFDLFVBQ1IsT0FBTyxFQUFFLENBQUM7ZUFBdUIsRUFBRSxrQkFBa0IsQ0FBQyxPQUN2RCxDQUFDLElBQ1csb0JBQW9CLENBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ3BDOztBQXJEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFlQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5nSXNFcXVhbFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWVxdWFsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzR3JlYXRlck9yRXF1YWxQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLW9yLWVxdWFsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzR3JlYXRlclBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWdyZWF0ZXIucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNJZGVudGljYWxQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1pZGVudGljYWwucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNMZXNzT3JFcXVhbFBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLWxlc3Mtb3ItZXF1YWwucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNMZXNzUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtbGVzcy5waXBlJztcclxuaW1wb3J0IHsgTmdJc05vdEVxdWFsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtbm90LWVxdWFsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzTm90SWRlbnRpY2FsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtbm90LWlkZW50aWNhbC5waXBlJztcclxuaW1wb3J0IHsgTmdJc051bGxQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1udWxsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzVW5kZWZpbmVkUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtdW5kZWZpbmVkLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzTmlsUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtbmlsLnBpcGUnO1xyXG5pbXBvcnQgeyBOZ0lzRnVuY3Rpb25QaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1mdW5jdGlvbi5waXBlJztcclxuaW1wb3J0IHsgTmdJc051bWJlclBpcGVNb2R1bGUgfSBmcm9tICcuL2lzLW51bWJlci5waXBlJztcclxuaW1wb3J0IHsgTmdJc1N0cmluZ1BpcGVNb2R1bGUgfSBmcm9tICcuL2lzLXN0cmluZy5waXBlJztcclxuaW1wb3J0IHsgTmdJc0FycmF5UGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtYXJyYXkucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNPYmplY3RQaXBlTW9kdWxlIH0gZnJvbSAnLi9pcy1vYmplY3QucGlwZSc7XHJcbmltcG9ydCB7IE5nSXNEZWZpbmVkUGlwZU1vZHVsZSB9IGZyb20gJy4vaXMtZGVmaW5lZC5waXBlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgTmdJc051bGxQaXBlTW9kdWxlLFxyXG4gICAgTmdJc1VuZGVmaW5lZFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzTmlsUGlwZU1vZHVsZSxcclxuICAgIE5nSXNGdW5jdGlvblBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzTnVtYmVyUGlwZU1vZHVsZSxcclxuICAgIE5nSXNTdHJpbmdQaXBlTW9kdWxlLFxyXG4gICAgTmdJc0FycmF5UGlwZU1vZHVsZSxcclxuICAgIE5nSXNPYmplY3RQaXBlTW9kdWxlLFxyXG4gICAgTmdJc0RlZmluZWRQaXBlTW9kdWxlLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1R5cGVzUGlwZXNNb2R1bGUge31cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgTmdJc0VxdWFsUGlwZU1vZHVsZSxcclxuICAgIE5nSXNHcmVhdGVyT3JFcXVhbFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzR3JlYXRlclBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzSWRlbnRpY2FsUGlwZU1vZHVsZSxcclxuICAgIE5nSXNMZXNzT3JFcXVhbFBpcGVNb2R1bGUsXHJcbiAgICBOZ0lzTGVzc1BpcGVNb2R1bGUsXHJcbiAgICBOZ0lzTm90RXF1YWxQaXBlTW9kdWxlLFxyXG4gICAgTmdJc05vdElkZW50aWNhbFBpcGVNb2R1bGUsXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nQ29uZGl0aW9uc1BpcGVzTW9kdWxlIHt9XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtOZ0NvbmRpdGlvbnNQaXBlc01vZHVsZSwgTmdUeXBlc1BpcGVzTW9kdWxlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nQm9vbGVhblBpcGVzTW9kdWxlIHt9XHJcbiJdfQ==