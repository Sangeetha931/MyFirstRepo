import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let IsGreaterOrEqualPipe = class IsGreaterOrEqualPipe {
    transform(first, second) {
        return first >= second;
    }
};
IsGreaterOrEqualPipe.ɵfac = function IsGreaterOrEqualPipe_Factory(t) { return new (t || IsGreaterOrEqualPipe)(); };
IsGreaterOrEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "greaterOrEqual", type: IsGreaterOrEqualPipe, pure: true });
export { IsGreaterOrEqualPipe };
let NgIsGreaterOrEqualPipeModule = class NgIsGreaterOrEqualPipeModule {
};
NgIsGreaterOrEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsGreaterOrEqualPipeModule });
NgIsGreaterOrEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsGreaterOrEqualPipeModule_Factory(t) { return new (t || NgIsGreaterOrEqualPipeModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsGreaterOrEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'greaterOrEqual'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsGreaterOrEqualPipeModule, { declarations: [IsGreaterOrEqualPipe], exports: [IsGreaterOrEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsGreaterOrEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsGreaterOrEqualPipe],
                exports: [IsGreaterOrEqualPipe]
            }]
    }], null, null); })();
export { NgIsGreaterOrEqualPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZ3JlYXRlci1vci1lcXVhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtZ3JlYXRlci1vci1lcXVhbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0FBQUcsSUFDbEMsU0FBUyxDQUFDLEtBQVUsRUFBRSxNQUFXO0FBQUksUUFDbkMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUpZLG9CQUFvQiw0QkFIaEMsSUFBSSxDQUFDLFVBQ0osSUFBSSxFQUFFLGdCQUFnQixPQUN2QixDQUFDLElBQ1c7Q0FBb0IsQ0FJaEMsbUhBQ0Q7QUFDQSxTQU5hLG9CQUFvQjtBQVVqQyxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtBQUFHLENBQUEsQ0FBQTtBQUEvQiw0QkFBNEIsNEJBSnhDLFFBQVEsQ0FBQyxVQUNSLFlBQVksRUFBRSxDQUFDO1NBQW9CLENBQUMsVUFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUMsT0FDaEMsQ0FBQyxJQUNXLDRCQUE0QixDQUFHOzs7Ozs7Ozs7Ozs7OzswQkFDNUM7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlVHJhbnNmb3JtLCBQaXBlLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdncmVhdGVyT3JFcXVhbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0dyZWF0ZXJPckVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZpcnN0ID49IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbSXNHcmVhdGVyT3JFcXVhbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc0dyZWF0ZXJPckVxdWFsUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0lzR3JlYXRlck9yRXF1YWxQaXBlTW9kdWxlIHt9XHJcbiJdfQ==