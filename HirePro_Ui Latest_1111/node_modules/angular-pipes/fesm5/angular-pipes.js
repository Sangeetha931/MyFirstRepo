import { __values, __spread, __decorate, __read } from 'tslib';
import { Pipe, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
function isUndefined(value) {
    return typeof value === 'undefined';
}
function isNull(value) {
    return value === null;
}
function isNumber(value) {
    return typeof value === 'number';
}
function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
// Not strict positive
function isPositive(value) {
    return value >= 0;
}
function isInteger(value) {
    // No rest, is an integer
    return value % 1 === 0;
}
function isNil(value) {
    return value === null || typeof value === 'undefined';
}
function isString(value) {
    return typeof value === 'string';
}
function isObject(value) {
    return value !== null && typeof value === 'object';
}
function isArray(value) {
    return Array.isArray(value);
}
function isFunction(value) {
    return typeof value === 'function';
}
function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
function createRound(method) {
    // <any>Math to suppress error
    var func = Math[method];
    return function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            var pair = (value + "e").split('e');
            var val = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (val + "e").split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
function leftPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && str.length + ch.length <= len) {
        str = ch + str;
    }
    return str;
}
function rightPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && str.length + ch.length <= len) {
        str += ch;
    }
    return str;
}
function toString(value) {
    return "" + value;
}
function pad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    var left = true;
    while (++i < length) {
        var l = str.length + ch.length <= len ? str.length + ch.length : str.length + 1;
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
function flatten(input, index) {
    if (index === void 0) { index = 0; }
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
function getProperty(value, key) {
    var e_1, _a;
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    var keys = key.split('.');
    var result = value[keys.shift()];
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key_1 = keys_1_1.value;
            if (isNil(result) || !isObject(result)) {
                return undefined;
            }
            result = result[key_1];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
function sum(input, initial) {
    if (initial === void 0) { initial = 0; }
    return input.reduce(function (previous, current) { return previous + current; }, initial);
}
// http://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array-in-javascript
function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    var copy = __spread(input);
    for (var i = copy.length; i; --i) {
        var j = Math.floor(Math.random() * i);
        var x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
function deepIndexOf(collection, value) {
    var index = -1;
    var length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    var keysA = Object.keys(a);
    var keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    var hasOwn = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keysA.length; i++) {
        var key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
function isDeepObject(object) {
    return object.__isDeepObject__;
}
function wrapDeep(object) {
    return new DeepWrapper(object);
}
function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
var DeepWrapper = /** @class */ (function () {
    function DeepWrapper(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
    return DeepWrapper;
}());
function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map(function (value) { return input[value]; }).length;
    }
    return input.length;
}
function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    var result = true;
    var i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
function takeUntil(input, predicate) {
    var i = -1;
    var result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
function takeWhile(input, predicate) {
    return takeUntil(input, function (item, index, collection) { return !predicate(item, index, collection); });
}

var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, prop) {
        var e_1, _a;
        if (!isArray(input)) {
            return input;
        }
        var arr = {};
        try {
            for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var value = input_1_1.value;
                var field = getProperty(value, prop);
                if (isUndefined(arr[field])) {
                    arr[field] = [];
                }
                arr[field].push(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, value: arr[key] }); });
    };
GroupByPipe.ɵfac = function GroupByPipe_Factory(t) { return new (t || GroupByPipe)(); };
GroupByPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "groupBy", type: GroupByPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupByPipe, [{
        type: Pipe,
        args: [{
                name: 'groupBy'
            }]
    }], function () { return []; }, null); })();
    return GroupByPipe;
}());
var NgGroupByPipeModule = /** @class */ (function () {
    function NgGroupByPipeModule() {
    }
NgGroupByPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgGroupByPipeModule });
NgGroupByPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgGroupByPipeModule_Factory(t) { return new (t || NgGroupByPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgGroupByPipeModule, { declarations: [GroupByPipe], exports: [GroupByPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgGroupByPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GroupByPipe],
                exports: [GroupByPipe]
            }]
    }], function () { return []; }, null); })();
    return NgGroupByPipeModule;
}());

var MaxPipe = /** @class */ (function () {
    function MaxPipe() {
    }
    MaxPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        var max = input[0];
        input.forEach(function (value) {
            if (max < value) {
                max = value;
            }
        });
        return max;
    };
MaxPipe.ɵfac = function MaxPipe_Factory(t) { return new (t || MaxPipe)(); };
MaxPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "max", type: MaxPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaxPipe, [{
        type: Pipe,
        args: [{
                name: 'max'
            }]
    }], function () { return []; }, null); })();
    return MaxPipe;
}());
var NgMaxPipeModule = /** @class */ (function () {
    function NgMaxPipeModule() {
    }
NgMaxPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMaxPipeModule });
NgMaxPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMaxPipeModule_Factory(t) { return new (t || NgMaxPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMaxPipeModule, { declarations: [MaxPipe], exports: [MaxPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMaxPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MaxPipe],
                exports: [MaxPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMaxPipeModule;
}());

var MeanPipe = /** @class */ (function () {
    function MeanPipe() {
    }
    MeanPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        var count = input.length;
        if (count === 0) {
            return undefined;
        }
        return sum(input) / count;
    };
MeanPipe.ɵfac = function MeanPipe_Factory(t) { return new (t || MeanPipe)(); };
MeanPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "mean", type: MeanPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MeanPipe, [{
        type: Pipe,
        args: [{
                name: 'mean'
            }]
    }], function () { return []; }, null); })();
    return MeanPipe;
}());
var NgMeanPipeModule = /** @class */ (function () {
    function NgMeanPipeModule() {
    }
NgMeanPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMeanPipeModule });
NgMeanPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMeanPipeModule_Factory(t) { return new (t || NgMeanPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMeanPipeModule, { declarations: [MeanPipe], exports: [MeanPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMeanPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MeanPipe],
                exports: [MeanPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMeanPipeModule;
}());

var MinPipe = /** @class */ (function () {
    function MinPipe() {
    }
    MinPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        var min = input[0];
        input.forEach(function (value) {
            if (min > value) {
                min = value;
            }
        });
        return min;
    };
MinPipe.ɵfac = function MinPipe_Factory(t) { return new (t || MinPipe)(); };
MinPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "min", type: MinPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinPipe, [{
        type: Pipe,
        args: [{
                name: 'min'
            }]
    }], function () { return []; }, null); })();
    return MinPipe;
}());
var NgMinPipeModule = /** @class */ (function () {
    function NgMinPipeModule() {
    }
NgMinPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMinPipeModule });
NgMinPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMinPipeModule_Factory(t) { return new (t || NgMinPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMinPipeModule, { declarations: [MinPipe], exports: [MinPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMinPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MinPipe],
                exports: [MinPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMinPipeModule;
}());

var SumPipe = /** @class */ (function () {
    function SumPipe() {
    }
    SumPipe.prototype.transform = function (input) {
        return !isArray(input) ? input : sum(input);
    };
SumPipe.ɵfac = function SumPipe_Factory(t) { return new (t || SumPipe)(); };
SumPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "sum", type: SumPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SumPipe, [{
        type: Pipe,
        args: [{ name: 'sum' }]
    }], function () { return []; }, null); })();
    return SumPipe;
}());
var NgSumPipeModule = /** @class */ (function () {
    function NgSumPipeModule() {
    }
NgSumPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSumPipeModule });
NgSumPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSumPipeModule_Factory(t) { return new (t || NgSumPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSumPipeModule, { declarations: [SumPipe], exports: [SumPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSumPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SumPipe],
                exports: [SumPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSumPipeModule;
}());

var NgAggregatePipesModule = /** @class */ (function () {
    function NgAggregatePipesModule() {
    }
NgAggregatePipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgAggregatePipesModule });
NgAggregatePipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgAggregatePipesModule_Factory(t) { return new (t || NgAggregatePipesModule)(); }, imports: [[NgGroupByPipeModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgSumPipeModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgAggregatePipesModule, { imports: [NgGroupByPipeModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgSumPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgAggregatePipesModule, [{
        type: NgModule,
        args: [{
                imports: [NgGroupByPipeModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgSumPipeModule]
            }]
    }], function () { return []; }, null); })();
    return NgAggregatePipesModule;
}());

var EmptyPipe = /** @class */ (function () {
    function EmptyPipe() {
    }
    EmptyPipe.prototype.transform = function (input) {
        return empty(input);
    };
EmptyPipe.ɵfac = function EmptyPipe_Factory(t) { return new (t || EmptyPipe)(); };
EmptyPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "empty", type: EmptyPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmptyPipe, [{
        type: Pipe,
        args: [{
                name: 'empty'
            }]
    }], function () { return []; }, null); })();
    return EmptyPipe;
}());
var NgEmptyPipeModule = /** @class */ (function () {
    function NgEmptyPipeModule() {
    }
NgEmptyPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEmptyPipeModule });
NgEmptyPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEmptyPipeModule_Factory(t) { return new (t || NgEmptyPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEmptyPipeModule, { declarations: [EmptyPipe], exports: [EmptyPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEmptyPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EmptyPipe],
                exports: [EmptyPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEmptyPipeModule;
}());

var HeadPipe = /** @class */ (function () {
    function HeadPipe() {
    }
    HeadPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        // Will return undefined if length is 0
        return input[0];
    };
HeadPipe.ɵfac = function HeadPipe_Factory(t) { return new (t || HeadPipe)(); };
HeadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "head", type: HeadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeadPipe, [{
        type: Pipe,
        args: [{
                name: 'head'
            }]
    }], function () { return []; }, null); })();
    return HeadPipe;
}());
var NgHeadPipeModule = /** @class */ (function () {
    function NgHeadPipeModule() {
    }
NgHeadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgHeadPipeModule });
NgHeadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgHeadPipeModule_Factory(t) { return new (t || NgHeadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgHeadPipeModule, { declarations: [HeadPipe], exports: [HeadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgHeadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [HeadPipe],
                exports: [HeadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgHeadPipeModule;
}());

var InitialPipe = /** @class */ (function () {
    function InitialPipe() {
    }
    InitialPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, input.length - 1);
    };
InitialPipe.ɵfac = function InitialPipe_Factory(t) { return new (t || InitialPipe)(); };
InitialPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "initial", type: InitialPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InitialPipe, [{
        type: Pipe,
        args: [{
                name: 'initial'
            }]
    }], function () { return []; }, null); })();
    return InitialPipe;
}());
var NgInitialPipeModule = /** @class */ (function () {
    function NgInitialPipeModule() {
    }
NgInitialPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgInitialPipeModule });
NgInitialPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgInitialPipeModule_Factory(t) { return new (t || NgInitialPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgInitialPipeModule, { declarations: [InitialPipe], exports: [InitialPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgInitialPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [InitialPipe],
                exports: [InitialPipe]
            }]
    }], function () { return []; }, null); })();
    return NgInitialPipeModule;
}());

var LastPipe = /** @class */ (function () {
    function LastPipe() {
    }
    LastPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        // Returns undefined if empty
        return input[input.length - 1];
    };
LastPipe.ɵfac = function LastPipe_Factory(t) { return new (t || LastPipe)(); };
LastPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "last", type: LastPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LastPipe, [{
        type: Pipe,
        args: [{
                name: 'last'
            }]
    }], function () { return []; }, null); })();
    return LastPipe;
}());
var NgLastPipeModule = /** @class */ (function () {
    function NgLastPipeModule() {
    }
NgLastPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgLastPipeModule });
NgLastPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgLastPipeModule_Factory(t) { return new (t || NgLastPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgLastPipeModule, { declarations: [LastPipe], exports: [LastPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgLastPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [LastPipe],
                exports: [LastPipe]
            }]
    }], function () { return []; }, null); })();
    return NgLastPipeModule;
}());

var JoinPipe = /** @class */ (function () {
    function JoinPipe() {
    }
    JoinPipe.prototype.transform = function (input, character) {
        if (character === void 0) { character = ''; }
        if (!isArray(input)) {
            return input;
        }
        return input.join(character);
    };
JoinPipe.ɵfac = function JoinPipe_Factory(t) { return new (t || JoinPipe)(); };
JoinPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "join", type: JoinPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JoinPipe, [{
        type: Pipe,
        args: [{
                name: 'join'
            }]
    }], function () { return []; }, null); })();
    return JoinPipe;
}());
var NgJoinPipeModule = /** @class */ (function () {
    function NgJoinPipeModule() {
    }
NgJoinPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgJoinPipeModule });
NgJoinPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgJoinPipeModule_Factory(t) { return new (t || NgJoinPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgJoinPipeModule, { declarations: [JoinPipe], exports: [JoinPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgJoinPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [JoinPipe],
                exports: [JoinPipe]
            }]
    }], function () { return []; }, null); })();
    return NgJoinPipeModule;
}());

var TailPipe = /** @class */ (function () {
    function TailPipe() {
    }
    TailPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(1, input.length);
    };
TailPipe.ɵfac = function TailPipe_Factory(t) { return new (t || TailPipe)(); };
TailPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "tail", type: TailPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TailPipe, [{
        type: Pipe,
        args: [{
                name: 'tail'
            }]
    }], function () { return []; }, null); })();
    return TailPipe;
}());
var NgTailPipeModule = /** @class */ (function () {
    function NgTailPipeModule() {
    }
NgTailPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTailPipeModule });
NgTailPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTailPipeModule_Factory(t) { return new (t || NgTailPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTailPipeModule, { declarations: [TailPipe], exports: [TailPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTailPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TailPipe],
                exports: [TailPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTailPipeModule;
}());

var UniqPipe = /** @class */ (function () {
    function UniqPipe() {
    }
    UniqPipe.prototype.transform = function (input) {
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            var unwrappedInput_1 = unwrapDeep(input);
            if (!isArray(unwrappedInput_1)) {
                return unwrappedInput_1;
            }
            return unwrappedInput_1.filter(function (value, index) { return deepIndexOf(unwrappedInput_1, value) === index; });
        }
        return input.filter(function (value, index) { return input.indexOf(value) === index; });
    };
UniqPipe.ɵfac = function UniqPipe_Factory(t) { return new (t || UniqPipe)(); };
UniqPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "uniq", type: UniqPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UniqPipe, [{
        type: Pipe,
        args: [{
                name: 'uniq'
            }]
    }], function () { return []; }, null); })();
    return UniqPipe;
}());
var NgUniqPipeModule = /** @class */ (function () {
    function NgUniqPipeModule() {
    }
NgUniqPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgUniqPipeModule });
NgUniqPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgUniqPipeModule_Factory(t) { return new (t || NgUniqPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgUniqPipeModule, { declarations: [UniqPipe], exports: [UniqPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgUniqPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [UniqPipe],
                exports: [UniqPipe]
            }]
    }], function () { return []; }, null); })();
    return NgUniqPipeModule;
}());

var WithoutPipe = /** @class */ (function () {
    function WithoutPipe() {
    }
    WithoutPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            var unwrappedInput = unwrapDeep(input);
            if (!isArray(unwrappedInput)) {
                return unwrappedInput;
            }
            return unwrappedInput.filter(function (value) { return deepIndexOf(args, value) === -1; });
        }
        return input.filter(function (value) { return args.indexOf(value) === -1; });
    };
WithoutPipe.ɵfac = function WithoutPipe_Factory(t) { return new (t || WithoutPipe)(); };
WithoutPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "without", type: WithoutPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WithoutPipe, [{
        type: Pipe,
        args: [{
                name: 'without'
            }]
    }], function () { return []; }, null); })();
    return WithoutPipe;
}());
var NgWithoutPipeModule = /** @class */ (function () {
    function NgWithoutPipeModule() {
    }
NgWithoutPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWithoutPipeModule });
NgWithoutPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWithoutPipeModule_Factory(t) { return new (t || NgWithoutPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWithoutPipeModule, { declarations: [WithoutPipe], exports: [WithoutPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWithoutPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WithoutPipe],
                exports: [WithoutPipe]
            }]
    }], function () { return []; }, null); })();
    return NgWithoutPipeModule;
}());

var MapPipe = /** @class */ (function () {
    function MapPipe() {
    }
    MapPipe.prototype.transform = function (input, fn) {
        if (!isArray(input) || !fn) {
            return input;
        }
        return input.map(fn);
    };
MapPipe.ɵfac = function MapPipe_Factory(t) { return new (t || MapPipe)(); };
MapPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "map", type: MapPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MapPipe, [{
        type: Pipe,
        args: [{
                name: 'map'
            }]
    }], function () { return []; }, null); })();
    return MapPipe;
}());
var NgMapPipeModule = /** @class */ (function () {
    function NgMapPipeModule() {
    }
NgMapPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMapPipeModule });
NgMapPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMapPipeModule_Factory(t) { return new (t || NgMapPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMapPipeModule, { declarations: [MapPipe], exports: [MapPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMapPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MapPipe],
                exports: [MapPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMapPipeModule;
}());

var WherePipe = /** @class */ (function () {
    function WherePipe() {
    }
    /**
     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
     */
    WherePipe.prototype.transform = function (input, fn) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(fn)) {
            return input.filter(fn);
        }
        else if (isArray(fn)) {
            var _a = __read(fn, 2), key_1 = _a[0], value_1 = _a[1];
            return input.filter(function (item) { return getProperty(item, key_1) === value_1; });
        }
        else if (fn) {
            return input.filter(function (item) { return item === fn; });
        }
        else {
            return input;
        }
    };
WherePipe.ɵfac = function WherePipe_Factory(t) { return new (t || WherePipe)(); };
WherePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "where", type: WherePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WherePipe, [{
        type: Pipe,
        args: [{
                name: 'where'
            }]
    }], function () { return []; }, null); })();
    return WherePipe;
}());
var NgWherePipeModule = /** @class */ (function () {
    function NgWherePipeModule() {
    }
NgWherePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWherePipeModule });
NgWherePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWherePipeModule_Factory(t) { return new (t || NgWherePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWherePipeModule, { declarations: [WherePipe], exports: [WherePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWherePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WherePipe],
                exports: [WherePipe]
            }]
    }], function () { return []; }, null); })();
    return NgWherePipeModule;
}());

var FirstOrDefaultPipe = /** @class */ (function () {
    function FirstOrDefaultPipe() {
    }
    FirstOrDefaultPipe_1 = FirstOrDefaultPipe;
    FirstOrDefaultPipe.find = function (input, predicate, defaultValue) {
        var found = false;
        var result;
        var i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    };
    FirstOrDefaultPipe.prototype.transform = function (input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe_1.find(input, predicate, defaultValue);
        }
        else if (isArray(predicate)) {
            var _a = __read(predicate, 2), key_1 = _a[0], value_1 = _a[1];
            return FirstOrDefaultPipe_1.find(input, function (item) { return getProperty(item, key_1) === value_1; }, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe_1.find(input, function (item) { return item === predicate; }, defaultValue);
        }
        else {
            return input;
        }
    };
    var FirstOrDefaultPipe_1;
FirstOrDefaultPipe.ɵfac = function FirstOrDefaultPipe_Factory(t) { return new (t || FirstOrDefaultPipe)(); };
FirstOrDefaultPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "firstOrDefault", type: FirstOrDefaultPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirstOrDefaultPipe, [{
        type: Pipe,
        args: [{
                name: 'firstOrDefault'
            }]
    }], function () { return []; }, null); })();
    return FirstOrDefaultPipe;
}());
var NgFirstOrDefaultPipeModule = /** @class */ (function () {
    function NgFirstOrDefaultPipeModule() {
    }
NgFirstOrDefaultPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFirstOrDefaultPipeModule });
NgFirstOrDefaultPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFirstOrDefaultPipeModule_Factory(t) { return new (t || NgFirstOrDefaultPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFirstOrDefaultPipeModule, { declarations: [FirstOrDefaultPipe], exports: [FirstOrDefaultPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFirstOrDefaultPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FirstOrDefaultPipe],
                exports: [FirstOrDefaultPipe]
            }]
    }], function () { return []; }, null); })();
    return NgFirstOrDefaultPipeModule;
}());

var RangePipe = /** @class */ (function () {
    function RangePipe() {
    }
    RangePipe.prototype.transform = function (_input, size, start, step) {
        if (size === void 0) { size = 0; }
        if (start === void 0) { start = 1; }
        if (step === void 0) { step = 1; }
        var range = [];
        for (var length_1 = 0; length_1 < size; ++length_1) {
            range.push(start);
            start += step;
        }
        return range;
    };
RangePipe.ɵfac = function RangePipe_Factory(t) { return new (t || RangePipe)(); };
RangePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "range", type: RangePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangePipe, [{
        type: Pipe,
        args: [{
                name: 'range'
            }]
    }], function () { return []; }, null); })();
    return RangePipe;
}());
var NgRangePipeModule = /** @class */ (function () {
    function NgRangePipeModule() {
    }
NgRangePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRangePipeModule });
NgRangePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRangePipeModule_Factory(t) { return new (t || NgRangePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRangePipeModule, { declarations: [RangePipe], exports: [RangePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRangePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RangePipe],
                exports: [RangePipe]
            }]
    }], function () { return []; }, null); })();
    return NgRangePipeModule;
}());

var PluckPipe = /** @class */ (function () {
    function PluckPipe() {
    }
    PluckPipe.prototype.transform = function (input, key) {
        if (!isArray(input) || !key) {
            return input;
        }
        return input.map(function (value) {
            return getProperty(value, key);
        });
    };
PluckPipe.ɵfac = function PluckPipe_Factory(t) { return new (t || PluckPipe)(); };
PluckPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pluck", type: PluckPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PluckPipe, [{
        type: Pipe,
        args: [{
                name: 'pluck'
            }]
    }], function () { return []; }, null); })();
    return PluckPipe;
}());
var NgPluckPipeModule = /** @class */ (function () {
    function NgPluckPipeModule() {
    }
NgPluckPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPluckPipeModule });
NgPluckPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPluckPipeModule_Factory(t) { return new (t || NgPluckPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPluckPipeModule, { declarations: [PluckPipe], exports: [PluckPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPluckPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PluckPipe],
                exports: [PluckPipe]
            }]
    }], function () { return []; }, null); })();
    return NgPluckPipeModule;
}());

var ReversePipe = /** @class */ (function () {
    function ReversePipe() {
    }
    ReversePipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return __spread(input).reverse();
    };
ReversePipe.ɵfac = function ReversePipe_Factory(t) { return new (t || ReversePipe)(); };
ReversePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "reverse", type: ReversePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReversePipe, [{
        type: Pipe,
        args: [{
                name: 'reverse'
            }]
    }], function () { return []; }, null); })();
    return ReversePipe;
}());
var NgReversePipeModule = /** @class */ (function () {
    function NgReversePipeModule() {
    }
NgReversePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReversePipeModule });
NgReversePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReversePipeModule_Factory(t) { return new (t || NgReversePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReversePipeModule, { declarations: [ReversePipe], exports: [ReversePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReversePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReversePipe],
                exports: [ReversePipe]
            }]
    }], function () { return []; }, null); })();
    return NgReversePipeModule;
}());

var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe_1 = OrderByPipe;
    OrderByPipe._orderBy = function (a, b) {
        if (a instanceof Date && b instanceof Date) {
            return a < b ? -1 : a > b ? 1 : 0;
        }
        var floatA = parseFloat(a);
        var floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            var lowerA = a.toLowerCase();
            var lowerB = b.toLowerCase();
            return lowerA < lowerB ? -1 : lowerA > lowerB ? 1 : 0;
        }
        return floatA < floatB ? -1 : floatA > floatB ? 1 : 0;
    };
    OrderByPipe.prototype.transform = function (input, config) {
        if (config === void 0) { config = '+'; }
        if (!isArray(input)) {
            return input;
        }
        var configIsArray = isArray(config);
        // If config === 'param' OR ['param']
        if (!configIsArray || (configIsArray && config.length === 1)) {
            var propertyToCheck = configIsArray ? config[0] : config;
            var first = propertyToCheck.substr(0, 1);
            var desc_1 = first === '-'; // First character is '-'
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return __spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe_1._orderBy(a, b);
                    return desc_1 ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                var property_1 = first === '+' || desc_1 ? propertyToCheck.substr(1) : propertyToCheck;
                return __spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe_1._orderBy(a[property_1], b[property_1]);
                    return desc_1 ? -comparator : comparator;
                });
            }
        }
        else {
            // Config is an array of property
            return __spread(input).sort(function (a, b) {
                for (var i = 0; i < config.length; ++i) {
                    var first = config[i].substr(0, 1);
                    var desc = first === '-';
                    var property = first === '+' || desc ? config[i].substr(1) : config[i];
                    var comparator = OrderByPipe_1._orderBy(a[property], b[property]);
                    var comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    };
    var OrderByPipe_1;
OrderByPipe.ɵfac = function OrderByPipe_Factory(t) { return new (t || OrderByPipe)(); };
OrderByPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "orderBy", type: OrderByPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OrderByPipe, [{
        type: Pipe,
        args: [{
                name: 'orderBy'
            }]
    }], function () { return []; }, null); })();
    return OrderByPipe;
}());
var NgOrderByPipeModule = /** @class */ (function () {
    function NgOrderByPipeModule() {
    }
NgOrderByPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOrderByPipeModule });
NgOrderByPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOrderByPipeModule_Factory(t) { return new (t || NgOrderByPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOrderByPipeModule, { declarations: [OrderByPipe], exports: [OrderByPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOrderByPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [OrderByPipe],
                exports: [OrderByPipe]
            }]
    }], function () { return []; }, null); })();
    return NgOrderByPipeModule;
}());

var CountPipe = /** @class */ (function () {
    function CountPipe() {
    }
    CountPipe.prototype.transform = function (input) {
        return count(input);
    };
CountPipe.ɵfac = function CountPipe_Factory(t) { return new (t || CountPipe)(); };
CountPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "count", type: CountPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountPipe, [{
        type: Pipe,
        args: [{
                name: 'count'
            }]
    }], function () { return []; }, null); })();
    return CountPipe;
}());
var NgCountPipeModule = /** @class */ (function () {
    function NgCountPipeModule() {
    }
NgCountPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCountPipeModule });
NgCountPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCountPipeModule_Factory(t) { return new (t || NgCountPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCountPipeModule, { declarations: [CountPipe], exports: [CountPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCountPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CountPipe],
                exports: [CountPipe]
            }]
    }], function () { return []; }, null); })();
    return NgCountPipeModule;
}());

var SomePipe = /** @class */ (function () {
    function SomePipe() {
    }
    SomePipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || !predicate) {
            return input;
        }
        var result = false;
        var i = -1;
        while (++i < input.length && !result) {
            result = predicate(input[i], i, input);
        }
        return result;
    };
SomePipe.ɵfac = function SomePipe_Factory(t) { return new (t || SomePipe)(); };
SomePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "some", type: SomePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SomePipe, [{
        type: Pipe,
        args: [{
                name: 'some'
            }]
    }], function () { return []; }, null); })();
    return SomePipe;
}());
var NgSomePipeModule = /** @class */ (function () {
    function NgSomePipeModule() {
    }
NgSomePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSomePipeModule });
NgSomePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSomePipeModule_Factory(t) { return new (t || NgSomePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSomePipeModule, { declarations: [SomePipe], exports: [SomePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSomePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SomePipe],
                exports: [SomePipe]
            }]
    }], function () { return []; }, null); })();
    return NgSomePipeModule;
}());

var EveryPipe = /** @class */ (function () {
    function EveryPipe() {
    }
    EveryPipe.prototype.transform = function (input, predicate) {
        return every(input, predicate);
    };
EveryPipe.ɵfac = function EveryPipe_Factory(t) { return new (t || EveryPipe)(); };
EveryPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "every", type: EveryPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EveryPipe, [{
        type: Pipe,
        args: [{
                name: 'every'
            }]
    }], function () { return []; }, null); })();
    return EveryPipe;
}());
var NgEveryPipeModule = /** @class */ (function () {
    function NgEveryPipeModule() {
    }
NgEveryPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEveryPipeModule });
NgEveryPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEveryPipeModule_Factory(t) { return new (t || NgEveryPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEveryPipeModule, { declarations: [EveryPipe], exports: [EveryPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEveryPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EveryPipe],
                exports: [EveryPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEveryPipeModule;
}());

var ShufflePipe = /** @class */ (function () {
    function ShufflePipe() {
    }
    ShufflePipe.prototype.transform = function (input) {
        return shuffle(input);
    };
ShufflePipe.ɵfac = function ShufflePipe_Factory(t) { return new (t || ShufflePipe)(); };
ShufflePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "shuffle", type: ShufflePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShufflePipe, [{
        type: Pipe,
        args: [{
                name: 'shuffle'
            }]
    }], function () { return []; }, null); })();
    return ShufflePipe;
}());
var NgShufflePipeModule = /** @class */ (function () {
    function NgShufflePipeModule() {
    }
NgShufflePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgShufflePipeModule });
NgShufflePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgShufflePipeModule_Factory(t) { return new (t || NgShufflePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgShufflePipeModule, { declarations: [ShufflePipe], exports: [ShufflePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgShufflePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ShufflePipe],
                exports: [ShufflePipe]
            }]
    }], function () { return []; }, null); })();
    return NgShufflePipeModule;
}());

var TakePipe = /** @class */ (function () {
    function TakePipe() {
    }
    TakePipe.prototype.transform = function (input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, quantity || 1);
    };
TakePipe.ɵfac = function TakePipe_Factory(t) { return new (t || TakePipe)(); };
TakePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "take", type: TakePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakePipe, [{
        type: Pipe,
        args: [{
                name: 'take'
            }]
    }], function () { return []; }, null); })();
    return TakePipe;
}());
var NgTakePipeModule = /** @class */ (function () {
    function NgTakePipeModule() {
    }
NgTakePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakePipeModule });
NgTakePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakePipeModule_Factory(t) { return new (t || NgTakePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakePipeModule, { declarations: [TakePipe], exports: [TakePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakePipe],
                exports: [TakePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTakePipeModule;
}());

var DropPipe = /** @class */ (function () {
    function DropPipe() {
    }
    DropPipe.prototype.transform = function (input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(quantity || 1, input.lenth);
    };
DropPipe.ɵfac = function DropPipe_Factory(t) { return new (t || DropPipe)(); };
DropPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "drop", type: DropPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropPipe, [{
        type: Pipe,
        args: [{
                name: 'drop'
            }]
    }], function () { return []; }, null); })();
    return DropPipe;
}());
var NgDropPipeModule = /** @class */ (function () {
    function NgDropPipeModule() {
    }
NgDropPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDropPipeModule });
NgDropPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDropPipeModule_Factory(t) { return new (t || NgDropPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDropPipeModule, { declarations: [DropPipe], exports: [DropPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDropPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DropPipe],
                exports: [DropPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDropPipeModule;
}());

var DeepPipe = /** @class */ (function () {
    function DeepPipe() {
    }
    DeepPipe.prototype.transform = function (value) {
        if (isDeepObject(value)) {
            return value;
        }
        return wrapDeep(value);
    };
DeepPipe.ɵfac = function DeepPipe_Factory(t) { return new (t || DeepPipe)(); };
DeepPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "deep", type: DeepPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DeepPipe, [{
        type: Pipe,
        args: [{
                name: 'deep'
            }]
    }], function () { return []; }, null); })();
    return DeepPipe;
}());
var NgDeepPipeModule = /** @class */ (function () {
    function NgDeepPipeModule() {
    }
NgDeepPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDeepPipeModule });
NgDeepPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDeepPipeModule_Factory(t) { return new (t || NgDeepPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDeepPipeModule, { declarations: [DeepPipe], exports: [DeepPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDeepPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DeepPipe],
                exports: [DeepPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDeepPipeModule;
}());

var ChunkPipe = /** @class */ (function () {
    function ChunkPipe() {
    }
    ChunkPipe.prototype.transform = function (input, size) {
        if (size === void 0) { size = 1; }
        if (!isArray(input)) {
            return input;
        }
        return [].concat.apply([], input.map(function (_elem, i) {
            return i % size ? [] : [input.slice(i, i + size)];
        }));
    };
ChunkPipe.ɵfac = function ChunkPipe_Factory(t) { return new (t || ChunkPipe)(); };
ChunkPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "chunk", type: ChunkPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChunkPipe, [{
        type: Pipe,
        args: [{
                name: 'chunk'
            }]
    }], function () { return []; }, null); })();
    return ChunkPipe;
}());
var NgChunkPipeModule = /** @class */ (function () {
    function NgChunkPipeModule() {
    }
NgChunkPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChunkPipeModule });
NgChunkPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgChunkPipeModule_Factory(t) { return new (t || NgChunkPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChunkPipeModule, { declarations: [ChunkPipe], exports: [ChunkPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChunkPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ChunkPipe],
                exports: [ChunkPipe]
            }]
    }], function () { return []; }, null); })();
    return NgChunkPipeModule;
}());

var FlattenPipe = /** @class */ (function () {
    function FlattenPipe() {
    }
    FlattenPipe.prototype.transform = function (input) {
        var isDeep = isDeepObject(input);
        if (!isArray(input) && !isDeep) {
            return input;
        }
        if (isDeep) {
            var unwrapped = unwrapDeep(input);
            if (!isArray(unwrapped)) {
                return unwrapped;
            }
            return flatten(unwrapped, 0);
        }
        return [].concat.apply([], input);
    };
FlattenPipe.ɵfac = function FlattenPipe_Factory(t) { return new (t || FlattenPipe)(); };
FlattenPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "flatten", type: FlattenPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FlattenPipe, [{
        type: Pipe,
        args: [{ name: 'flatten' }]
    }], function () { return []; }, null); })();
    return FlattenPipe;
}());
var NgFlattenPipeModule = /** @class */ (function () {
    function NgFlattenPipeModule() {
    }
NgFlattenPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFlattenPipeModule });
NgFlattenPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFlattenPipeModule_Factory(t) { return new (t || NgFlattenPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFlattenPipeModule, { declarations: [FlattenPipe], exports: [FlattenPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFlattenPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FlattenPipe],
                exports: [FlattenPipe]
            }]
    }], function () { return []; }, null); })();
    return NgFlattenPipeModule;
}());

var IntersectionPipe = /** @class */ (function () {
    function IntersectionPipe() {
    }
    IntersectionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return unwrapped.reduce(function (intersection, value) {
                return intersection.concat(deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1 ? value : []);
            }, []);
        }
        return a.reduce(function (intersection, value) {
            return intersection.concat(b.indexOf(value) !== -1 && intersection.indexOf(value) === -1 ? value : []);
        }, []);
    };
IntersectionPipe.ɵfac = function IntersectionPipe_Factory(t) { return new (t || IntersectionPipe)(); };
IntersectionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "intersection", type: IntersectionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionPipe, [{
        type: Pipe,
        args: [{
                name: 'intersection'
            }]
    }], function () { return []; }, null); })();
    return IntersectionPipe;
}());
var NgIntersectionPipeModule = /** @class */ (function () {
    function NgIntersectionPipeModule() {
    }
NgIntersectionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIntersectionPipeModule });
NgIntersectionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIntersectionPipeModule_Factory(t) { return new (t || NgIntersectionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIntersectionPipeModule, { declarations: [IntersectionPipe], exports: [IntersectionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIntersectionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IntersectionPipe],
                exports: [IntersectionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIntersectionPipeModule;
}());

var UnionPipe = /** @class */ (function () {
    function UnionPipe() {
    }
    UnionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return []
                .concat(unwrapped)
                .concat(b)
                .filter(function (value, index, input) { return deepIndexOf(input, value) === index; });
        }
        return []
            .concat(a)
            .concat(b)
            .filter(function (value, index, input) { return input.indexOf(value) === index; });
    };
UnionPipe.ɵfac = function UnionPipe_Factory(t) { return new (t || UnionPipe)(); };
UnionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "union", type: UnionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnionPipe, [{
        type: Pipe,
        args: [{
                name: 'union'
            }]
    }], function () { return []; }, null); })();
    return UnionPipe;
}());
var NgUnionPipeModule = /** @class */ (function () {
    function NgUnionPipeModule() {
    }
NgUnionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgUnionPipeModule });
NgUnionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgUnionPipeModule_Factory(t) { return new (t || NgUnionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgUnionPipeModule, { declarations: [UnionPipe], exports: [UnionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgUnionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [UnionPipe],
                exports: [UnionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgUnionPipeModule;
}());

var TakeWhilePipe = /** @class */ (function () {
    function TakeWhilePipe() {
    }
    TakeWhilePipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeWhile(input, predicate);
    };
TakeWhilePipe.ɵfac = function TakeWhilePipe_Factory(t) { return new (t || TakeWhilePipe)(); };
TakeWhilePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "takeWhile", type: TakeWhilePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakeWhilePipe, [{
        type: Pipe,
        args: [{
                name: 'takeWhile'
            }]
    }], function () { return []; }, null); })();
    return TakeWhilePipe;
}());
var NgTakeWhilePipeModule = /** @class */ (function () {
    function NgTakeWhilePipeModule() {
    }
NgTakeWhilePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakeWhilePipeModule });
NgTakeWhilePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakeWhilePipeModule_Factory(t) { return new (t || NgTakeWhilePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakeWhilePipeModule, { declarations: [TakeWhilePipe], exports: [TakeWhilePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakeWhilePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakeWhilePipe],
                exports: [TakeWhilePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTakeWhilePipeModule;
}());

var TakeUntilPipe = /** @class */ (function () {
    function TakeUntilPipe() {
    }
    TakeUntilPipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeUntil(input, predicate);
    };
TakeUntilPipe.ɵfac = function TakeUntilPipe_Factory(t) { return new (t || TakeUntilPipe)(); };
TakeUntilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "takeUntil", type: TakeUntilPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakeUntilPipe, [{
        type: Pipe,
        args: [{
                name: 'takeUntil'
            }]
    }], function () { return []; }, null); })();
    return TakeUntilPipe;
}());
var NgTakeUntilPipeModule = /** @class */ (function () {
    function NgTakeUntilPipeModule() {
    }
NgTakeUntilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakeUntilPipeModule });
NgTakeUntilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakeUntilPipeModule_Factory(t) { return new (t || NgTakeUntilPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakeUntilPipeModule, { declarations: [TakeUntilPipe], exports: [TakeUntilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakeUntilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakeUntilPipe],
                exports: [TakeUntilPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTakeUntilPipeModule;
}());

var NgArrayPipesModule = /** @class */ (function () {
    function NgArrayPipesModule() {
    }
NgArrayPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgArrayPipesModule });
NgArrayPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgArrayPipesModule_Factory(t) { return new (t || NgArrayPipesModule)(); }, imports: [[
            NgChunkPipeModule,
            NgCountPipeModule,
            NgDeepPipeModule,
            NgDropPipeModule,
            NgEmptyPipeModule,
            NgEveryPipeModule,
            NgFirstOrDefaultPipeModule,
            NgFlattenPipeModule,
            NgHeadPipeModule,
            NgInitialPipeModule,
            NgIntersectionPipeModule,
            NgJoinPipeModule,
            NgLastPipeModule,
            NgMapPipeModule,
            NgOrderByPipeModule,
            NgPluckPipeModule,
            NgRangePipeModule,
            NgReversePipeModule,
            NgShufflePipeModule,
            NgSomePipeModule,
            NgTailPipeModule,
            NgTakeUntilPipeModule,
            NgTakeWhilePipeModule,
            NgTakePipeModule,
            NgUnionPipeModule,
            NgUniqPipeModule,
            NgWherePipeModule,
            NgWithoutPipeModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgArrayPipesModule, { imports: [NgChunkPipeModule, NgCountPipeModule, NgDeepPipeModule, NgDropPipeModule, NgEmptyPipeModule, NgEveryPipeModule, NgFirstOrDefaultPipeModule, NgFlattenPipeModule, NgHeadPipeModule, NgInitialPipeModule, NgIntersectionPipeModule, NgJoinPipeModule, NgLastPipeModule, NgMapPipeModule, NgOrderByPipeModule, NgPluckPipeModule, NgRangePipeModule, NgReversePipeModule, NgShufflePipeModule, NgSomePipeModule, NgTailPipeModule, NgTakeUntilPipeModule, NgTakeWhilePipeModule, NgTakePipeModule, NgUnionPipeModule, NgUniqPipeModule, NgWherePipeModule, NgWithoutPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgArrayPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgChunkPipeModule,
                    NgCountPipeModule,
                    NgDeepPipeModule,
                    NgDropPipeModule,
                    NgEmptyPipeModule,
                    NgEveryPipeModule,
                    NgFirstOrDefaultPipeModule,
                    NgFlattenPipeModule,
                    NgHeadPipeModule,
                    NgInitialPipeModule,
                    NgIntersectionPipeModule,
                    NgJoinPipeModule,
                    NgLastPipeModule,
                    NgMapPipeModule,
                    NgOrderByPipeModule,
                    NgPluckPipeModule,
                    NgRangePipeModule,
                    NgReversePipeModule,
                    NgShufflePipeModule,
                    NgSomePipeModule,
                    NgTailPipeModule,
                    NgTakeUntilPipeModule,
                    NgTakeWhilePipeModule,
                    NgTakePipeModule,
                    NgUnionPipeModule,
                    NgUniqPipeModule,
                    NgWherePipeModule,
                    NgWithoutPipeModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgArrayPipesModule;
}());

var IsEqualPipe = /** @class */ (function () {
    function IsEqualPipe() {
    }
    IsEqualPipe.prototype.transform = function (first, second) {
        return first == second;
    };
IsEqualPipe.ɵfac = function IsEqualPipe_Factory(t) { return new (t || IsEqualPipe)(); };
IsEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "equal", type: IsEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'equal'
            }]
    }], function () { return []; }, null); })();
    return IsEqualPipe;
}());
var NgIsEqualPipeModule = /** @class */ (function () {
    function NgIsEqualPipeModule() {
    }
NgIsEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsEqualPipeModule });
NgIsEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsEqualPipeModule_Factory(t) { return new (t || NgIsEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsEqualPipeModule, { declarations: [IsEqualPipe], exports: [IsEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsEqualPipe],
                exports: [IsEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsEqualPipeModule;
}());

var IsGreaterOrEqualPipe = /** @class */ (function () {
    function IsGreaterOrEqualPipe() {
    }
    IsGreaterOrEqualPipe.prototype.transform = function (first, second) {
        return first >= second;
    };
IsGreaterOrEqualPipe.ɵfac = function IsGreaterOrEqualPipe_Factory(t) { return new (t || IsGreaterOrEqualPipe)(); };
IsGreaterOrEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "greaterOrEqual", type: IsGreaterOrEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsGreaterOrEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'greaterOrEqual'
            }]
    }], function () { return []; }, null); })();
    return IsGreaterOrEqualPipe;
}());
var NgIsGreaterOrEqualPipeModule = /** @class */ (function () {
    function NgIsGreaterOrEqualPipeModule() {
    }
NgIsGreaterOrEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsGreaterOrEqualPipeModule });
NgIsGreaterOrEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsGreaterOrEqualPipeModule_Factory(t) { return new (t || NgIsGreaterOrEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsGreaterOrEqualPipeModule, { declarations: [IsGreaterOrEqualPipe], exports: [IsGreaterOrEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsGreaterOrEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsGreaterOrEqualPipe],
                exports: [IsGreaterOrEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsGreaterOrEqualPipeModule;
}());

var IsGreaterPipe = /** @class */ (function () {
    function IsGreaterPipe() {
    }
    IsGreaterPipe.prototype.transform = function (first, second) {
        return first > second;
    };
IsGreaterPipe.ɵfac = function IsGreaterPipe_Factory(t) { return new (t || IsGreaterPipe)(); };
IsGreaterPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "greater", type: IsGreaterPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsGreaterPipe, [{
        type: Pipe,
        args: [{
                name: 'greater'
            }]
    }], function () { return []; }, null); })();
    return IsGreaterPipe;
}());
var NgIsGreaterPipeModule = /** @class */ (function () {
    function NgIsGreaterPipeModule() {
    }
NgIsGreaterPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsGreaterPipeModule });
NgIsGreaterPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsGreaterPipeModule_Factory(t) { return new (t || NgIsGreaterPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsGreaterPipeModule, { declarations: [IsGreaterPipe], exports: [IsGreaterPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsGreaterPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsGreaterPipe],
                exports: [IsGreaterPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsGreaterPipeModule;
}());

var IsIdenticalPipe = /** @class */ (function () {
    function IsIdenticalPipe() {
    }
    IsIdenticalPipe.prototype.transform = function (first, second) {
        return first === second;
    };
IsIdenticalPipe.ɵfac = function IsIdenticalPipe_Factory(t) { return new (t || IsIdenticalPipe)(); };
IsIdenticalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "identical", type: IsIdenticalPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsIdenticalPipe, [{
        type: Pipe,
        args: [{
                name: 'identical'
            }]
    }], function () { return []; }, null); })();
    return IsIdenticalPipe;
}());
var NgIsIdenticalPipeModule = /** @class */ (function () {
    function NgIsIdenticalPipeModule() {
    }
NgIsIdenticalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsIdenticalPipeModule });
NgIsIdenticalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsIdenticalPipeModule_Factory(t) { return new (t || NgIsIdenticalPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsIdenticalPipeModule, { declarations: [IsIdenticalPipe], exports: [IsIdenticalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsIdenticalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsIdenticalPipe],
                exports: [IsIdenticalPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsIdenticalPipeModule;
}());

var IsLessOrEqualPipe = /** @class */ (function () {
    function IsLessOrEqualPipe() {
    }
    IsLessOrEqualPipe.prototype.transform = function (first, second) {
        return first <= second;
    };
IsLessOrEqualPipe.ɵfac = function IsLessOrEqualPipe_Factory(t) { return new (t || IsLessOrEqualPipe)(); };
IsLessOrEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "lessOrEqual", type: IsLessOrEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsLessOrEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'lessOrEqual'
            }]
    }], function () { return []; }, null); })();
    return IsLessOrEqualPipe;
}());
var NgIsLessOrEqualPipeModule = /** @class */ (function () {
    function NgIsLessOrEqualPipeModule() {
    }
NgIsLessOrEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsLessOrEqualPipeModule });
NgIsLessOrEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsLessOrEqualPipeModule_Factory(t) { return new (t || NgIsLessOrEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsLessOrEqualPipeModule, { declarations: [IsLessOrEqualPipe], exports: [IsLessOrEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsLessOrEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsLessOrEqualPipe],
                exports: [IsLessOrEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsLessOrEqualPipeModule;
}());

var IsLessPipe = /** @class */ (function () {
    function IsLessPipe() {
    }
    IsLessPipe.prototype.transform = function (first, second) {
        return first < second;
    };
IsLessPipe.ɵfac = function IsLessPipe_Factory(t) { return new (t || IsLessPipe)(); };
IsLessPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "less", type: IsLessPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsLessPipe, [{
        type: Pipe,
        args: [{
                name: 'less'
            }]
    }], function () { return []; }, null); })();
    return IsLessPipe;
}());
var NgIsLessPipeModule = /** @class */ (function () {
    function NgIsLessPipeModule() {
    }
NgIsLessPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsLessPipeModule });
NgIsLessPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsLessPipeModule_Factory(t) { return new (t || NgIsLessPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsLessPipeModule, { declarations: [IsLessPipe], exports: [IsLessPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsLessPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsLessPipe],
                exports: [IsLessPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsLessPipeModule;
}());

var IsNotEqualPipe = /** @class */ (function () {
    function IsNotEqualPipe() {
    }
    IsNotEqualPipe.prototype.transform = function (first, second) {
        return first != second;
    };
IsNotEqualPipe.ɵfac = function IsNotEqualPipe_Factory(t) { return new (t || IsNotEqualPipe)(); };
IsNotEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "notEqual", type: IsNotEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNotEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'notEqual'
            }]
    }], function () { return []; }, null); })();
    return IsNotEqualPipe;
}());
var NgIsNotEqualPipeModule = /** @class */ (function () {
    function NgIsNotEqualPipeModule() {
    }
NgIsNotEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNotEqualPipeModule });
NgIsNotEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNotEqualPipeModule_Factory(t) { return new (t || NgIsNotEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNotEqualPipeModule, { declarations: [IsNotEqualPipe], exports: [IsNotEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNotEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNotEqualPipe],
                exports: [IsNotEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNotEqualPipeModule;
}());

var IsNotIdenticalPipe = /** @class */ (function () {
    function IsNotIdenticalPipe() {
    }
    IsNotIdenticalPipe.prototype.transform = function (first, second) {
        return first !== second;
    };
IsNotIdenticalPipe.ɵfac = function IsNotIdenticalPipe_Factory(t) { return new (t || IsNotIdenticalPipe)(); };
IsNotIdenticalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "notIdentical", type: IsNotIdenticalPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNotIdenticalPipe, [{
        type: Pipe,
        args: [{
                name: 'notIdentical'
            }]
    }], function () { return []; }, null); })();
    return IsNotIdenticalPipe;
}());
var NgIsNotIdenticalPipeModule = /** @class */ (function () {
    function NgIsNotIdenticalPipeModule() {
    }
NgIsNotIdenticalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNotIdenticalPipeModule });
NgIsNotIdenticalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNotIdenticalPipeModule_Factory(t) { return new (t || NgIsNotIdenticalPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNotIdenticalPipeModule, { declarations: [IsNotIdenticalPipe], exports: [IsNotIdenticalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNotIdenticalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNotIdenticalPipe],
                exports: [IsNotIdenticalPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNotIdenticalPipeModule;
}());

var IsNullPipe = /** @class */ (function () {
    function IsNullPipe() {
    }
    IsNullPipe.prototype.transform = function (value) {
        return isNull(value);
    };
IsNullPipe.ɵfac = function IsNullPipe_Factory(t) { return new (t || IsNullPipe)(); };
IsNullPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isNull", type: IsNullPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNullPipe, [{
        type: Pipe,
        args: [{
                name: 'isNull'
            }]
    }], function () { return []; }, null); })();
    return IsNullPipe;
}());
var NgIsNullPipeModule = /** @class */ (function () {
    function NgIsNullPipeModule() {
    }
NgIsNullPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNullPipeModule });
NgIsNullPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNullPipeModule_Factory(t) { return new (t || NgIsNullPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNullPipeModule, { declarations: [IsNullPipe], exports: [IsNullPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNullPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNullPipe],
                exports: [IsNullPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNullPipeModule;
}());

var IsUndefinedPipe = /** @class */ (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (value) {
        return isUndefined(value);
    };
IsUndefinedPipe.ɵfac = function IsUndefinedPipe_Factory(t) { return new (t || IsUndefinedPipe)(); };
IsUndefinedPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isUndefined", type: IsUndefinedPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsUndefinedPipe, [{
        type: Pipe,
        args: [{
                name: 'isUndefined'
            }]
    }], function () { return []; }, null); })();
    return IsUndefinedPipe;
}());
var NgIsUndefinedPipeModule = /** @class */ (function () {
    function NgIsUndefinedPipeModule() {
    }
NgIsUndefinedPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsUndefinedPipeModule });
NgIsUndefinedPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsUndefinedPipeModule_Factory(t) { return new (t || NgIsUndefinedPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsUndefinedPipeModule, { declarations: [IsUndefinedPipe], exports: [IsUndefinedPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsUndefinedPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsUndefinedPipe],
                exports: [IsUndefinedPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsUndefinedPipeModule;
}());

var IsNilPipe = /** @class */ (function () {
    function IsNilPipe() {
    }
    IsNilPipe.prototype.transform = function (value) {
        return isNil(value);
    };
IsNilPipe.ɵfac = function IsNilPipe_Factory(t) { return new (t || IsNilPipe)(); };
IsNilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isNil", type: IsNilPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNilPipe, [{
        type: Pipe,
        args: [{
                name: 'isNil'
            }]
    }], function () { return []; }, null); })();
    return IsNilPipe;
}());
var NgIsNilPipeModule = /** @class */ (function () {
    function NgIsNilPipeModule() {
    }
NgIsNilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNilPipeModule });
NgIsNilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNilPipeModule_Factory(t) { return new (t || NgIsNilPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNilPipeModule, { declarations: [IsNilPipe], exports: [IsNilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNilPipe],
                exports: [IsNilPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNilPipeModule;
}());

var IsFunctionPipe = /** @class */ (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (value) {
        return isFunction(value);
    };
IsFunctionPipe.ɵfac = function IsFunctionPipe_Factory(t) { return new (t || IsFunctionPipe)(); };
IsFunctionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isFunction", type: IsFunctionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsFunctionPipe, [{
        type: Pipe,
        args: [{
                name: 'isFunction'
            }]
    }], function () { return []; }, null); })();
    return IsFunctionPipe;
}());
var NgIsFunctionPipeModule = /** @class */ (function () {
    function NgIsFunctionPipeModule() {
    }
NgIsFunctionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsFunctionPipeModule });
NgIsFunctionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsFunctionPipeModule_Factory(t) { return new (t || NgIsFunctionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsFunctionPipeModule, { declarations: [IsFunctionPipe], exports: [IsFunctionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsFunctionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsFunctionPipe],
                exports: [IsFunctionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsFunctionPipeModule;
}());

var IsNumberPipe = /** @class */ (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (value) {
        return isNumber(value);
    };
IsNumberPipe.ɵfac = function IsNumberPipe_Factory(t) { return new (t || IsNumberPipe)(); };
IsNumberPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isNumber", type: IsNumberPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNumberPipe, [{
        type: Pipe,
        args: [{
                name: 'isNumber'
            }]
    }], function () { return []; }, null); })();
    return IsNumberPipe;
}());
var NgIsNumberPipeModule = /** @class */ (function () {
    function NgIsNumberPipeModule() {
    }
NgIsNumberPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNumberPipeModule });
NgIsNumberPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNumberPipeModule_Factory(t) { return new (t || NgIsNumberPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNumberPipeModule, { declarations: [IsNumberPipe], exports: [IsNumberPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNumberPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNumberPipe],
                exports: [IsNumberPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNumberPipeModule;
}());

var IsStringPipe = /** @class */ (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (value) {
        return isString(value);
    };
IsStringPipe.ɵfac = function IsStringPipe_Factory(t) { return new (t || IsStringPipe)(); };
IsStringPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isString", type: IsStringPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsStringPipe, [{
        type: Pipe,
        args: [{
                name: 'isString'
            }]
    }], function () { return []; }, null); })();
    return IsStringPipe;
}());
var NgIsStringPipeModule = /** @class */ (function () {
    function NgIsStringPipeModule() {
    }
NgIsStringPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsStringPipeModule });
NgIsStringPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsStringPipeModule_Factory(t) { return new (t || NgIsStringPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsStringPipeModule, { declarations: [IsStringPipe], exports: [IsStringPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsStringPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsStringPipe],
                exports: [IsStringPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsStringPipeModule;
}());

var IsArrayPipe = /** @class */ (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (value) {
        return isArray(value);
    };
IsArrayPipe.ɵfac = function IsArrayPipe_Factory(t) { return new (t || IsArrayPipe)(); };
IsArrayPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isArray", type: IsArrayPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsArrayPipe, [{
        type: Pipe,
        args: [{
                name: 'isArray'
            }]
    }], function () { return []; }, null); })();
    return IsArrayPipe;
}());
var NgIsArrayPipeModule = /** @class */ (function () {
    function NgIsArrayPipeModule() {
    }
NgIsArrayPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsArrayPipeModule });
NgIsArrayPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsArrayPipeModule_Factory(t) { return new (t || NgIsArrayPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsArrayPipeModule, { declarations: [IsArrayPipe], exports: [IsArrayPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsArrayPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsArrayPipe],
                exports: [IsArrayPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsArrayPipeModule;
}());

var IsObjectPipe = /** @class */ (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (value) {
        return isObject(value);
    };
IsObjectPipe.ɵfac = function IsObjectPipe_Factory(t) { return new (t || IsObjectPipe)(); };
IsObjectPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isObject", type: IsObjectPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsObjectPipe, [{
        type: Pipe,
        args: [{
                name: 'isObject'
            }]
    }], function () { return []; }, null); })();
    return IsObjectPipe;
}());
var NgIsObjectPipeModule = /** @class */ (function () {
    function NgIsObjectPipeModule() {
    }
NgIsObjectPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsObjectPipeModule });
NgIsObjectPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsObjectPipeModule_Factory(t) { return new (t || NgIsObjectPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsObjectPipeModule, { declarations: [IsObjectPipe], exports: [IsObjectPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsObjectPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsObjectPipe],
                exports: [IsObjectPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsObjectPipeModule;
}());

var IsDefinedPipe = /** @class */ (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (value) {
        return !isUndefined(value);
    };
IsDefinedPipe.ɵfac = function IsDefinedPipe_Factory(t) { return new (t || IsDefinedPipe)(); };
IsDefinedPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isDefined", type: IsDefinedPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsDefinedPipe, [{
        type: Pipe,
        args: [{
                name: 'isDefined'
            }]
    }], function () { return []; }, null); })();
    return IsDefinedPipe;
}());
var NgIsDefinedPipeModule = /** @class */ (function () {
    function NgIsDefinedPipeModule() {
    }
NgIsDefinedPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsDefinedPipeModule });
NgIsDefinedPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsDefinedPipeModule_Factory(t) { return new (t || NgIsDefinedPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsDefinedPipeModule, { declarations: [IsDefinedPipe], exports: [IsDefinedPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsDefinedPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsDefinedPipe],
                exports: [IsDefinedPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsDefinedPipeModule;
}());

var NgTypesPipesModule = /** @class */ (function () {
    function NgTypesPipesModule() {
    }
NgTypesPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTypesPipesModule });
NgTypesPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTypesPipesModule_Factory(t) { return new (t || NgTypesPipesModule)(); }, imports: [[
            NgIsNullPipeModule,
            NgIsUndefinedPipeModule,
            NgIsNilPipeModule,
            NgIsFunctionPipeModule,
            NgIsNumberPipeModule,
            NgIsStringPipeModule,
            NgIsArrayPipeModule,
            NgIsObjectPipeModule,
            NgIsDefinedPipeModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTypesPipesModule, { imports: [NgIsNullPipeModule, NgIsUndefinedPipeModule, NgIsNilPipeModule, NgIsFunctionPipeModule, NgIsNumberPipeModule, NgIsStringPipeModule, NgIsArrayPipeModule, NgIsObjectPipeModule, NgIsDefinedPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTypesPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgIsNullPipeModule,
                    NgIsUndefinedPipeModule,
                    NgIsNilPipeModule,
                    NgIsFunctionPipeModule,
                    NgIsNumberPipeModule,
                    NgIsStringPipeModule,
                    NgIsArrayPipeModule,
                    NgIsObjectPipeModule,
                    NgIsDefinedPipeModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgTypesPipesModule;
}());
var NgConditionsPipesModule = /** @class */ (function () {
    function NgConditionsPipesModule() {
    }
NgConditionsPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgConditionsPipesModule });
NgConditionsPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgConditionsPipesModule_Factory(t) { return new (t || NgConditionsPipesModule)(); }, imports: [[
            NgIsEqualPipeModule,
            NgIsGreaterOrEqualPipeModule,
            NgIsGreaterPipeModule,
            NgIsIdenticalPipeModule,
            NgIsLessOrEqualPipeModule,
            NgIsLessPipeModule,
            NgIsNotEqualPipeModule,
            NgIsNotIdenticalPipeModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgConditionsPipesModule, { imports: [NgIsEqualPipeModule, NgIsGreaterOrEqualPipeModule, NgIsGreaterPipeModule, NgIsIdenticalPipeModule, NgIsLessOrEqualPipeModule, NgIsLessPipeModule, NgIsNotEqualPipeModule, NgIsNotIdenticalPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgConditionsPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgIsEqualPipeModule,
                    NgIsGreaterOrEqualPipeModule,
                    NgIsGreaterPipeModule,
                    NgIsIdenticalPipeModule,
                    NgIsLessOrEqualPipeModule,
                    NgIsLessPipeModule,
                    NgIsNotEqualPipeModule,
                    NgIsNotIdenticalPipeModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgConditionsPipesModule;
}());
var NgBooleanPipesModule = /** @class */ (function () {
    function NgBooleanPipesModule() {
    }
NgBooleanPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBooleanPipesModule });
NgBooleanPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBooleanPipesModule_Factory(t) { return new (t || NgBooleanPipesModule)(); }, imports: [[NgConditionsPipesModule, NgTypesPipesModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBooleanPipesModule, { imports: [NgConditionsPipesModule, NgTypesPipesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBooleanPipesModule, [{
        type: NgModule,
        args: [{
                imports: [NgConditionsPipesModule, NgTypesPipesModule]
            }]
    }], function () { return []; }, null); })();
    return NgBooleanPipesModule;
}());

var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    BytesPipe_1 = BytesPipe;
    BytesPipe.prototype.transform = function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) && isNumberFinite(decimal) && isInteger(decimal) && isPositive(decimal))) {
            return input;
        }
        var bytes = input;
        var unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = BytesPipe_1.formats[unit].prev;
        }
        if (to) {
            var format = BytesPipe_1.formats[to];
            var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
            return BytesPipe_1.formatResult(result, to);
        }
        for (var key in BytesPipe_1.formats) {
            if (BytesPipe_1.formats.hasOwnProperty(key)) {
                var format = BytesPipe_1.formats[key];
                if (bytes < format.max) {
                    var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
                    return BytesPipe_1.formatResult(result, key);
                }
            }
        }
    };
    BytesPipe.formatResult = function (result, unit) {
        return result + " " + unit;
    };
    BytesPipe.calculateResult = function (format, bytes) {
        var prev = format.prev ? BytesPipe_1.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    var BytesPipe_1;
    BytesPipe.formats = {
        B: { max: 1024 },
        kB: { max: Math.pow(1024, 2), prev: 'B' },
        KB: { max: Math.pow(1024, 2), prev: 'B' },
        MB: { max: Math.pow(1024, 3), prev: 'kB' },
        GB: { max: Math.pow(1024, 4), prev: 'MB' },
        TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' },
    };
BytesPipe.ɵfac = function BytesPipe_Factory(t) { return new (t || BytesPipe)(); };
BytesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "bytes", type: BytesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BytesPipe, [{
        type: Pipe,
        args: [{
                name: 'bytes'
            }]
    }], function () { return []; }, null); })();
    return BytesPipe;
}());
var NgBytesPipeModule = /** @class */ (function () {
    function NgBytesPipeModule() {
    }
NgBytesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBytesPipeModule });
NgBytesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBytesPipeModule_Factory(t) { return new (t || NgBytesPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBytesPipeModule, { declarations: [BytesPipe], exports: [BytesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBytesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [BytesPipe],
                exports: [BytesPipe]
            }]
    }], function () { return []; }, null); })();
    return NgBytesPipeModule;
}());

var CeilPipe = /** @class */ (function () {
    function CeilPipe() {
    }
    CeilPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('ceil')(value, precision);
    };
CeilPipe.ɵfac = function CeilPipe_Factory(t) { return new (t || CeilPipe)(); };
CeilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ceil", type: CeilPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CeilPipe, [{
        type: Pipe,
        args: [{
                name: 'ceil'
            }]
    }], function () { return []; }, null); })();
    return CeilPipe;
}());
var NgCeilPipeModule = /** @class */ (function () {
    function NgCeilPipeModule() {
    }
NgCeilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCeilPipeModule });
NgCeilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCeilPipeModule_Factory(t) { return new (t || NgCeilPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCeilPipeModule, { declarations: [CeilPipe], exports: [CeilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCeilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CeilPipe],
                exports: [CeilPipe]
            }]
    }], function () { return []; }, null); })();
    return NgCeilPipeModule;
}());

var FloorPipe = /** @class */ (function () {
    function FloorPipe() {
    }
    FloorPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('floor')(value, precision);
    };
FloorPipe.ɵfac = function FloorPipe_Factory(t) { return new (t || FloorPipe)(); };
FloorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "floor", type: FloorPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FloorPipe, [{
        type: Pipe,
        args: [{
                name: 'floor'
            }]
    }], function () { return []; }, null); })();
    return FloorPipe;
}());
var NgFloorPipeModule = /** @class */ (function () {
    function NgFloorPipeModule() {
    }
NgFloorPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFloorPipeModule });
NgFloorPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFloorPipeModule_Factory(t) { return new (t || NgFloorPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFloorPipeModule, { declarations: [FloorPipe], exports: [FloorPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFloorPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FloorPipe],
                exports: [FloorPipe]
            }]
    }], function () { return []; }, null); })();
    return NgFloorPipeModule;
}());

var RoundPipe = /** @class */ (function () {
    function RoundPipe() {
    }
    RoundPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('round')(value, precision);
    };
RoundPipe.ɵfac = function RoundPipe_Factory(t) { return new (t || RoundPipe)(); };
RoundPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "round", type: RoundPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RoundPipe, [{
        type: Pipe,
        args: [{
                name: 'round'
            }]
    }], function () { return []; }, null); })();
    return RoundPipe;
}());
var NgRoundPipeModule = /** @class */ (function () {
    function NgRoundPipeModule() {
    }
NgRoundPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRoundPipeModule });
NgRoundPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRoundPipeModule_Factory(t) { return new (t || NgRoundPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRoundPipeModule, { declarations: [RoundPipe], exports: [RoundPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRoundPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RoundPipe],
                exports: [RoundPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRoundPipeModule;
}());

var DegreesPipe = /** @class */ (function () {
    function DegreesPipe() {
    }
    DegreesPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * 180) / Math.PI;
    };
DegreesPipe.ɵfac = function DegreesPipe_Factory(t) { return new (t || DegreesPipe)(); };
DegreesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "degrees", type: DegreesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DegreesPipe, [{
        type: Pipe,
        args: [{
                name: 'degrees'
            }]
    }], function () { return []; }, null); })();
    return DegreesPipe;
}());
var NgDegreesPipeModule = /** @class */ (function () {
    function NgDegreesPipeModule() {
    }
NgDegreesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDegreesPipeModule });
NgDegreesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDegreesPipeModule_Factory(t) { return new (t || NgDegreesPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDegreesPipeModule, { declarations: [DegreesPipe], exports: [DegreesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDegreesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DegreesPipe],
                exports: [DegreesPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDegreesPipeModule;
}());

var RadiansPipe = /** @class */ (function () {
    function RadiansPipe() {
    }
    RadiansPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * Math.PI) / 180;
    };
RadiansPipe.ɵfac = function RadiansPipe_Factory(t) { return new (t || RadiansPipe)(); };
RadiansPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "radians", type: RadiansPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadiansPipe, [{
        type: Pipe,
        args: [{
                name: 'radians'
            }]
    }], function () { return []; }, null); })();
    return RadiansPipe;
}());
var NgRadiansPipeModule = /** @class */ (function () {
    function NgRadiansPipeModule() {
    }
NgRadiansPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRadiansPipeModule });
NgRadiansPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRadiansPipeModule_Factory(t) { return new (t || NgRadiansPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRadiansPipeModule, { declarations: [RadiansPipe], exports: [RadiansPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRadiansPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RadiansPipe],
                exports: [RadiansPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRadiansPipeModule;
}());

var RandomPipe = /** @class */ (function () {
    function RandomPipe() {
    }
    RandomPipe.prototype.transform = function (input, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1; }
        if (!isNumberFinite(min) || !isNumberFinite(max)) {
            return input;
        }
        if (min > max) {
            max = min;
            min = 0;
        }
        return Math.random() * (max - min) + min;
    };
RandomPipe.ɵfac = function RandomPipe_Factory(t) { return new (t || RandomPipe)(); };
RandomPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "random", type: RandomPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RandomPipe, [{
        type: Pipe,
        args: [{
                name: 'random'
            }]
    }], function () { return []; }, null); })();
    return RandomPipe;
}());
var NgRandomPipeModule = /** @class */ (function () {
    function NgRandomPipeModule() {
    }
NgRandomPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRandomPipeModule });
NgRandomPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRandomPipeModule_Factory(t) { return new (t || NgRandomPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRandomPipeModule, { declarations: [RandomPipe], exports: [RandomPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRandomPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RandomPipe],
                exports: [RandomPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRandomPipeModule;
}());

var SqrtPipe = /** @class */ (function () {
    function SqrtPipe() {
    }
    SqrtPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.sqrt(input);
    };
SqrtPipe.ɵfac = function SqrtPipe_Factory(t) { return new (t || SqrtPipe)(); };
SqrtPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "sqrt", type: SqrtPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SqrtPipe, [{
        type: Pipe,
        args: [{
                name: 'sqrt'
            }]
    }], function () { return []; }, null); })();
    return SqrtPipe;
}());
var NgSqrtPipeModule = /** @class */ (function () {
    function NgSqrtPipeModule() {
    }
NgSqrtPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSqrtPipeModule });
NgSqrtPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSqrtPipeModule_Factory(t) { return new (t || NgSqrtPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSqrtPipeModule, { declarations: [SqrtPipe], exports: [SqrtPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSqrtPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SqrtPipe],
                exports: [SqrtPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSqrtPipeModule;
}());

var PowPipe = /** @class */ (function () {
    function PowPipe() {
    }
    PowPipe.prototype.transform = function (input, power) {
        if (power === void 0) { power = 2; }
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.pow(input, power);
    };
PowPipe.ɵfac = function PowPipe_Factory(t) { return new (t || PowPipe)(); };
PowPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pow", type: PowPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PowPipe, [{
        type: Pipe,
        args: [{
                name: 'pow'
            }]
    }], function () { return []; }, null); })();
    return PowPipe;
}());
var NgPowPipeModule = /** @class */ (function () {
    function NgPowPipeModule() {
    }
NgPowPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPowPipeModule });
NgPowPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPowPipeModule_Factory(t) { return new (t || NgPowPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPowPipeModule, { declarations: [PowPipe], exports: [PowPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPowPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PowPipe],
                exports: [PowPipe]
            }]
    }], function () { return []; }, null); })();
    return NgPowPipeModule;
}());

var AbsPipe = /** @class */ (function () {
    function AbsPipe() {
    }
    AbsPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.abs(input);
    };
AbsPipe.ɵfac = function AbsPipe_Factory(t) { return new (t || AbsPipe)(); };
AbsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "abs", type: AbsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbsPipe, [{
        type: Pipe,
        args: [{
                name: 'abs'
            }]
    }], function () { return []; }, null); })();
    return AbsPipe;
}());
var NgAbsPipeModule = /** @class */ (function () {
    function NgAbsPipeModule() {
    }
NgAbsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgAbsPipeModule });
NgAbsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgAbsPipeModule_Factory(t) { return new (t || NgAbsPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgAbsPipeModule, { declarations: [AbsPipe], exports: [AbsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgAbsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [AbsPipe],
                exports: [AbsPipe]
            }]
    }], function () { return []; }, null); })();
    return NgAbsPipeModule;
}());

var OrdinalPipe = /** @class */ (function () {
    function OrdinalPipe() {
    }
    OrdinalPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        if (this.endsWithTenth(input)) {
            return input + 'th';
        }
        else {
            var cardinal = input.toString().charAt(input.toString().length - 1);
            switch (cardinal) {
                case '1':
                    return input + 'st';
                case '2':
                    return input + 'nd';
                case '3':
                    return input + 'rd';
                default:
                    return input + 'th';
            }
        }
    };
    OrdinalPipe.prototype.endsWithTenth = function (input) {
        var beforeLastDigit = input.toString().charAt(input.toString().length - 2);
        return beforeLastDigit === '1';
    };
OrdinalPipe.ɵfac = function OrdinalPipe_Factory(t) { return new (t || OrdinalPipe)(); };
OrdinalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ordinal", type: OrdinalPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OrdinalPipe, [{
        type: Pipe,
        args: [{
                name: 'ordinal'
            }]
    }], function () { return []; }, null); })();
    return OrdinalPipe;
}());
var NgOrdinalPipeModule = /** @class */ (function () {
    function NgOrdinalPipeModule() {
    }
NgOrdinalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOrdinalPipeModule });
NgOrdinalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOrdinalPipeModule_Factory(t) { return new (t || NgOrdinalPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOrdinalPipeModule, { declarations: [OrdinalPipe], exports: [OrdinalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOrdinalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [OrdinalPipe],
                exports: [OrdinalPipe]
            }]
    }], function () { return []; }, null); })();
    return NgOrdinalPipeModule;
}());

var NgMathPipesModule = /** @class */ (function () {
    function NgMathPipesModule() {
    }
NgMathPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMathPipesModule });
NgMathPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMathPipesModule_Factory(t) { return new (t || NgMathPipesModule)(); }, imports: [[
            NgAbsPipeModule,
            NgBytesPipeModule,
            NgCeilPipeModule,
            NgDegreesPipeModule,
            NgFloorPipeModule,
            NgOrdinalPipeModule,
            NgPowPipeModule,
            NgRadiansPipeModule,
            NgRandomPipeModule,
            NgRoundPipeModule,
            NgSqrtPipeModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMathPipesModule, { imports: [NgAbsPipeModule, NgBytesPipeModule, NgCeilPipeModule, NgDegreesPipeModule, NgFloorPipeModule, NgOrdinalPipeModule, NgPowPipeModule, NgRadiansPipeModule, NgRandomPipeModule, NgRoundPipeModule, NgSqrtPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMathPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgAbsPipeModule,
                    NgBytesPipeModule,
                    NgCeilPipeModule,
                    NgDegreesPipeModule,
                    NgFloorPipeModule,
                    NgOrdinalPipeModule,
                    NgPowPipeModule,
                    NgRadiansPipeModule,
                    NgRandomPipeModule,
                    NgRoundPipeModule,
                    NgSqrtPipeModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgMathPipesModule;
}());

var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input);
    };
KeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };
KeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: KeysPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{
        type: Pipe,
        args: [{ name: 'keys' }]
    }], function () { return []; }, null); })();
    return KeysPipe;
}());
var NgKeysPipeModule = /** @class */ (function () {
    function NgKeysPipeModule() {
    }
NgKeysPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgKeysPipeModule });
NgKeysPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgKeysPipeModule_Factory(t) { return new (t || NgKeysPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgKeysPipeModule, { declarations: [KeysPipe], exports: [KeysPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgKeysPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [KeysPipe],
                exports: [KeysPipe]
            }]
    }], function () { return []; }, null); })();
    return NgKeysPipeModule;
}());

var ToArrayPipe = /** @class */ (function () {
    function ToArrayPipe() {
    }
    ToArrayPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input).map(function (value) { return input[value]; });
    };
ToArrayPipe.ɵfac = function ToArrayPipe_Factory(t) { return new (t || ToArrayPipe)(); };
ToArrayPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "toArray", type: ToArrayPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToArrayPipe, [{
        type: Pipe,
        args: [{ name: 'toArray' }]
    }], function () { return []; }, null); })();
    return ToArrayPipe;
}());
var NgToArrayPipeModule = /** @class */ (function () {
    function NgToArrayPipeModule() {
    }
NgToArrayPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgToArrayPipeModule });
NgToArrayPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgToArrayPipeModule_Factory(t) { return new (t || NgToArrayPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgToArrayPipeModule, { declarations: [ToArrayPipe], exports: [ToArrayPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgToArrayPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ToArrayPipe],
                exports: [ToArrayPipe]
            }]
    }], function () { return []; }, null); })();
    return NgToArrayPipeModule;
}());

var DefaultsPipe = /** @class */ (function () {
    function DefaultsPipe() {
    }
    DefaultsPipe.prototype.transform = function (input, defaults) {
        if (!isObject(defaults)) {
            return input;
        }
        if (isNil(input)) {
            return defaults;
        }
        if (isArray(input)) {
            return input.map(function (item) {
                if (isObject(item)) {
                    return Object.assign({}, defaults, item);
                }
                if (isNil(item)) {
                    return defaults;
                }
                return item;
            });
        }
        if (isObject(input)) {
            return Object.assign({}, defaults, input);
        }
        return input;
    };
DefaultsPipe.ɵfac = function DefaultsPipe_Factory(t) { return new (t || DefaultsPipe)(); };
DefaultsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "defaults", type: DefaultsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultsPipe, [{
        type: Pipe,
        args: [{ name: 'defaults' }]
    }], function () { return []; }, null); })();
    return DefaultsPipe;
}());
var NgDefaultsPipeModule = /** @class */ (function () {
    function NgDefaultsPipeModule() {
    }
NgDefaultsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDefaultsPipeModule });
NgDefaultsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDefaultsPipeModule_Factory(t) { return new (t || NgDefaultsPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDefaultsPipeModule, { declarations: [DefaultsPipe], exports: [DefaultsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDefaultsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DefaultsPipe],
                exports: [DefaultsPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDefaultsPipeModule;
}());

var NgObjectPipesModule = /** @class */ (function () {
    function NgObjectPipesModule() {
    }
NgObjectPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgObjectPipesModule });
NgObjectPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgObjectPipesModule_Factory(t) { return new (t || NgObjectPipesModule)(); }, imports: [[NgKeysPipeModule, NgToArrayPipeModule, NgDefaultsPipeModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgObjectPipesModule, { imports: [NgKeysPipeModule, NgToArrayPipeModule, NgDefaultsPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgObjectPipesModule, [{
        type: NgModule,
        args: [{
                imports: [NgKeysPipeModule, NgToArrayPipeModule, NgDefaultsPipeModule]
            }]
    }], function () { return []; }, null); })();
    return NgObjectPipesModule;
}());

var LeftPadPipe = /** @class */ (function () {
    function LeftPadPipe() {
    }
    LeftPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return leftPad(input, length, character);
    };
LeftPadPipe.ɵfac = function LeftPadPipe_Factory(t) { return new (t || LeftPadPipe)(); };
LeftPadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "leftpad", type: LeftPadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LeftPadPipe, [{
        type: Pipe,
        args: [{
                name: 'leftpad'
            }]
    }], function () { return []; }, null); })();
    return LeftPadPipe;
}());
var NgLeftPadPipeModule = /** @class */ (function () {
    function NgLeftPadPipeModule() {
    }
NgLeftPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgLeftPadPipeModule });
NgLeftPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgLeftPadPipeModule_Factory(t) { return new (t || NgLeftPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgLeftPadPipeModule, { declarations: [LeftPadPipe], exports: [LeftPadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgLeftPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [LeftPadPipe],
                exports: [LeftPadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgLeftPadPipeModule;
}());

var MatchPipe = /** @class */ (function () {
    function MatchPipe() {
    }
    MatchPipe.prototype.transform = function (input, pattern, flag) {
        if (!isString(input)) {
            return input;
        }
        var regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return input.match(regexp);
    };
MatchPipe.ɵfac = function MatchPipe_Factory(t) { return new (t || MatchPipe)(); };
MatchPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "match", type: MatchPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatchPipe, [{
        type: Pipe,
        args: [{
                name: 'match'
            }]
    }], function () { return []; }, null); })();
    return MatchPipe;
}());
var NgMatchPipeModule = /** @class */ (function () {
    function NgMatchPipeModule() {
    }
NgMatchPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMatchPipeModule });
NgMatchPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMatchPipeModule_Factory(t) { return new (t || NgMatchPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMatchPipeModule, { declarations: [MatchPipe], exports: [MatchPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMatchPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MatchPipe],
                exports: [MatchPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMatchPipeModule;
}());

var PadPipe = /** @class */ (function () {
    function PadPipe() {
    }
    PadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return pad(input, length, character);
    };
PadPipe.ɵfac = function PadPipe_Factory(t) { return new (t || PadPipe)(); };
PadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pad", type: PadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PadPipe, [{
        type: Pipe,
        args: [{
                name: 'pad'
            }]
    }], function () { return []; }, null); })();
    return PadPipe;
}());
var NgPadPipeModule = /** @class */ (function () {
    function NgPadPipeModule() {
    }
NgPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPadPipeModule });
NgPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPadPipeModule_Factory(t) { return new (t || NgPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPadPipeModule, { declarations: [PadPipe], exports: [PadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PadPipe],
                exports: [PadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgPadPipeModule;
}());

var ReplacePipe = /** @class */ (function () {
    function ReplacePipe() {
    }
    ReplacePipe.prototype.transform = function (input, pattern, replacement) {
        if (!isString(input) || isUndefined(pattern) || isUndefined(replacement)) {
            return input;
        }
        return input.replace(pattern, replacement);
    };
ReplacePipe.ɵfac = function ReplacePipe_Factory(t) { return new (t || ReplacePipe)(); };
ReplacePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "replace", type: ReplacePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReplacePipe, [{
        type: Pipe,
        args: [{
                name: 'replace'
            }]
    }], function () { return []; }, null); })();
    return ReplacePipe;
}());
var NgReplacePipeModule = /** @class */ (function () {
    function NgReplacePipeModule() {
    }
NgReplacePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReplacePipeModule });
NgReplacePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReplacePipeModule_Factory(t) { return new (t || NgReplacePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReplacePipeModule, { declarations: [ReplacePipe], exports: [ReplacePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReplacePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReplacePipe],
                exports: [ReplacePipe]
            }]
    }], function () { return []; }, null); })();
    return NgReplacePipeModule;
}());

var RightPadPipe = /** @class */ (function () {
    function RightPadPipe() {
    }
    RightPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return rightPad(input, length, character);
    };
RightPadPipe.ɵfac = function RightPadPipe_Factory(t) { return new (t || RightPadPipe)(); };
RightPadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "rightpad", type: RightPadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RightPadPipe, [{
        type: Pipe,
        args: [{
                name: 'rightpad'
            }]
    }], function () { return []; }, null); })();
    return RightPadPipe;
}());
var NgRightPadPipeModule = /** @class */ (function () {
    function NgRightPadPipeModule() {
    }
NgRightPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRightPadPipeModule });
NgRightPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRightPadPipeModule_Factory(t) { return new (t || NgRightPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRightPadPipeModule, { declarations: [RightPadPipe], exports: [RightPadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRightPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RightPadPipe],
                exports: [RightPadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRightPadPipeModule;
}());

var SplitPipe = /** @class */ (function () {
    function SplitPipe() {
    }
    SplitPipe.prototype.transform = function (input, separator, limit) {
        if (separator === void 0) { separator = ' '; }
        if (!isString(input)) {
            return input;
        }
        return input.split(separator, limit);
    };
SplitPipe.ɵfac = function SplitPipe_Factory(t) { return new (t || SplitPipe)(); };
SplitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "split", type: SplitPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitPipe, [{
        type: Pipe,
        args: [{
                name: 'split'
            }]
    }], function () { return []; }, null); })();
    return SplitPipe;
}());
var NgSplitPipeModule = /** @class */ (function () {
    function NgSplitPipeModule() {
    }
NgSplitPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSplitPipeModule });
NgSplitPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSplitPipeModule_Factory(t) { return new (t || NgSplitPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSplitPipeModule, { declarations: [SplitPipe], exports: [SplitPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSplitPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SplitPipe],
                exports: [SplitPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSplitPipeModule;
}());

var TestPipe = /** @class */ (function () {
    function TestPipe() {
    }
    TestPipe.prototype.transform = function (input, pattern, flag) {
        if (!isString(input) || !pattern) {
            return input;
        }
        var regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return regexp.test(input);
    };
TestPipe.ɵfac = function TestPipe_Factory(t) { return new (t || TestPipe)(); };
TestPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "test", type: TestPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TestPipe, [{
        type: Pipe,
        args: [{
                name: 'test'
            }]
    }], function () { return []; }, null); })();
    return TestPipe;
}());
var NgTestPipeModule = /** @class */ (function () {
    function NgTestPipeModule() {
    }
NgTestPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTestPipeModule });
NgTestPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTestPipeModule_Factory(t) { return new (t || NgTestPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTestPipeModule, { declarations: [TestPipe], exports: [TestPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTestPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TestPipe],
                exports: [TestPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTestPipeModule;
}());

var TrimPipe = /** @class */ (function () {
    function TrimPipe() {
    }
    TrimPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.trim();
    };
TrimPipe.ɵfac = function TrimPipe_Factory(t) { return new (t || TrimPipe)(); };
TrimPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "trim", type: TrimPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TrimPipe, [{
        type: Pipe,
        args: [{
                name: 'trim'
            }]
    }], function () { return []; }, null); })();
    return TrimPipe;
}());
var NgTrimPipeModule = /** @class */ (function () {
    function NgTrimPipeModule() {
    }
NgTrimPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTrimPipeModule });
NgTrimPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTrimPipeModule_Factory(t) { return new (t || NgTrimPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTrimPipeModule, { declarations: [TrimPipe], exports: [TrimPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTrimPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TrimPipe],
                exports: [TrimPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTrimPipeModule;
}());

var NewlinesPipe = /** @class */ (function () {
    function NewlinesPipe() {
    }
    NewlinesPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
    };
NewlinesPipe.ɵfac = function NewlinesPipe_Factory(t) { return new (t || NewlinesPipe)(); };
NewlinesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "newlines", type: NewlinesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NewlinesPipe, [{
        type: Pipe,
        args: [{
                name: 'newlines'
            }]
    }], function () { return []; }, null); })();
    return NewlinesPipe;
}());
var NgNewlinesPipeModule = /** @class */ (function () {
    function NgNewlinesPipeModule() {
    }
NgNewlinesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgNewlinesPipeModule });
NgNewlinesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgNewlinesPipeModule_Factory(t) { return new (t || NgNewlinesPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgNewlinesPipeModule, { declarations: [NewlinesPipe], exports: [NewlinesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNewlinesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [NewlinesPipe],
                exports: [NewlinesPipe]
            }]
    }], function () { return []; }, null); })();
    return NgNewlinesPipeModule;
}());

var CapitalizePipe = /** @class */ (function () {
    function CapitalizePipe() {
    }
    CapitalizePipe.prototype.transform = function (input, all) {
        if (all === void 0) { all = false; }
        if (!isString(input)) {
            return input;
        }
        if (!all) {
            return upperFirst(input.toLowerCase());
        }
        else {
            return input
                .toLowerCase()
                .split(' ')
                .map(function (value) { return upperFirst(value); })
                .join(' ');
        }
    };
CapitalizePipe.ɵfac = function CapitalizePipe_Factory(t) { return new (t || CapitalizePipe)(); };
CapitalizePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "capitalize", type: CapitalizePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CapitalizePipe, [{
        type: Pipe,
        args: [{
                name: 'capitalize'
            }]
    }], function () { return []; }, null); })();
    return CapitalizePipe;
}());
var NgCapitalizePipeModule = /** @class */ (function () {
    function NgCapitalizePipeModule() {
    }
NgCapitalizePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCapitalizePipeModule });
NgCapitalizePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCapitalizePipeModule_Factory(t) { return new (t || NgCapitalizePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCapitalizePipeModule, { declarations: [CapitalizePipe], exports: [CapitalizePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCapitalizePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CapitalizePipe],
                exports: [CapitalizePipe]
            }]
    }], function () { return []; }, null); })();
    return NgCapitalizePipeModule;
}());

var UpperFirstPipe = /** @class */ (function () {
    function UpperFirstPipe() {
    }
    UpperFirstPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return upperFirst(input);
    };
UpperFirstPipe.ɵfac = function UpperFirstPipe_Factory(t) { return new (t || UpperFirstPipe)(); };
UpperFirstPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "upperfirst", type: UpperFirstPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UpperFirstPipe, [{
        type: Pipe,
        args: [{
                name: 'upperfirst'
            }]
    }], function () { return []; }, null); })();
    return UpperFirstPipe;
}());
var NgUpperFirstPipeModule = /** @class */ (function () {
    function NgUpperFirstPipeModule() {
    }
NgUpperFirstPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgUpperFirstPipeModule });
NgUpperFirstPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgUpperFirstPipeModule_Factory(t) { return new (t || NgUpperFirstPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgUpperFirstPipeModule, { declarations: [UpperFirstPipe], exports: [UpperFirstPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgUpperFirstPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [UpperFirstPipe],
                exports: [UpperFirstPipe]
            }]
    }], function () { return []; }, null); })();
    return NgUpperFirstPipeModule;
}());

var TemplatePipe = /** @class */ (function () {
    function TemplatePipe() {
    }
    TemplatePipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!isString(input) || args.length === 0) {
            return input;
        }
        var template = input;
        for (var i = 0; i < args.length; ++i) {
            template = template.replace("$" + (i + 1), args[i]);
        }
        return template;
    };
TemplatePipe.ɵfac = function TemplatePipe_Factory(t) { return new (t || TemplatePipe)(); };
TemplatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "template", type: TemplatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePipe, [{
        type: Pipe,
        args: [{
                name: 'template'
            }]
    }], function () { return []; }, null); })();
    return TemplatePipe;
}());
var NgTemplatePipeModule = /** @class */ (function () {
    function NgTemplatePipeModule() {
    }
NgTemplatePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTemplatePipeModule });
NgTemplatePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTemplatePipeModule_Factory(t) { return new (t || NgTemplatePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTemplatePipeModule, { declarations: [TemplatePipe], exports: [TemplatePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTemplatePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TemplatePipe],
                exports: [TemplatePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTemplatePipeModule;
}());

var EncodeURIPipe = /** @class */ (function () {
    function EncodeURIPipe() {
    }
    EncodeURIPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURI(input);
    };
EncodeURIPipe.ɵfac = function EncodeURIPipe_Factory(t) { return new (t || EncodeURIPipe)(); };
EncodeURIPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "encodeURI", type: EncodeURIPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EncodeURIPipe, [{
        type: Pipe,
        args: [{
                name: 'encodeURI'
            }]
    }], function () { return []; }, null); })();
    return EncodeURIPipe;
}());
var NgEncodeURIPipeModule = /** @class */ (function () {
    function NgEncodeURIPipeModule() {
    }
NgEncodeURIPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEncodeURIPipeModule });
NgEncodeURIPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEncodeURIPipeModule_Factory(t) { return new (t || NgEncodeURIPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEncodeURIPipeModule, { declarations: [EncodeURIPipe], exports: [EncodeURIPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEncodeURIPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EncodeURIPipe],
                exports: [EncodeURIPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEncodeURIPipeModule;
}());

var EncodeURIComponentPipe = /** @class */ (function () {
    function EncodeURIComponentPipe() {
    }
    EncodeURIComponentPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURIComponent(input);
    };
EncodeURIComponentPipe.ɵfac = function EncodeURIComponentPipe_Factory(t) { return new (t || EncodeURIComponentPipe)(); };
EncodeURIComponentPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "encodeURIComponent", type: EncodeURIComponentPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EncodeURIComponentPipe, [{
        type: Pipe,
        args: [{
                name: 'encodeURIComponent'
            }]
    }], function () { return []; }, null); })();
    return EncodeURIComponentPipe;
}());
var NgEncodeURIComponentPipeModule = /** @class */ (function () {
    function NgEncodeURIComponentPipeModule() {
    }
NgEncodeURIComponentPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEncodeURIComponentPipeModule });
NgEncodeURIComponentPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEncodeURIComponentPipeModule_Factory(t) { return new (t || NgEncodeURIComponentPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEncodeURIComponentPipeModule, { declarations: [EncodeURIComponentPipe], exports: [EncodeURIComponentPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEncodeURIComponentPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EncodeURIComponentPipe],
                exports: [EncodeURIComponentPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEncodeURIComponentPipeModule;
}());

var DecodeURIPipe = /** @class */ (function () {
    function DecodeURIPipe() {
    }
    DecodeURIPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURI(input);
    };
DecodeURIPipe.ɵfac = function DecodeURIPipe_Factory(t) { return new (t || DecodeURIPipe)(); };
DecodeURIPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "decodeURI", type: DecodeURIPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DecodeURIPipe, [{
        type: Pipe,
        args: [{
                name: 'decodeURI'
            }]
    }], function () { return []; }, null); })();
    return DecodeURIPipe;
}());
var NgDecodeURIPipeModule = /** @class */ (function () {
    function NgDecodeURIPipeModule() {
    }
NgDecodeURIPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDecodeURIPipeModule });
NgDecodeURIPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDecodeURIPipeModule_Factory(t) { return new (t || NgDecodeURIPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDecodeURIPipeModule, { declarations: [DecodeURIPipe], exports: [DecodeURIPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDecodeURIPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DecodeURIPipe],
                exports: [DecodeURIPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDecodeURIPipeModule;
}());

var DecodeURIComponentPipe = /** @class */ (function () {
    function DecodeURIComponentPipe() {
    }
    DecodeURIComponentPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURIComponent(input);
    };
DecodeURIComponentPipe.ɵfac = function DecodeURIComponentPipe_Factory(t) { return new (t || DecodeURIComponentPipe)(); };
DecodeURIComponentPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "decodeURIComponent", type: DecodeURIComponentPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DecodeURIComponentPipe, [{
        type: Pipe,
        args: [{
                name: 'decodeURIComponent'
            }]
    }], function () { return []; }, null); })();
    return DecodeURIComponentPipe;
}());
var NgDecodeURIComponentPipeModule = /** @class */ (function () {
    function NgDecodeURIComponentPipeModule() {
    }
NgDecodeURIComponentPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDecodeURIComponentPipeModule });
NgDecodeURIComponentPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDecodeURIComponentPipeModule_Factory(t) { return new (t || NgDecodeURIComponentPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDecodeURIComponentPipeModule, { declarations: [DecodeURIComponentPipe], exports: [DecodeURIComponentPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDecodeURIComponentPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DecodeURIComponentPipe],
                exports: [DecodeURIComponentPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDecodeURIComponentPipeModule;
}());

// Inspired from https://github.com/a8m/angular-filter/blob/master/src/_filter/string/truncate.js
var TruncatePipe = /** @class */ (function () {
    function TruncatePipe() {
    }
    TruncatePipe.prototype.transform = function (input, length, suffix, preserve) {
        if (!isString(input)) {
            return input;
        }
        length = isUndefined(length) ? input.length : length;
        if (input.length <= length) {
            return input;
        }
        preserve = preserve || false;
        suffix = suffix || '';
        var index = length;
        if (preserve) {
            if (input.indexOf(' ', length) === -1) {
                index = input.length;
            }
            else {
                index = input.indexOf(' ', length);
            }
        }
        return input.substring(0, index) + suffix;
    };
TruncatePipe.ɵfac = function TruncatePipe_Factory(t) { return new (t || TruncatePipe)(); };
TruncatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "truncate", type: TruncatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TruncatePipe, [{
        type: Pipe,
        args: [{
                name: 'truncate'
            }]
    }], function () { return []; }, null); })();
    return TruncatePipe;
}());
var NgTruncatePipeModule = /** @class */ (function () {
    function NgTruncatePipeModule() {
    }
NgTruncatePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTruncatePipeModule });
NgTruncatePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTruncatePipeModule_Factory(t) { return new (t || NgTruncatePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTruncatePipeModule, { declarations: [TruncatePipe], exports: [TruncatePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTruncatePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TruncatePipe],
                exports: [TruncatePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTruncatePipeModule;
}());

var RepeatPipe = /** @class */ (function () {
    function RepeatPipe() {
    }
    RepeatPipe.prototype.transform = function (input, times, characters) {
        if (times === void 0) { times = 1; }
        if (characters === void 0) { characters = ''; }
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        var repeated = [input];
        for (var i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    };
RepeatPipe.ɵfac = function RepeatPipe_Factory(t) { return new (t || RepeatPipe)(); };
RepeatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "repeat", type: RepeatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RepeatPipe, [{
        type: Pipe,
        args: [{
                name: 'repeat'
            }]
    }], function () { return []; }, null); })();
    return RepeatPipe;
}());
var NgRepeatPipeModule = /** @class */ (function () {
    function NgRepeatPipeModule() {
    }
NgRepeatPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRepeatPipeModule });
NgRepeatPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRepeatPipeModule_Factory(t) { return new (t || NgRepeatPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRepeatPipeModule, { declarations: [RepeatPipe], exports: [RepeatPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRepeatPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RepeatPipe],
                exports: [RepeatPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRepeatPipeModule;
}());

var SlugifyPipe = /** @class */ (function () {
    function SlugifyPipe() {
    }
    SlugifyPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input
            .toLowerCase()
            .trim()
            .replace(/[^a-z0-9\s-]/g, ' ')
            .replace(/[\s-]+/g, '-');
    };
SlugifyPipe.ɵfac = function SlugifyPipe_Factory(t) { return new (t || SlugifyPipe)(); };
SlugifyPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "slugify", type: SlugifyPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlugifyPipe, [{
        type: Pipe,
        args: [{ name: 'slugify' }]
    }], function () { return []; }, null); })();
    return SlugifyPipe;
}());
var NgSlugifyPipeModule = /** @class */ (function () {
    function NgSlugifyPipeModule() {
    }
NgSlugifyPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSlugifyPipeModule });
NgSlugifyPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSlugifyPipeModule_Factory(t) { return new (t || NgSlugifyPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSlugifyPipeModule, { declarations: [SlugifyPipe], exports: [SlugifyPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSlugifyPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SlugifyPipe],
                exports: [SlugifyPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSlugifyPipeModule;
}());

// idea from https://github.com/a8m/angular-filter
var StripTagsPipe = /** @class */ (function () {
    function StripTagsPipe() {
    }
    StripTagsPipe.prototype.transform = function (input) {
        if (!isString(input) || isUndefined(input))
            return input;
        return input.replace(/<\S[^><]*>/g, '');
    };
StripTagsPipe.ɵfac = function StripTagsPipe_Factory(t) { return new (t || StripTagsPipe)(); };
StripTagsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "stripTags", type: StripTagsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripTagsPipe, [{
        type: Pipe,
        args: [{
                name: 'stripTags'
            }]
    }], function () { return []; }, null); })();
    return StripTagsPipe;
}());
var NgStripTagsPipeModule = /** @class */ (function () {
    function NgStripTagsPipeModule() {
    }
NgStripTagsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgStripTagsPipeModule });
NgStripTagsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgStripTagsPipeModule_Factory(t) { return new (t || NgStripTagsPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgStripTagsPipeModule, { declarations: [StripTagsPipe], exports: [StripTagsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgStripTagsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [StripTagsPipe],
                exports: [StripTagsPipe]
            }]
    }], function () { return []; }, null); })();
    return NgStripTagsPipeModule;
}());

// idea from https://github.com/a8m/angular-filter
var LatinizePipe = /** @class */ (function () {
    function LatinizePipe() {
    }
    LatinizePipe.prototype.transform = function (input) {
        if (!isString(input) || isUndefined(input)) {
            return input;
        }
        var replacementList = [
            { base: ' ', chars: '\u00A0' },
            { base: '0', chars: '\u07C0' },
            {
                base: 'A',
                chars: '\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F',
            },
            { base: 'AA', chars: '\uA732' },
            { base: 'AE', chars: '\u00C6\u01FC\u01E2' },
            { base: 'AO', chars: '\uA734' },
            { base: 'AU', chars: '\uA736' },
            { base: 'AV', chars: '\uA738\uA73A' },
            { base: 'AY', chars: '\uA73C' },
            { base: 'B', chars: '\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0181' },
            { base: 'C', chars: '\u24b8\uff23\uA73E\u1E08\u0106\u0043\u0108\u010A\u010C\u00C7\u0187\u023B' },
            { base: 'D', chars: '\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018A\u0189\u1D05\uA779' },
            { base: 'Dh', chars: '\u00D0' },
            { base: 'DZ', chars: '\u01F1\u01C4' },
            { base: 'Dz', chars: '\u01F2\u01C5' },
            {
                base: 'E',
                chars: '\u025B\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E\u1D07',
            },
            { base: 'F', chars: '\uA77C\u24BB\uFF26\u1E1E\u0191\uA77B' },
            {
                base: 'G',
                chars: '\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0262',
            },
            { base: 'H', chars: '\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D' },
            {
                base: 'I',
                chars: '\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197',
            },
            { base: 'J', chars: '\u24BF\uFF2A\u0134\u0248\u0237' },
            { base: 'K', chars: '\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2' },
            {
                base: 'L',
                chars: '\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780',
            },
            { base: 'LJ', chars: '\u01C7' },
            { base: 'Lj', chars: '\u01C8' },
            { base: 'M', chars: '\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C\u03FB' },
            {
                base: 'N',
                chars: '\uA7A4\u0220\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u019D\uA790\u1D0E',
            },
            { base: 'NJ', chars: '\u01CA' },
            { base: 'Nj', chars: '\u01CB' },
            {
                base: 'O',
                chars: '\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C',
            },
            { base: 'OE', chars: '\u0152' },
            { base: 'OI', chars: '\u01A2' },
            { base: 'OO', chars: '\uA74E' },
            { base: 'OU', chars: '\u0222' },
            { base: 'P', chars: '\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754' },
            { base: 'Q', chars: '\u24C6\uFF31\uA756\uA758\u024A' },
            {
                base: 'R',
                chars: '\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782',
            },
            {
                base: 'S',
                chars: '\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784',
            },
            { base: 'T', chars: '\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786' },
            { base: 'Th', chars: '\u00DE' },
            { base: 'TZ', chars: '\uA728' },
            {
                base: 'U',
                chars: '\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244',
            },
            { base: 'V', chars: '\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245' },
            { base: 'VY', chars: '\uA760' },
            { base: 'W', chars: '\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72' },
            { base: 'X', chars: '\u24CD\uFF38\u1E8A\u1E8C' },
            { base: 'Y', chars: '\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE' },
            { base: 'Z', chars: '\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762' },
            {
                base: 'a',
                chars: '\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251',
            },
            { base: 'aa', chars: '\uA733' },
            { base: 'ae', chars: '\u00E6\u01FD\u01E3' },
            { base: 'ao', chars: '\uA735' },
            { base: 'au', chars: '\uA737' },
            { base: 'av', chars: '\uA739\uA73B' },
            { base: 'ay', chars: '\uA73D' },
            { base: 'b', chars: '\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0182' },
            { base: 'c', chars: '\uFF43\u24D2\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184' },
            {
                base: 'd',
                chars: '\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\u018B\u13E7\u0501\uA7AA',
            },
            { base: 'dh', chars: '\u00F0' },
            { base: 'dz', chars: '\u01F3\u01C6' },
            {
                base: 'e',
                chars: '\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u01DD',
            },
            { base: 'f', chars: '\u24D5\uFF46\u1E1F\u0192' },
            { base: 'ff', chars: '\uFB00' },
            { base: 'fi', chars: '\uFB01' },
            { base: 'fl', chars: '\uFB02' },
            { base: 'ffi', chars: '\uFB03' },
            { base: 'ffl', chars: '\uFB04' },
            { base: 'g', chars: '\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\uA77F\u1D79' },
            { base: 'h', chars: '\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265' },
            { base: 'hv', chars: '\u0195' },
            {
                base: 'i',
                chars: '\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131',
            },
            { base: 'j', chars: '\u24D9\uFF4A\u0135\u01F0\u0249' },
            { base: 'k', chars: '\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3' },
            {
                base: 'l',
                chars: '\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u026D',
            },
            { base: 'lj', chars: '\u01C9' },
            { base: 'm', chars: '\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F' },
            {
                base: 'n',
                chars: '\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509',
            },
            { base: 'nj', chars: '\u01CC' },
            {
                base: 'o',
                chars: '\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\uA74B\uA74D\u0275\u0254\u1D11',
            },
            { base: 'oe', chars: '\u0153' },
            { base: 'oi', chars: '\u01A3' },
            { base: 'oo', chars: '\uA74F' },
            { base: 'ou', chars: '\u0223' },
            { base: 'p', chars: '\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755\u03C1' },
            { base: 'q', chars: '\u24E0\uFF51\u024B\uA757\uA759' },
            {
                base: 'r',
                chars: '\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783',
            },
            {
                base: 's',
                chars: '\u24E2\uFF53\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0282',
            },
            { base: 'ss', chars: '\xDF' },
            {
                base: 't',
                chars: '\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787',
            },
            { base: 'th', chars: '\u00FE' },
            { base: 'tz', chars: '\uA729' },
            {
                base: 'u',
                chars: '\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289',
            },
            { base: 'v', chars: '\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C' },
            { base: 'vy', chars: '\uA761' },
            { base: 'w', chars: '\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73' },
            { base: 'x', chars: '\u24E7\uFF58\u1E8B\u1E8D' },
            { base: 'y', chars: '\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF' },
            { base: 'z', chars: '\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763' },
        ];
        var diacriticsMap = {};
        for (var i = 0; i < replacementList.length; i += 1) {
            var chars = replacementList[i].chars;
            for (var j = 0; j < chars.length; j += 1) {
                diacriticsMap[chars[j]] = replacementList[i].base;
            }
        }
        return input.replace(/[^\u0000-\u007e]/g, function (c) { return diacriticsMap[c] || c; });
    };
LatinizePipe.ɵfac = function LatinizePipe_Factory(t) { return new (t || LatinizePipe)(); };
LatinizePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "latinize", type: LatinizePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LatinizePipe, [{
        type: Pipe,
        args: [{ name: 'latinize' }]
    }], function () { return []; }, null); })();
    return LatinizePipe;
}());
var NgLatinizePipeModule = /** @class */ (function () {
    function NgLatinizePipeModule() {
    }
NgLatinizePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgLatinizePipeModule });
NgLatinizePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgLatinizePipeModule_Factory(t) { return new (t || NgLatinizePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgLatinizePipeModule, { declarations: [LatinizePipe], exports: [LatinizePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgLatinizePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [LatinizePipe],
                exports: [LatinizePipe]
            }]
    }], function () { return []; }, null); })();
    return NgLatinizePipeModule;
}());

// idea from https://github.com/a8m/angular-filter
var WrapPipe = /** @class */ (function () {
    function WrapPipe() {
    }
    WrapPipe.prototype.transform = function (input, wrap, ends) {
        return isString(input) && !isUndefined(wrap) ? [wrap, input, ends || wrap].join('') : input;
    };
WrapPipe.ɵfac = function WrapPipe_Factory(t) { return new (t || WrapPipe)(); };
WrapPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "wrap", type: WrapPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WrapPipe, [{
        type: Pipe,
        args: [{
                name: 'wrap'
            }]
    }], function () { return []; }, null); })();
    return WrapPipe;
}());
var NgWrapPipeModule = /** @class */ (function () {
    function NgWrapPipeModule() {
    }
NgWrapPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWrapPipeModule });
NgWrapPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWrapPipeModule_Factory(t) { return new (t || NgWrapPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWrapPipeModule, { declarations: [WrapPipe], exports: [WrapPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWrapPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WrapPipe],
                exports: [WrapPipe]
            }]
    }], function () { return []; }, null); })();
    return NgWrapPipeModule;
}());

var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    WithPipe.prototype.transform = function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || start == '' || ends == '') {
            return input;
        }
        input = csensitive ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            var a = !input.indexOf(csensitive ? start : start.toLowerCase());
            var b = input.indexOf(csensitive ? ends : ends.toLowerCase(), input.length - ends.length) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf(csensitive ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            var position = input.length - ends.length;
            return input.indexOf(csensitive ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
WithPipe.ɵfac = function WithPipe_Factory(t) { return new (t || WithPipe)(); };
WithPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "with", type: WithPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WithPipe, [{
        type: Pipe,
        args: [{ name: 'with' }]
    }], function () { return []; }, null); })();
    return WithPipe;
}());
var NgWithPipeModule = /** @class */ (function () {
    function NgWithPipeModule() {
    }
NgWithPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWithPipeModule });
NgWithPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWithPipeModule_Factory(t) { return new (t || NgWithPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWithPipeModule, { declarations: [WithPipe], exports: [WithPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWithPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WithPipe],
                exports: [WithPipe]
            }]
    }], function () { return []; }, null); })();
    return NgWithPipeModule;
}());

var ReverseStrPipe = /** @class */ (function () {
    function ReverseStrPipe() {
    }
    ReverseStrPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return Array.from(input)
            .reverse()
            .join('');
    };
ReverseStrPipe.ɵfac = function ReverseStrPipe_Factory(t) { return new (t || ReverseStrPipe)(); };
ReverseStrPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "reverseStr", type: ReverseStrPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReverseStrPipe, [{
        type: Pipe,
        args: [{
                name: 'reverseStr'
            }]
    }], function () { return []; }, null); })();
    return ReverseStrPipe;
}());
var NgReverseStrPipeModule = /** @class */ (function () {
    function NgReverseStrPipeModule() {
    }
NgReverseStrPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReverseStrPipeModule });
NgReverseStrPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReverseStrPipeModule_Factory(t) { return new (t || NgReverseStrPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReverseStrPipeModule, { declarations: [ReverseStrPipe], exports: [ReverseStrPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReverseStrPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReverseStrPipe],
                exports: [ReverseStrPipe]
            }]
    }], function () { return []; }, null); })();
    return NgReverseStrPipeModule;
}());

var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
NgStringPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgStringPipesModule });
NgStringPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgStringPipesModule_Factory(t) { return new (t || NgStringPipesModule)(); }, imports: [[
            NgCapitalizePipeModule,
            NgDecodeURIComponentPipeModule,
            NgDecodeURIPipeModule,
            NgEncodeURIComponentPipeModule,
            NgLeftPadPipeModule,
            NgMatchPipeModule,
            NgPadPipeModule,
            NgReplacePipeModule,
            NgRightPadPipeModule,
            NgSplitPipeModule,
            NgTestPipeModule,
            NgTrimPipeModule,
            NgNewlinesPipeModule,
            NgUpperFirstPipeModule,
            NgTemplatePipeModule,
            NgEncodeURIPipeModule,
            NgTruncatePipeModule,
            NgRepeatPipeModule,
            NgSlugifyPipeModule,
            NgStripTagsPipeModule,
            NgLatinizePipeModule,
            NgWrapPipeModule,
            NgWithPipeModule,
            NgReverseStrPipeModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgStringPipesModule, { imports: [NgCapitalizePipeModule, NgDecodeURIComponentPipeModule, NgDecodeURIPipeModule, NgEncodeURIComponentPipeModule, NgLeftPadPipeModule, NgMatchPipeModule, NgPadPipeModule, NgReplacePipeModule, NgRightPadPipeModule, NgSplitPipeModule, NgTestPipeModule, NgTrimPipeModule, NgNewlinesPipeModule, NgUpperFirstPipeModule, NgTemplatePipeModule, NgEncodeURIPipeModule, NgTruncatePipeModule, NgRepeatPipeModule, NgSlugifyPipeModule, NgStripTagsPipeModule, NgLatinizePipeModule, NgWrapPipeModule, NgWithPipeModule, NgReverseStrPipeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgStringPipesModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NgCapitalizePipeModule,
                    NgDecodeURIComponentPipeModule,
                    NgDecodeURIPipeModule,
                    NgEncodeURIComponentPipeModule,
                    NgLeftPadPipeModule,
                    NgMatchPipeModule,
                    NgPadPipeModule,
                    NgReplacePipeModule,
                    NgRightPadPipeModule,
                    NgSplitPipeModule,
                    NgTestPipeModule,
                    NgTrimPipeModule,
                    NgNewlinesPipeModule,
                    NgUpperFirstPipeModule,
                    NgTemplatePipeModule,
                    NgEncodeURIPipeModule,
                    NgTruncatePipeModule,
                    NgRepeatPipeModule,
                    NgSlugifyPipeModule,
                    NgStripTagsPipeModule,
                    NgLatinizePipeModule,
                    NgWrapPipeModule,
                    NgWithPipeModule,
                    NgReverseStrPipeModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgStringPipesModule;
}());

var NgPipesModule = /** @class */ (function () {
    function NgPipesModule() {
    }
NgPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPipesModule });
NgPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPipesModule_Factory(t) { return new (t || NgPipesModule)(); }, imports: [NgArrayPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgStringPipesModule, NgObjectPipesModule, NgAggregatePipesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPipesModule, { exports: [NgArrayPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgStringPipesModule, NgObjectPipesModule, NgAggregatePipesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPipesModule, [{
        type: NgModule,
        args: [{
                exports: [
                    NgArrayPipesModule,
                    NgMathPipesModule,
                    NgBooleanPipesModule,
                    NgStringPipesModule,
                    NgObjectPipesModule,
                    NgAggregatePipesModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return NgPipesModule;
}());

export { AbsPipe, BytesPipe, CapitalizePipe, CeilPipe, ChunkPipe, CountPipe, DecodeURIComponentPipe, DecodeURIPipe, DeepPipe, DefaultsPipe, DegreesPipe, DropPipe, EmptyPipe, EncodeURIComponentPipe, EncodeURIPipe, EveryPipe, FirstOrDefaultPipe, FlattenPipe, FloorPipe, GroupByPipe, HeadPipe, InitialPipe, IntersectionPipe, IsArrayPipe, IsDefinedPipe, IsEqualPipe, IsFunctionPipe, IsGreaterOrEqualPipe, IsGreaterPipe, IsIdenticalPipe, IsLessOrEqualPipe, IsLessPipe, IsNilPipe, IsNotEqualPipe, IsNotIdenticalPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe, JoinPipe, KeysPipe, LastPipe, LatinizePipe, LeftPadPipe, MapPipe, MatchPipe, MaxPipe, MeanPipe, MinPipe, NewlinesPipe, NgAbsPipeModule, NgAggregatePipesModule, NgArrayPipesModule, NgBooleanPipesModule, NgBytesPipeModule, NgCapitalizePipeModule, NgCeilPipeModule, NgChunkPipeModule, NgConditionsPipesModule, NgCountPipeModule, NgDecodeURIComponentPipeModule, NgDecodeURIPipeModule, NgDeepPipeModule, NgDefaultsPipeModule, NgDegreesPipeModule, NgDropPipeModule, NgEmptyPipeModule, NgEncodeURIComponentPipeModule, NgEncodeURIPipeModule, NgEveryPipeModule, NgFirstOrDefaultPipeModule, NgFlattenPipeModule, NgFloorPipeModule, NgGroupByPipeModule, NgHeadPipeModule, NgInitialPipeModule, NgIntersectionPipeModule, NgIsArrayPipeModule, NgIsDefinedPipeModule, NgIsEqualPipeModule, NgIsFunctionPipeModule, NgIsGreaterOrEqualPipeModule, NgIsGreaterPipeModule, NgIsIdenticalPipeModule, NgIsLessOrEqualPipeModule, NgIsLessPipeModule, NgIsNilPipeModule, NgIsNotEqualPipeModule, NgIsNotIdenticalPipeModule, NgIsNullPipeModule, NgIsNumberPipeModule, NgIsObjectPipeModule, NgIsStringPipeModule, NgIsUndefinedPipeModule, NgJoinPipeModule, NgKeysPipeModule, NgLastPipeModule, NgLatinizePipeModule, NgLeftPadPipeModule, NgMapPipeModule, NgMatchPipeModule, NgMathPipesModule, NgMaxPipeModule, NgMeanPipeModule, NgMinPipeModule, NgNewlinesPipeModule, NgObjectPipesModule, NgOrderByPipeModule, NgOrdinalPipeModule, NgPadPipeModule, NgPipesModule, NgPluckPipeModule, NgPowPipeModule, NgRadiansPipeModule, NgRandomPipeModule, NgRangePipeModule, NgRepeatPipeModule, NgReplacePipeModule, NgReversePipeModule, NgReverseStrPipeModule, NgRightPadPipeModule, NgRoundPipeModule, NgShufflePipeModule, NgSlugifyPipeModule, NgSomePipeModule, NgSplitPipeModule, NgSqrtPipeModule, NgStringPipesModule, NgStripTagsPipeModule, NgSumPipeModule, NgTailPipeModule, NgTakePipeModule, NgTakeUntilPipeModule, NgTakeWhilePipeModule, NgTemplatePipeModule, NgTestPipeModule, NgToArrayPipeModule, NgTrimPipeModule, NgTruncatePipeModule, NgTypesPipesModule, NgUnionPipeModule, NgUniqPipeModule, NgUpperFirstPipeModule, NgWherePipeModule, NgWithPipeModule, NgWithoutPipeModule, NgWrapPipeModule, OrderByPipe, OrdinalPipe, PadPipe, PluckPipe, PowPipe, RadiansPipe, RandomPipe, RangePipe, RepeatPipe, ReplacePipe, ReversePipe, ReverseStrPipe, RightPadPipe, RoundPipe, ShufflePipe, SlugifyPipe, SomePipe, SplitPipe, SqrtPipe, StripTagsPipe, SumPipe, TailPipe, TakePipe, TakeUntilPipe, TakeWhilePipe, TemplatePipe, TestPipe, ToArrayPipe, TrimPipe, TruncatePipe, UnionPipe, UniqPipe, UpperFirstPipe, WherePipe, WithPipe, WithoutPipe, WrapPipe };

//# sourceMappingURL=angular-pipes.js.map