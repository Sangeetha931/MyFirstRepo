import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsArrayPipe = /** @class */ (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (value) {
        return isArray(value);
    };
IsArrayPipe.ɵfac = function IsArrayPipe_Factory(t) { return new (t || IsArrayPipe)(); };
IsArrayPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isArray", type: IsArrayPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsArrayPipe, [{
        type: Pipe,
        args: [{
                name: 'isArray'
            }]
    }], function () { return []; }, null); })();
    return IsArrayPipe;
}());
export { IsArrayPipe };
var NgIsArrayPipeModule = /** @class */ (function () {
    function NgIsArrayPipeModule() {
    }
NgIsArrayPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsArrayPipeModule });
NgIsArrayPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsArrayPipeModule_Factory(t) { return new (t || NgIsArrayPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsArrayPipeModule, { declarations: [IsArrayPipe], exports: [IsArrayPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsArrayPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsArrayPipe],
                exports: [IsArrayPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsArrayPipeModule;
}());
export { NgIsArrayPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtYXJyYXkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9ib29sZWFuL2lzLWFycmF5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3pDO0FBQStDLElBQS9DO0FBQXlCLElBSXpCLENBQUM7QUFDRCxJQUpFLCtCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsSUFBRSxDQUFDO0lBSFUsV0FBVyxnQ0FIdkIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFNBQVM7R0FDaEIsQ0FBQyxRQUNXLFdBQVcsQ0FJdkI7Ozs7OztnREFDRDtBQUNBLElBRkEsa0JBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsV0FBVztBQVV4QjtBQUNtQixJQURuQjtBQUFpQyxJQUFDLENBQUM7SUFBdEIsbUJBQW1CLGdDQUovQixRQUFRLENBQUMsY0FDUjtPQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQ3ZCLENBQUMsUUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Z0RBQ25DO0FBQUMsSUFEaUMsMEJBQUM7QUFDbEMsQ0FEa0MsQUFBbkMsSUFBbUM7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzQXJyYXknLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNBcnJheVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0FycmF5UGlwZV0sXHJcbiAgZXhwb3J0czogW0lzQXJyYXlQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSXNBcnJheVBpcGVNb2R1bGUge31cclxuIl19