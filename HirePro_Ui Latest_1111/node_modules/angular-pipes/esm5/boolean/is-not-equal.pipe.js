import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IsNotEqualPipe = /** @class */ (function () {
    function IsNotEqualPipe() {
    }
    IsNotEqualPipe.prototype.transform = function (first, second) {
        return first != second;
    };
IsNotEqualPipe.ɵfac = function IsNotEqualPipe_Factory(t) { return new (t || IsNotEqualPipe)(); };
IsNotEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "notEqual", type: IsNotEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNotEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'notEqual'
            }]
    }], function () { return []; }, null); })();
    return IsNotEqualPipe;
}());
export { IsNotEqualPipe };
var NgIsNotEqualPipeModule = /** @class */ (function () {
    function NgIsNotEqualPipeModule() {
    }
NgIsNotEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNotEqualPipeModule });
NgIsNotEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNotEqualPipeModule_Factory(t) { return new (t || NgIsNotEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNotEqualPipeModule, { declarations: [IsNotEqualPipe], exports: [IsNotEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNotEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNotEqualPipe],
                exports: [IsNotEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNotEqualPipeModule;
}());
export { NgIsNotEqualPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbm90LWVxdWFsLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy1ub3QtZXF1YWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUs5RDtBQUFrRCxJQUFsRDtBQUE0QixJQUk1QixDQUFDO0FBQ0QsSUFKRSxrQ0FBUyxHQUFULFVBQVUsS0FBVSxFQUFFLE1BQVc7QUFBSSxRQUNuQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7QUFDM0IsSUFBRSxDQUFDO0lBSFUsY0FBYyxnQ0FIMUIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFVBQVUsV0FDakIsQ0FBQztPQUNXLGNBQWMsQ0FJMUI7Ozs7OztnREFDRDtBQUNBLElBRkEscUJBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsY0FBYztBQVUzQjtBQUNtQixJQURuQjtBQUFvQyxJQUFDLENBQUM7SUFBekIsc0JBQXNCLGdDQUpsQyxRQUFRLENBQUMsY0FDUjtJQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUMsY0FDOUIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLFdBQzFCLENBQUMsUUFDVyxzQkFBc0IsQ0FBRzs7Ozs7Ozs7Z0RBQ3RDO0FBQUMsSUFEb0MsNkJBQUM7QUFDckMsQ0FEcUMsQUFBdEMsSUFBc0M7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ25vdEVxdWFsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTm90RXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmlyc3QgIT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc05vdEVxdWFsUGlwZV0sXHJcbiAgZXhwb3J0czogW0lzTm90RXF1YWxQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSXNOb3RFcXVhbFBpcGVNb2R1bGUge31cclxuIl19