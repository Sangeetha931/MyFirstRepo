import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IsLessOrEqualPipe = /** @class */ (function () {
    function IsLessOrEqualPipe() {
    }
    IsLessOrEqualPipe.prototype.transform = function (first, second) {
        return first <= second;
    };
IsLessOrEqualPipe.ɵfac = function IsLessOrEqualPipe_Factory(t) { return new (t || IsLessOrEqualPipe)(); };
IsLessOrEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "lessOrEqual", type: IsLessOrEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsLessOrEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'lessOrEqual'
            }]
    }], function () { return []; }, null); })();
    return IsLessOrEqualPipe;
}());
export { IsLessOrEqualPipe };
var NgIsLessOrEqualPipeModule = /** @class */ (function () {
    function NgIsLessOrEqualPipeModule() {
    }
NgIsLessOrEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsLessOrEqualPipeModule });
NgIsLessOrEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsLessOrEqualPipeModule_Factory(t) { return new (t || NgIsLessOrEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsLessOrEqualPipeModule, { declarations: [IsLessOrEqualPipe], exports: [IsLessOrEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsLessOrEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsLessOrEqualPipe],
                exports: [IsLessOrEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsLessOrEqualPipeModule;
}());
export { NgIsLessOrEqualPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbGVzcy1vci1lcXVhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtbGVzcy1vci1lcXVhbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlEO0FBQXFELElBQXJEO0FBQStCLElBSS9CLENBQUM7QUFDRCxJQUpFLHFDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBVztBQUFJLFFBQ25DLE9BQU8sS0FBSyxJQUFJLE1BQU0sQ0FBQztBQUMzQixJQUFFLENBQUM7SUFIVSxpQkFBaUIsZ0NBSDdCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxhQUFhLFdBQ3BCLENBQUM7SUFDVyxpQkFBaUIsQ0FJN0I7Ozs7OztnREFDRDtBQUNBLElBRkEsd0JBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsaUJBQWlCO0FBVTlCO0FBQ21CLElBRG5CO0FBQXVDLElBQUMsQ0FBQztJQUE1Qix5QkFBeUIsZ0NBSnJDLFFBQVEsQ0FBQyxjQUNSO0NBQVksRUFBRSxDQUFDLGlCQUFpQixDQUFDLGNBQ2pDLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQzdCLENBQUMsUUFDVyx5QkFBeUIsQ0FBRzs7Ozs7Ozs7Z0RBQ3pDO0FBQUMsSUFEdUMsZ0NBQUM7QUFDeEMsQ0FEd0MsQUFBekMsSUFBeUM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2xlc3NPckVxdWFsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTGVzc09yRXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmlyc3QgPD0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0xlc3NPckVxdWFsUGlwZV0sXHJcbiAgZXhwb3J0czogW0lzTGVzc09yRXF1YWxQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSXNMZXNzT3JFcXVhbFBpcGVNb2R1bGUge31cclxuIl19