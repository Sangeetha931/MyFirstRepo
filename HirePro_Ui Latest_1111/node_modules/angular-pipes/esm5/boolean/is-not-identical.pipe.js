import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IsNotIdenticalPipe = /** @class */ (function () {
    function IsNotIdenticalPipe() {
    }
    IsNotIdenticalPipe.prototype.transform = function (first, second) {
        return first !== second;
    };
IsNotIdenticalPipe.ɵfac = function IsNotIdenticalPipe_Factory(t) { return new (t || IsNotIdenticalPipe)(); };
IsNotIdenticalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "notIdentical", type: IsNotIdenticalPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNotIdenticalPipe, [{
        type: Pipe,
        args: [{
                name: 'notIdentical'
            }]
    }], function () { return []; }, null); })();
    return IsNotIdenticalPipe;
}());
export { IsNotIdenticalPipe };
var NgIsNotIdenticalPipeModule = /** @class */ (function () {
    function NgIsNotIdenticalPipeModule() {
    }
NgIsNotIdenticalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNotIdenticalPipeModule });
NgIsNotIdenticalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNotIdenticalPipeModule_Factory(t) { return new (t || NgIsNotIdenticalPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNotIdenticalPipeModule, { declarations: [IsNotIdenticalPipe], exports: [IsNotIdenticalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNotIdenticalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNotIdenticalPipe],
                exports: [IsNotIdenticalPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNotIdenticalPipeModule;
}());
export { NgIsNotIdenticalPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbm90LWlkZW50aWNhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtbm90LWlkZW50aWNhbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlEO0FBQXNELElBQXREO0FBQWdDLElBSWhDLENBQUM7QUFDRCxJQUpFLHNDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBVztBQUFJLFFBQ25DLE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQztBQUM1QixJQUFFLENBQUM7SUFIVSxrQkFBa0IsZ0NBSDlCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxjQUFjLFdBQ3JCLENBQUM7R0FDVyxrQkFBa0IsQ0FJOUI7Ozs7OztnREFDRDtBQUNBLElBRkEseUJBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsa0JBQWtCO0FBVS9CO0FBQ21CLElBRG5CO0FBQXdDLElBQUMsQ0FBQztJQUE3QiwwQkFBMEIsZ0NBSnRDLFFBQVEsQ0FBQyxjQUNSO0FBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDLGNBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDLFdBQzlCLENBQUMsUUFDVywwQkFBMEIsQ0FBRzs7Ozs7Ozs7Z0RBQzFDO0FBQUMsSUFEd0MsaUNBQUM7QUFDekMsQ0FEeUMsQUFBMUMsSUFBMEM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ25vdElkZW50aWNhbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05vdElkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmaXJzdCAhPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc05vdElkZW50aWNhbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc05vdElkZW50aWNhbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc05vdElkZW50aWNhbFBpcGVNb2R1bGUge31cclxuIl19