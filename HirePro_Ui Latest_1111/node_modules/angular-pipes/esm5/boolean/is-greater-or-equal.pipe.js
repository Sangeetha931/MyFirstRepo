import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IsGreaterOrEqualPipe = /** @class */ (function () {
    function IsGreaterOrEqualPipe() {
    }
    IsGreaterOrEqualPipe.prototype.transform = function (first, second) {
        return first >= second;
    };
IsGreaterOrEqualPipe.ɵfac = function IsGreaterOrEqualPipe_Factory(t) { return new (t || IsGreaterOrEqualPipe)(); };
IsGreaterOrEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "greaterOrEqual", type: IsGreaterOrEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsGreaterOrEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'greaterOrEqual'
            }]
    }], function () { return []; }, null); })();
    return IsGreaterOrEqualPipe;
}());
export { IsGreaterOrEqualPipe };
var NgIsGreaterOrEqualPipeModule = /** @class */ (function () {
    function NgIsGreaterOrEqualPipeModule() {
    }
NgIsGreaterOrEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsGreaterOrEqualPipeModule });
NgIsGreaterOrEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsGreaterOrEqualPipeModule_Factory(t) { return new (t || NgIsGreaterOrEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsGreaterOrEqualPipeModule, { declarations: [IsGreaterOrEqualPipe], exports: [IsGreaterOrEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsGreaterOrEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsGreaterOrEqualPipe],
                exports: [IsGreaterOrEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsGreaterOrEqualPipeModule;
}());
export { NgIsGreaterOrEqualPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZ3JlYXRlci1vci1lcXVhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtZ3JlYXRlci1vci1lcXVhbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlEO0FBQXdELElBQXhEO0FBQWtDLElBSWxDLENBQUM7QUFDRCxJQUpFLHdDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBVztBQUFJLFFBQ25DLE9BQU8sS0FBSyxJQUFJLE1BQU0sQ0FBQztBQUMzQixJQUFFLENBQUM7SUFIVSxvQkFBb0IsZ0NBSGhDLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxnQkFBZ0IsV0FDdkIsQ0FBQztDQUNXLG9CQUFvQixDQUloQzs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSwyQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxvQkFBb0I7QUFVakM7QUFDbUIsSUFEbkI7QUFBMEMsSUFBQyxDQUFDO0lBQS9CLDRCQUE0QixnQ0FKeEMsUUFBUSxDQUFDLGNBQ1IsWUFBWTtBQUFFLENBQUMsb0JBQW9CLENBQUMsY0FDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUMsV0FDaEMsQ0FBQyxRQUNXLDRCQUE0QixDQUFHOzs7Ozs7OztnREFDNUM7QUFBQyxJQUQwQyxtQ0FBQztBQUMzQyxDQUQyQyxBQUE1QyxJQUE0Qzs7QUFmQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ3JlYXRlck9yRXF1YWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNHcmVhdGVyT3JFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmaXJzdCA+PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0lzR3JlYXRlck9yRXF1YWxQaXBlXSxcclxuICBleHBvcnRzOiBbSXNHcmVhdGVyT3JFcXVhbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc0dyZWF0ZXJPckVxdWFsUGlwZU1vZHVsZSB7fVxyXG4iXX0=