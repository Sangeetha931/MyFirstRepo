import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsUndefinedPipe = /** @class */ (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (value) {
        return isUndefined(value);
    };
IsUndefinedPipe.ɵfac = function IsUndefinedPipe_Factory(t) { return new (t || IsUndefinedPipe)(); };
IsUndefinedPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isUndefined", type: IsUndefinedPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsUndefinedPipe, [{
        type: Pipe,
        args: [{
                name: 'isUndefined'
            }]
    }], function () { return []; }, null); })();
    return IsUndefinedPipe;
}());
export { IsUndefinedPipe };
var NgIsUndefinedPipeModule = /** @class */ (function () {
    function NgIsUndefinedPipeModule() {
    }
NgIsUndefinedPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsUndefinedPipeModule });
NgIsUndefinedPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsUndefinedPipeModule_Factory(t) { return new (t || NgIsUndefinedPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsUndefinedPipeModule, { declarations: [IsUndefinedPipe], exports: [IsUndefinedPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsUndefinedPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsUndefinedPipe],
                exports: [IsUndefinedPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsUndefinedPipeModule;
}());
export { NgIsUndefinedPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtdW5kZWZpbmVkLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy11bmRlZmluZWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLN0M7QUFBbUQsSUFBbkQ7QUFBNkIsSUFJN0IsQ0FBQztBQUNELElBSkUsbUNBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixJQUFFLENBQUM7SUFIVSxlQUFlLGdDQUgzQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsYUFBYSxXQUNwQjtBQUFDLFFBQ1csZUFBZSxDQUkzQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxzQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxlQUFlO0FBVTVCO0FBQ21CLElBRG5CO0FBQXFDLElBQUMsQ0FBQztJQUExQix1QkFBdUIsZ0NBSm5DLFFBQVEsQ0FBQyxjQUNSO0dBQVksRUFBRSxDQUFDLGVBQWUsQ0FBQyxjQUMvQixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsV0FDM0IsQ0FBQyxRQUNXLHVCQUF1QixDQUFHOzs7Ozs7OztnREFDdkM7QUFBQyxJQURxQyw4QkFBQztBQUN0QyxDQURzQyxBQUF2QyxJQUF1Qzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzVW5kZWZpbmVkJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzVW5kZWZpbmVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc1VuZGVmaW5lZFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc1VuZGVmaW5lZFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc1VuZGVmaW5lZFBpcGVNb2R1bGUge31cclxuIl19