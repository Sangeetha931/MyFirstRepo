import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsDefinedPipe = /** @class */ (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (value) {
        return !isUndefined(value);
    };
IsDefinedPipe.ɵfac = function IsDefinedPipe_Factory(t) { return new (t || IsDefinedPipe)(); };
IsDefinedPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isDefined", type: IsDefinedPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsDefinedPipe, [{
        type: Pipe,
        args: [{
                name: 'isDefined'
            }]
    }], function () { return []; }, null); })();
    return IsDefinedPipe;
}());
export { IsDefinedPipe };
var NgIsDefinedPipeModule = /** @class */ (function () {
    function NgIsDefinedPipeModule() {
    }
NgIsDefinedPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsDefinedPipeModule });
NgIsDefinedPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsDefinedPipeModule_Factory(t) { return new (t || NgIsDefinedPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsDefinedPipeModule, { declarations: [IsDefinedPipe], exports: [IsDefinedPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsDefinedPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsDefinedPipe],
                exports: [IsDefinedPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsDefinedPipeModule;
}());
export { NgIsDefinedPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZGVmaW5lZC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2Jvb2xlYW4vaXMtZGVmaW5lZC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUs3QztBQUFpRCxJQUFqRDtBQUEyQixJQUkzQixDQUFDO0FBQ0QsSUFKRSxpQ0FBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsSUFBRSxDQUFDO0lBSFUsYUFBYSxnQ0FIekIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFdBQVc7Q0FDbEIsQ0FBQyxRQUNXLGFBQWEsQ0FJekI7Ozs7OztnREFDRDtBQUNBLElBRkEsb0JBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsYUFBYTtBQVUxQjtBQUNtQixJQURuQjtBQUFtQyxJQUFDLENBQUM7SUFBeEIscUJBQXFCLGdDQUpqQyxRQUFRLENBQUMsY0FDUjtLQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsY0FDN0IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQ3pCLENBQUMsUUFDVyxxQkFBcUIsQ0FBRzs7Ozs7Ozs7Z0RBQ3JDO0FBQUMsSUFEbUMsNEJBQUM7QUFDcEMsQ0FEb0MsQUFBckMsSUFBcUM7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzRGVmaW5lZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0RlZmluZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0RlZmluZWRQaXBlXSxcclxuICBleHBvcnRzOiBbSXNEZWZpbmVkUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0lzRGVmaW5lZFBpcGVNb2R1bGUge31cclxuIl19