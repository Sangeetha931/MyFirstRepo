import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isFunction } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsFunctionPipe = /** @class */ (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (value) {
        return isFunction(value);
    };
IsFunctionPipe.ɵfac = function IsFunctionPipe_Factory(t) { return new (t || IsFunctionPipe)(); };
IsFunctionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isFunction", type: IsFunctionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsFunctionPipe, [{
        type: Pipe,
        args: [{
                name: 'isFunction'
            }]
    }], function () { return []; }, null); })();
    return IsFunctionPipe;
}());
export { IsFunctionPipe };
var NgIsFunctionPipeModule = /** @class */ (function () {
    function NgIsFunctionPipeModule() {
    }
NgIsFunctionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsFunctionPipeModule });
NgIsFunctionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsFunctionPipeModule_Factory(t) { return new (t || NgIsFunctionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsFunctionPipeModule, { declarations: [IsFunctionPipe], exports: [IsFunctionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsFunctionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsFunctionPipe],
                exports: [IsFunctionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsFunctionPipeModule;
}());
export { NgIsFunctionPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZnVuY3Rpb24ucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9ib29sZWFuL2lzLWZ1bmN0aW9uLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSzVDO0FBQWtELElBQWxEO0FBQTRCLElBSTVCLENBQUM7QUFDRCxJQUpFLGtDQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsSUFBRSxDQUFDO0lBSFUsY0FBYyxnQ0FIMUIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFlBQVk7QUFDbkIsQ0FBQyxRQUNXLGNBQWMsQ0FJMUI7Ozs7OztnREFDRDtBQUNBLElBRkEscUJBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsY0FBYztBQVUzQjtBQUNtQixJQURuQjtBQUFvQyxJQUFDLENBQUM7SUFBekIsc0JBQXNCLGdDQUpsQyxRQUFRLENBQUMsY0FDUjtJQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUMsY0FDOUIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLFdBQzFCLENBQUMsUUFDVyxzQkFBc0IsQ0FBRzs7Ozs7Ozs7Z0RBQ3RDO0FBQUMsSUFEb0MsNkJBQUM7QUFDckMsQ0FEcUMsQUFBdEMsSUFBc0M7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzRnVuY3Rpb24nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNGdW5jdGlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0Z1bmN0aW9uUGlwZV0sXHJcbiAgZXhwb3J0czogW0lzRnVuY3Rpb25QaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSXNGdW5jdGlvblBpcGVNb2R1bGUge31cclxuIl19