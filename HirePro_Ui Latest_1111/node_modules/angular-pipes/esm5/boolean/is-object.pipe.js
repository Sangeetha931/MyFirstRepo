import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsObjectPipe = /** @class */ (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (value) {
        return isObject(value);
    };
IsObjectPipe.ɵfac = function IsObjectPipe_Factory(t) { return new (t || IsObjectPipe)(); };
IsObjectPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isObject", type: IsObjectPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsObjectPipe, [{
        type: Pipe,
        args: [{
                name: 'isObject'
            }]
    }], function () { return []; }, null); })();
    return IsObjectPipe;
}());
export { IsObjectPipe };
var NgIsObjectPipeModule = /** @class */ (function () {
    function NgIsObjectPipeModule() {
    }
NgIsObjectPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsObjectPipeModule });
NgIsObjectPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsObjectPipeModule_Factory(t) { return new (t || NgIsObjectPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsObjectPipeModule, { declarations: [IsObjectPipe], exports: [IsObjectPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsObjectPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsObjectPipe],
                exports: [IsObjectPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsObjectPipeModule;
}());
export { NgIsObjectPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtb2JqZWN0LnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy1vYmplY3QucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFJMUIsQ0FBQztBQUNELElBSkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixJQUFFLENBQUM7SUFIVSxZQUFZLGdDQUh4QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsVUFBVTtFQUNqQixDQUFDLFFBQ1csWUFBWSxDQUl4Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxtQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxZQUFZO0FBVXpCO0FBQ21CLElBRG5CO0FBQWtDLElBQUMsQ0FBQztJQUF2QixvQkFBb0IsZ0NBSmhDLFFBQVEsQ0FBQyxjQUNSO01BQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FDeEIsQ0FBQyxRQUNXLG9CQUFvQixDQUFHOzs7Ozs7OztnREFDcEM7QUFBQyxJQURrQywyQkFBQztBQUNuQyxDQURtQyxBQUFwQyxJQUFvQzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzT2JqZWN0JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzT2JqZWN0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc09iamVjdFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc09iamVjdFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc09iamVjdFBpcGVNb2R1bGUge31cclxuIl19