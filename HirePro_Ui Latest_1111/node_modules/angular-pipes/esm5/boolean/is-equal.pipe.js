import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IsEqualPipe = /** @class */ (function () {
    function IsEqualPipe() {
    }
    IsEqualPipe.prototype.transform = function (first, second) {
        return first == second;
    };
IsEqualPipe.ɵfac = function IsEqualPipe_Factory(t) { return new (t || IsEqualPipe)(); };
IsEqualPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "equal", type: IsEqualPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsEqualPipe, [{
        type: Pipe,
        args: [{
                name: 'equal'
            }]
    }], function () { return []; }, null); })();
    return IsEqualPipe;
}());
export { IsEqualPipe };
var NgIsEqualPipeModule = /** @class */ (function () {
    function NgIsEqualPipeModule() {
    }
NgIsEqualPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsEqualPipeModule });
NgIsEqualPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsEqualPipeModule_Factory(t) { return new (t || NgIsEqualPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsEqualPipeModule, { declarations: [IsEqualPipe], exports: [IsEqualPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsEqualPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsEqualPipe],
                exports: [IsEqualPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsEqualPipeModule;
}());
export { NgIsEqualPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtZXF1YWwucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9ib29sZWFuL2lzLWVxdWFsLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLOUQ7QUFBK0MsSUFBL0M7QUFBeUIsSUFJekIsQ0FBQztBQUNELElBSkUsK0JBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxNQUFXO0FBQUksUUFDbkMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0FBQzNCLElBQUUsQ0FBQztJQUhVLFdBQVcsZ0NBSHZCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxPQUFPO0NBQ2QsQ0FBQyxRQUNXLFdBQVcsQ0FJdkI7Ozs7OztnREFDRDtBQUNBLElBRkEsa0JBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsV0FBVztBQVV4QjtBQUNtQixJQURuQjtBQUFpQyxJQUFDLENBQUM7SUFBdEIsbUJBQW1CLGdDQUovQixRQUFRLENBQUMsY0FDUjtPQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQ3ZCLENBQUMsUUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Z0RBQ25DO0FBQUMsSUFEaUMsMEJBQUM7QUFDbEMsQ0FEa0MsQUFBbkMsSUFBbUM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2VxdWFsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmlyc3QgPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc0VxdWFsUGlwZV0sXHJcbiAgZXhwb3J0czogW0lzRXF1YWxQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSXNFcXVhbFBpcGVNb2R1bGUge31cclxuIl19