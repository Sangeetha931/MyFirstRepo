import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsStringPipe = /** @class */ (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (value) {
        return isString(value);
    };
IsStringPipe.ɵfac = function IsStringPipe_Factory(t) { return new (t || IsStringPipe)(); };
IsStringPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isString", type: IsStringPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsStringPipe, [{
        type: Pipe,
        args: [{
                name: 'isString'
            }]
    }], function () { return []; }, null); })();
    return IsStringPipe;
}());
export { IsStringPipe };
var NgIsStringPipeModule = /** @class */ (function () {
    function NgIsStringPipeModule() {
    }
NgIsStringPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsStringPipeModule });
NgIsStringPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsStringPipeModule_Factory(t) { return new (t || NgIsStringPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsStringPipeModule, { declarations: [IsStringPipe], exports: [IsStringPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsStringPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsStringPipe],
                exports: [IsStringPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsStringPipeModule;
}());
export { NgIsStringPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtc3RyaW5nLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy1zdHJpbmcucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFJMUIsQ0FBQztBQUNELElBSkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixJQUFFLENBQUM7SUFIVSxZQUFZLGdDQUh4QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsVUFBVTtFQUNqQixDQUFDLFFBQ1csWUFBWSxDQUl4Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxtQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxZQUFZO0FBVXpCO0FBQ21CLElBRG5CO0FBQWtDLElBQUMsQ0FBQztJQUF2QixvQkFBb0IsZ0NBSmhDLFFBQVEsQ0FBQyxjQUNSO01BQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FDeEIsQ0FBQyxRQUNXLG9CQUFvQixDQUFHOzs7Ozs7OztnREFDcEM7QUFBQyxJQURrQywyQkFBQztBQUNuQyxDQURtQyxBQUFwQyxJQUFvQzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzU3RyaW5nJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzU3RyaW5nUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc1N0cmluZ1BpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc1N0cmluZ1BpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc1N0cmluZ1BpcGVNb2R1bGUge31cclxuIl19