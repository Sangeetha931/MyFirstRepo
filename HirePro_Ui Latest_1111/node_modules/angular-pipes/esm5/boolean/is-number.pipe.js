import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumber } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IsNumberPipe = /** @class */ (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (value) {
        return isNumber(value);
    };
IsNumberPipe.ɵfac = function IsNumberPipe_Factory(t) { return new (t || IsNumberPipe)(); };
IsNumberPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "isNumber", type: IsNumberPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IsNumberPipe, [{
        type: Pipe,
        args: [{
                name: 'isNumber'
            }]
    }], function () { return []; }, null); })();
    return IsNumberPipe;
}());
export { IsNumberPipe };
var NgIsNumberPipeModule = /** @class */ (function () {
    function NgIsNumberPipeModule() {
    }
NgIsNumberPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIsNumberPipeModule });
NgIsNumberPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIsNumberPipeModule_Factory(t) { return new (t || NgIsNumberPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIsNumberPipeModule, { declarations: [IsNumberPipe], exports: [IsNumberPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIsNumberPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IsNumberPipe],
                exports: [IsNumberPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIsNumberPipeModule;
}());
export { NgIsNumberPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbnVtYmVyLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYm9vbGVhbi9pcy1udW1iZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFJMUIsQ0FBQztBQUNELElBSkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixJQUFFLENBQUM7SUFIVSxZQUFZLGdDQUh4QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsVUFBVTtFQUNqQixDQUFDLFFBQ1csWUFBWSxDQUl4Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxtQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxZQUFZO0FBVXpCO0FBQ21CLElBRG5CO0FBQWtDLElBQUMsQ0FBQztJQUF2QixvQkFBb0IsZ0NBSmhDLFFBQVEsQ0FBQyxjQUNSO01BQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FDeEIsQ0FBQyxRQUNXLG9CQUFvQixDQUFHOzs7Ozs7OztnREFDcEM7QUFBQyxJQURrQywyQkFBQztBQUNuQyxDQURtQyxBQUFwQyxJQUFvQzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzTnVtYmVyJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJc051bWJlclBpcGVdLFxyXG4gIGV4cG9ydHM6IFtJc051bWJlclBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdJc051bWJlclBpcGVNb2R1bGUge31cclxuIl19