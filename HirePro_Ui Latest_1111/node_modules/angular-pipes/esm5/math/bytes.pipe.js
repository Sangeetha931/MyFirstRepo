import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite, isPositive, isInteger, toDecimal } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    BytesPipe_1 = BytesPipe;
    BytesPipe.prototype.transform = function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) && isNumberFinite(decimal) && isInteger(decimal) && isPositive(decimal))) {
            return input;
        }
        var bytes = input;
        var unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = BytesPipe_1.formats[unit].prev;
        }
        if (to) {
            var format = BytesPipe_1.formats[to];
            var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
            return BytesPipe_1.formatResult(result, to);
        }
        for (var key in BytesPipe_1.formats) {
            if (BytesPipe_1.formats.hasOwnProperty(key)) {
                var format = BytesPipe_1.formats[key];
                if (bytes < format.max) {
                    var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
                    return BytesPipe_1.formatResult(result, key);
                }
            }
        }
    };
    BytesPipe.formatResult = function (result, unit) {
        return result + " " + unit;
    };
    BytesPipe.calculateResult = function (format, bytes) {
        var prev = format.prev ? BytesPipe_1.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    var BytesPipe_1;
    BytesPipe.formats = {
        B: { max: 1024 },
        kB: { max: Math.pow(1024, 2), prev: 'B' },
        KB: { max: Math.pow(1024, 2), prev: 'B' },
        MB: { max: Math.pow(1024, 3), prev: 'kB' },
        GB: { max: Math.pow(1024, 4), prev: 'MB' },
        TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' },
    };
BytesPipe.ɵfac = function BytesPipe_Factory(t) { return new (t || BytesPipe)(); };
BytesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "bytes", type: BytesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BytesPipe, [{
        type: Pipe,
        args: [{
                name: 'bytes'
            }]
    }], function () { return []; }, null); })();
    return BytesPipe;
}());
export { BytesPipe };
var NgBytesPipeModule = /** @class */ (function () {
    function NgBytesPipeModule() {
    }
NgBytesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBytesPipeModule });
NgBytesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgBytesPipeModule_Factory(t) { return new (t || NgBytesPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBytesPipeModule, { declarations: [BytesPipe], exports: [BytesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgBytesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [BytesPipe],
                exports: [BytesPipe]
            }]
    }], function () { return []; }, null); })();
    return NgBytesPipeModule;
}());
export { NgBytesPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,