import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var SqrtPipe = /** @class */ (function () {
    function SqrtPipe() {
    }
    SqrtPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.sqrt(input);
    };
SqrtPipe.ɵfac = function SqrtPipe_Factory(t) { return new (t || SqrtPipe)(); };
SqrtPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "sqrt", type: SqrtPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SqrtPipe, [{
        type: Pipe,
        args: [{
                name: 'sqrt'
            }]
    }], function () { return []; }, null); })();
    return SqrtPipe;
}());
export { SqrtPipe };
var NgSqrtPipeModule = /** @class */ (function () {
    function NgSqrtPipeModule() {
    }
NgSqrtPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSqrtPipeModule });
NgSqrtPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSqrtPipeModule_Factory(t) { return new (t || NgSqrtPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSqrtPipeModule, { declarations: [SqrtPipe], exports: [SqrtPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSqrtPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SqrtPipe],
                exports: [SqrtPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSqrtPipeModule;
}());
export { NgSqrtPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FydC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL21hdGgvc3FydC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtoRDtBQUE0QyxJQUE1QztBQUFzQixJQVF0QixDQUFDO0FBQ0QsSUFSRSw0QkFBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDaEMsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsSUFBRSxDQUFDO0lBUFUsUUFBUSxnQ0FIcEIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLE1BQU07TUFDYixDQUFDLFFBQ1csUUFBUSxDQVFwQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxlQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLFFBQVE7QUFjckI7QUFDbUIsSUFEbkI7QUFBOEIsSUFBQyxDQUFDO0lBQW5CLGdCQUFnQixnQ0FKNUIsUUFBUSxDQUFDLGNBQ1I7VUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3hCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUNwQixDQUFDLFFBQ1csZ0JBQWdCLENBQUc7Ozs7Ozs7O2dEQUNoQztBQUFDLElBRDhCLHVCQUFDO0FBQy9CLENBRCtCLEFBQWhDLElBQWdDOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBUUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc051bWJlckZpbml0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc3FydCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTcXJ0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiAnTmFOJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGlucHV0KTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU3FydFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtTcXJ0UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1NxcnRQaXBlTW9kdWxlIHt9XHJcbiJdfQ==