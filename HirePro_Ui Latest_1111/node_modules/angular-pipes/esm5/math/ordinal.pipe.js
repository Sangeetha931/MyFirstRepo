import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var OrdinalPipe = /** @class */ (function () {
    function OrdinalPipe() {
    }
    OrdinalPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        if (this.endsWithTenth(input)) {
            return input + 'th';
        }
        else {
            var cardinal = input.toString().charAt(input.toString().length - 1);
            switch (cardinal) {
                case '1':
                    return input + 'st';
                case '2':
                    return input + 'nd';
                case '3':
                    return input + 'rd';
                default:
                    return input + 'th';
            }
        }
    };
    OrdinalPipe.prototype.endsWithTenth = function (input) {
        var beforeLastDigit = input.toString().charAt(input.toString().length - 2);
        return beforeLastDigit === '1';
    };
OrdinalPipe.ɵfac = function OrdinalPipe_Factory(t) { return new (t || OrdinalPipe)(); };
OrdinalPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ordinal", type: OrdinalPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OrdinalPipe, [{
        type: Pipe,
        args: [{
                name: 'ordinal'
            }]
    }], function () { return []; }, null); })();
    return OrdinalPipe;
}());
export { OrdinalPipe };
var NgOrdinalPipeModule = /** @class */ (function () {
    function NgOrdinalPipeModule() {
    }
NgOrdinalPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOrdinalPipeModule });
NgOrdinalPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOrdinalPipeModule_Factory(t) { return new (t || NgOrdinalPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOrdinalPipeModule, { declarations: [OrdinalPipe], exports: [OrdinalPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOrdinalPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [OrdinalPipe],
                exports: [OrdinalPipe]
            }]
    }], function () { return []; }, null); })();
    return NgOrdinalPipeModule;
}());
export { NgOrdinalPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkaW5hbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL21hdGgvb3JkaW5hbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtoRDtBQUErQyxJQUEvQztBQUF5QixJQTZCekIsQ0FBQztBQUNELElBN0JFLCtCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNoQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNuQyxZQUFNLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztBQUMxQixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVFLFlBQ00sUUFBUSxRQUFRLEVBQUU7QUFDeEIsZ0JBQVEsS0FBSyxHQUFHO0FBQ2hCLG9CQUFVLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztBQUM5QixnQkFBUSxLQUFLLEdBQUc7QUFDaEIsb0JBQVUsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQzlCLGdCQUFRLEtBQUssR0FBRztBQUNoQixvQkFBVSxPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDOUIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDOUIsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFVLG1DQUFhLEdBQXJCLFVBQXNCLEtBQVU7QUFBSSxRQUNsQyxJQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakYsUUFDSSxPQUFPLGVBQWUsS0FBSyxHQUFHLENBQUM7QUFDbkMsSUFBRSxDQUFDO0lBNUJVLFdBQVcsZ0NBSHZCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxTQUFTO0dBQ2hCLENBQUMsUUFDVyxXQUFXLENBNkJ2Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxrQkFBQztBQUVELENBRkMsQUE3QkQsSUE2QkM7QUFDRCxTQTlCYSxXQUFXO0FBbUN4QjtBQUNtQixJQURuQjtBQUFpQyxJQUFDLENBQUM7SUFBdEIsbUJBQW1CLGdDQUovQixRQUFRLENBQUMsY0FDUjtPQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQ3ZCLENBQUMsUUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Z0RBQ25DO0FBQUMsSUFEaUMsMEJBQUM7QUFDbEMsQ0FEa0MsQUFBbkMsSUFBbUM7O0FBekNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUE2QkEsQUFBQSxBQTVCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE1QkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUE2QkEsQUFBQSxBQUFBLEFBQUEsQUE3QkEsQUE2QkEsQUE3QkEsQUFBQSxBQW1DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc051bWJlckZpbml0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnb3JkaW5hbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPcmRpbmFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiAnTmFOJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5lbmRzV2l0aFRlbnRoKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQgKyAndGgnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgY2FyZGluYWwgPSBpbnB1dC50b1N0cmluZygpLmNoYXJBdChpbnB1dC50b1N0cmluZygpLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgc3dpdGNoIChjYXJkaW5hbCkge1xyXG4gICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ3N0JztcclxuICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgIHJldHVybiBpbnB1dCArICduZCc7XHJcbiAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICByZXR1cm4gaW5wdXQgKyAncmQnO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICByZXR1cm4gaW5wdXQgKyAndGgnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVuZHNXaXRoVGVudGgoaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgYmVmb3JlTGFzdERpZ2l0ID0gaW5wdXQudG9TdHJpbmcoKS5jaGFyQXQoaW5wdXQudG9TdHJpbmcoKS5sZW5ndGggLSAyKTtcclxuXHJcbiAgICByZXR1cm4gYmVmb3JlTGFzdERpZ2l0ID09PSAnMSc7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW09yZGluYWxQaXBlXSxcclxuICBleHBvcnRzOiBbT3JkaW5hbFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdPcmRpbmFsUGlwZU1vZHVsZSB7fVxyXG4iXX0=