import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { createRound, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var CeilPipe = /** @class */ (function () {
    function CeilPipe() {
    }
    CeilPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('ceil')(value, precision);
    };
CeilPipe.ɵfac = function CeilPipe_Factory(t) { return new (t || CeilPipe)(); };
CeilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "ceil", type: CeilPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CeilPipe, [{
        type: Pipe,
        args: [{
                name: 'ceil'
            }]
    }], function () { return []; }, null); })();
    return CeilPipe;
}());
export { CeilPipe };
var NgCeilPipeModule = /** @class */ (function () {
    function NgCeilPipeModule() {
    }
NgCeilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCeilPipeModule });
NgCeilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCeilPipeModule_Factory(t) { return new (t || NgCeilPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCeilPipeModule, { declarations: [CeilPipe], exports: [CeilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCeilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CeilPipe],
                exports: [CeilPipe]
            }]
    }], function () { return []; }, null); })();
    return NgCeilPipeModule;
}());
export { NgCeilPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VpbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL21hdGgvY2VpbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdkQ7QUFBNEMsSUFBNUM7QUFBc0IsSUFRdEIsQ0FBQztBQUNELElBUkUsNEJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxTQUFrQjtBQUFJLFFBQXRCLDBCQUFBLEVBQUEsYUFBa0I7QUFBSSxRQUMxQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUM3QixZQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEMsU0FBSztBQUNMLFFBQ0ksT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELElBQUUsQ0FBQztJQVBVLFFBQVEsZ0NBSHBCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxNQUFNO01BQ2IsQ0FBQyxRQUNXLFFBQVEsQ0FRcEI7Ozs7OztnREFDRDtBQUNBLElBRkEsZUFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxRQUFRO0FBY3JCO0FBQ21CLElBRG5CO0FBQThCLElBQUMsQ0FBQztJQUFuQixnQkFBZ0IsZ0NBSjVCLFFBQVEsQ0FBQyxjQUNSO1VBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUN4QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FDcEIsQ0FBQyxRQUNXLGdCQUFnQixDQUFHOzs7Ozs7OztnREFDaEM7QUFBQyxJQUQ4Qix1QkFBQztBQUMvQixDQUQrQixBQUFoQyxJQUFnQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNyZWF0ZVJvdW5kLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnY2VpbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDZWlsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBwcmVjaXNpb246IGFueSA9IDApOiBhbnkge1xyXG4gICAgaWYgKGlzU3RyaW5nKHByZWNpc2lvbikpIHtcclxuICAgICAgcHJlY2lzaW9uID0gcGFyc2VJbnQocHJlY2lzaW9uKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3JlYXRlUm91bmQoJ2NlaWwnKSh2YWx1ZSwgcHJlY2lzaW9uKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbQ2VpbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtDZWlsUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0NlaWxQaXBlTW9kdWxlIHt9XHJcbiJdfQ==