import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var RandomPipe = /** @class */ (function () {
    function RandomPipe() {
    }
    RandomPipe.prototype.transform = function (input, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1; }
        if (!isNumberFinite(min) || !isNumberFinite(max)) {
            return input;
        }
        if (min > max) {
            max = min;
            min = 0;
        }
        return Math.random() * (max - min) + min;
    };
RandomPipe.ɵfac = function RandomPipe_Factory(t) { return new (t || RandomPipe)(); };
RandomPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "random", type: RandomPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RandomPipe, [{
        type: Pipe,
        args: [{
                name: 'random'
            }]
    }], function () { return []; }, null); })();
    return RandomPipe;
}());
export { RandomPipe };
var NgRandomPipeModule = /** @class */ (function () {
    function NgRandomPipeModule() {
    }
NgRandomPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRandomPipeModule });
NgRandomPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRandomPipeModule_Factory(t) { return new (t || NgRandomPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRandomPipeModule, { declarations: [RandomPipe], exports: [RandomPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRandomPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RandomPipe],
                exports: [RandomPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRandomPipeModule;
}());
export { NgRandomPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvbWF0aC9yYW5kb20ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLaEQ7QUFBOEMsSUFBOUM7QUFBd0IsSUFheEIsQ0FBQztBQUNELElBYkUsOEJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxHQUFlLEVBQUUsR0FBZTtBQUFJLFFBQXBDLG9CQUFBLEVBQUEsT0FBZTtBQUFJLFFBQUYsb0JBQUEsRUFBQSxPQUFlO0FBQUksUUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN0RCxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRTtBQUNuQixZQUFNLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEIsWUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzdDLElBQUUsQ0FBQztJQVpVLFVBQVUsZ0NBSHRCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxRQUFRO0lBQ2YsQ0FBQyxRQUNXLFVBQVUsQ0FhdEI7Ozs7OztnREFDRDtBQUNBLElBRkEsaUJBQUM7QUFFRCxDQUZDLEFBYkQsSUFhQztBQUNELFNBZGEsVUFBVTtBQW1CdkI7QUFDbUIsSUFEbkI7QUFBZ0MsSUFBQyxDQUFDO0lBQXJCLGtCQUFrQixnQ0FKOUIsUUFBUSxDQUFDLGNBQ1I7UUFBWSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQzFCLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUN0QixDQUFDLFFBQ1csa0JBQWtCLENBQUc7Ozs7Ozs7O2dEQUNsQztBQUFDLElBRGdDLHlCQUFDO0FBQ2pDLENBRGlDLEFBQWxDLElBQWtDOztBQXpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBYUEsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQWJBLEFBYUEsQUFiQSxBQUFBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzTnVtYmVyRmluaXRlIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdyYW5kb20nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFuZG9tUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMSk6IGFueSB7XHJcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKG1pbikgfHwgIWlzTnVtYmVyRmluaXRlKG1heCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtaW4gPiBtYXgpIHtcclxuICAgICAgbWF4ID0gbWluO1xyXG4gICAgICBtaW4gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1JhbmRvbVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtSYW5kb21QaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUmFuZG9tUGlwZU1vZHVsZSB7fVxyXG4iXX0=