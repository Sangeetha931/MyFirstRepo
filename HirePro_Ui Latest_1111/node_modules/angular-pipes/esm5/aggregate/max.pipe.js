import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var MaxPipe = /** @class */ (function () {
    function MaxPipe() {
    }
    MaxPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        var max = input[0];
        input.forEach(function (value) {
            if (max < value) {
                max = value;
            }
        });
        return max;
    };
MaxPipe.ɵfac = function MaxPipe_Factory(t) { return new (t || MaxPipe)(); };
MaxPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "max", type: MaxPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaxPipe, [{
        type: Pipe,
        args: [{
                name: 'max'
            }]
    }], function () { return []; }, null); })();
    return MaxPipe;
}());
export { MaxPipe };
var NgMaxPipeModule = /** @class */ (function () {
    function NgMaxPipeModule() {
    }
NgMaxPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMaxPipeModule });
NgMaxPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMaxPipeModule_Factory(t) { return new (t || NgMaxPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMaxPipeModule, { declarations: [MaxPipe], exports: [MaxPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMaxPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MaxPipe],
                exports: [MaxPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMaxPipeModule;
}());
export { NgMaxPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYWdncmVnYXRlL21heC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt6QztBQUEyQyxJQUEzQztBQUFxQixJQW9CckIsQ0FBQztBQUNELElBcEJFLDJCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDNUIsWUFBTSxPQUFPLFNBQVMsQ0FBQztBQUN2QixTQUFLO0FBQ0wsUUFDSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFDSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBVTtBQUFJLFlBQzNCLElBQUksR0FBRyxHQUFHLEtBQUssRUFBRTtBQUN2QixnQkFBUSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3BCLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxPQUFPLEdBQUcsQ0FBQztBQUNmLElBQUUsQ0FBQztJQW5CVSxPQUFPLGdDQUhuQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsS0FBSztPQUNaLENBQUMsUUFDVyxPQUFPLENBb0JuQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxjQUFDO0FBRUQsQ0FGQyxBQXBCRCxJQW9CQztBQUNELFNBckJhLE9BQU87QUEwQnBCO0FBQ21CLElBRG5CO0FBQTZCLElBQUMsQ0FBQztJQUFsQixlQUFlLGdDQUozQixRQUFRLENBQUMsY0FDUjtXQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FDdkIsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQ25CLENBQUMsUUFDVyxlQUFlLENBQUc7Ozs7Ozs7O2dEQUMvQjtBQUFDLElBRDZCLHNCQUFDO0FBQzlCLENBRDhCLEFBQS9CLElBQStCOztBQWhDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBb0JBLEFBQUEsQUFuQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbkJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFBQSxBQUFBLEFBcEJBLEFBb0JBLEFBcEJBLEFBQUEsQUEwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbWF4JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1heFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1heCA9IGlucHV0WzBdO1xyXG5cclxuICAgIGlucHV0LmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgaWYgKG1heCA8IHZhbHVlKSB7XHJcbiAgICAgICAgbWF4ID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBtYXg7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW01heFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtNYXhQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nTWF4UGlwZU1vZHVsZSB7fVxyXG4iXX0=