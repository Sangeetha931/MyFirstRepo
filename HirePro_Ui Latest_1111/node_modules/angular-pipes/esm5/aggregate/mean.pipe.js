import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, sum } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var MeanPipe = /** @class */ (function () {
    function MeanPipe() {
    }
    MeanPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        var count = input.length;
        if (count === 0) {
            return undefined;
        }
        return sum(input) / count;
    };
MeanPipe.ɵfac = function MeanPipe_Factory(t) { return new (t || MeanPipe)(); };
MeanPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "mean", type: MeanPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MeanPipe, [{
        type: Pipe,
        args: [{
                name: 'mean'
            }]
    }], function () { return []; }, null); })();
    return MeanPipe;
}());
export { MeanPipe };
var NgMeanPipeModule = /** @class */ (function () {
    function NgMeanPipeModule() {
    }
NgMeanPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMeanPipeModule });
NgMeanPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMeanPipeModule_Factory(t) { return new (t || NgMeanPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMeanPipeModule, { declarations: [MeanPipe], exports: [MeanPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMeanPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MeanPipe],
                exports: [MeanPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMeanPipeModule;
}());
export { NgMeanPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVhbi5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FnZ3JlZ2F0ZS9tZWFuLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUs5QztBQUE0QyxJQUE1QztBQUFzQixJQWN0QixDQUFDO0FBQ0QsSUFkRSw0QkFBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQy9CLFFBQ0ksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3JCLFlBQU0sT0FBTyxTQUFTLENBQUM7QUFDdkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQzlCLElBQUUsQ0FBQztJQWJVLFFBQVEsZ0NBSHBCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxNQUFNO01BQ2IsQ0FBQyxRQUNXLFFBQVEsQ0FjcEI7Ozs7OztnREFDRDtBQUNBLElBRkEsZUFBQztBQUVELENBRkMsQUFkRCxJQWNDO0FBQ0QsU0FmYSxRQUFRO0FBb0JyQjtBQUNtQixJQURuQjtBQUE4QixJQUFDLENBQUM7SUFBbkIsZ0JBQWdCLGdDQUo1QixRQUFRLENBQUMsY0FDUjtVQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDeEIsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQ3BCLENBQUMsUUFDVyxnQkFBZ0IsQ0FBRzs7Ozs7Ozs7Z0RBQ2hDO0FBQUMsSUFEOEIsdUJBQUM7QUFDL0IsQ0FEK0IsQUFBaEMsSUFBZ0M7O0FBMUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBY0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFkQSxBQWNBLEFBZEEsQUFBQSxBQW9CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBzdW0gfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ21lYW4nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWVhblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb3VudCA9IGlucHV0Lmxlbmd0aDtcclxuXHJcbiAgICBpZiAoY291bnQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VtKGlucHV0KSAvIGNvdW50O1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtNZWFuUGlwZV0sXHJcbiAgZXhwb3J0czogW01lYW5QaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nTWVhblBpcGVNb2R1bGUge31cclxuIl19