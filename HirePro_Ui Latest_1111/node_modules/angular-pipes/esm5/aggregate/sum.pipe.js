import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, sum } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var SumPipe = /** @class */ (function () {
    function SumPipe() {
    }
    SumPipe.prototype.transform = function (input) {
        return !isArray(input) ? input : sum(input);
    };
SumPipe.ɵfac = function SumPipe_Factory(t) { return new (t || SumPipe)(); };
SumPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "sum", type: SumPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SumPipe, [{
        type: Pipe,
        args: [{ name: 'sum' }]
    }], function () { return []; }, null); })();
    return SumPipe;
}());
export { SumPipe };
var NgSumPipeModule = /** @class */ (function () {
    function NgSumPipeModule() {
    }
NgSumPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSumPipeModule });
NgSumPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSumPipeModule_Factory(t) { return new (t || NgSumPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSumPipeModule, { declarations: [SumPipe], exports: [SumPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSumPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SumPipe],
                exports: [SumPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSumPipeModule;
}());
export { NgSumPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYWdncmVnYXRlL3N1bS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHOUM7QUFBMkMsSUFBM0M7QUFBcUIsSUFJckIsQ0FBQztBQUNELElBSkUsMkJBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxJQUFFLENBQUM7SUFIVSxPQUFPLGdDQURuQixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFDVDtFQUFPLENBSW5COzs7O2dEQUNEO0FBQ0EsSUFGQSxjQUFDO0FBRUQsQ0FGQyxBQUpELElBSUM7QUFDRCxTQUxhLE9BQU87QUFVcEI7QUFDbUIsSUFEbkI7QUFBNkIsSUFBQyxDQUFDO0lBQWxCLGVBQWUsZ0NBSjNCLFFBQVEsQ0FBQyxjQUNSO1dBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUN2QixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FDbkIsQ0FBQyxRQUNXLGVBQWUsQ0FBRzs7Ozs7Ozs7Z0RBQy9CO0FBQUMsSUFENkIsc0JBQUM7QUFDOUIsQ0FEOEIsQUFBL0IsSUFBK0I7O0FBZEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXksIHN1bSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3N1bScgfSlcclxuZXhwb3J0IGNsYXNzIFN1bVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gIWlzQXJyYXkoaW5wdXQpID8gaW5wdXQgOiBzdW0oaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTdW1QaXBlXSxcclxuICBleHBvcnRzOiBbU3VtUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1N1bVBpcGVNb2R1bGUge31cclxuIl19