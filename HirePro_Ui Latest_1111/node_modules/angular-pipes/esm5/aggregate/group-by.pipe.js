import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { getProperty, isArray, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, prop) {
        var e_1, _a;
        if (!isArray(input)) {
            return input;
        }
        var arr = {};
        try {
            for (var input_1 = tslib_1.__values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var value = input_1_1.value;
                var field = getProperty(value, prop);
                if (isUndefined(arr[field])) {
                    arr[field] = [];
                }
                arr[field].push(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, value: arr[key] }); });
    };
GroupByPipe.ɵfac = function GroupByPipe_Factory(t) { return new (t || GroupByPipe)(); };
GroupByPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "groupBy", type: GroupByPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupByPipe, [{
        type: Pipe,
        args: [{
                name: 'groupBy'
            }]
    }], function () { return []; }, null); })();
    return GroupByPipe;
}());
export { GroupByPipe };
var NgGroupByPipeModule = /** @class */ (function () {
    function NgGroupByPipeModule() {
    }
NgGroupByPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgGroupByPipeModule });
NgGroupByPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgGroupByPipeModule_Factory(t) { return new (t || NgGroupByPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgGroupByPipeModule, { declarations: [GroupByPipe], exports: [GroupByPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgGroupByPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GroupByPipe],
                exports: [GroupByPipe]
            }]
    }], function () { return []; }, null); })();
    return NgGroupByPipeModule;
}());
export { NgGroupByPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hZ2dyZWdhdGUvZ3JvdXAtYnkucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtuRTtBQUErQyxJQUEvQztBQUF5QixJQW9CekIsQ0FBQztBQUNELElBcEJFLCtCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsSUFBWTtBQUFJO0FBQy9CLFFBQUwsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQU0sR0FBRyxHQUFrQyxFQUFFLENBQUM7QUFDbEQ7QUFDYSxZQUFULEtBQW9CLElBQUEsVUFBQSxpQkFBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7QUFDL0IsZ0JBRFMsSUFBTSxLQUFLLGtCQUFBO0FBQUUsZ0JBQ2hCLElBQU0sS0FBSyxHQUFRLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEQsZ0JBQ00sSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDbkMsb0JBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixpQkFBTztBQUNQLGdCQUNNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsYUFBSztBQUNMO0FBQ1M7QUFBa0Q7QUFJekQ7QUFDTTtBQUlIO0FBQWM7QUFBa0Q7QUFBVSxRQVQzRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7QUFDbkUsSUFBRSxDQUFDO0lBbkJVLFdBQVcsZ0NBSHZCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxTQUFTO0dBQ2hCLENBQUMsUUFDVyxXQUFXLENBb0J2Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxrQkFBQztBQUVELENBRkMsQUFwQkQsSUFvQkM7QUFDRCxTQXJCYSxXQUFXO0FBMEJ4QjtBQUNtQixJQURuQjtBQUFpQyxJQUFDLENBQUM7SUFBdEIsbUJBQW1CLGdDQUovQixRQUFRLENBQUMsY0FDUjtPQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQ3ZCLENBQUMsUUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Z0RBQ25DO0FBQUMsSUFEaUMsMEJBQUM7QUFDbEMsQ0FEa0MsQUFBbkMsSUFBbUM7O0FBaENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQW9CQSxBQUFBLEFBbkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbkJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFBQSxBQUFBLEFBcEJBLEFBb0JBLEFBcEJBLEFBQUEsQUEwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0UHJvcGVydHksIGlzQXJyYXksIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdncm91cEJ5JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHByb3A6IHN0cmluZyk6IEFycmF5PGFueT4ge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXJyOiB7IFtrZXk6IHN0cmluZ106IEFycmF5PGFueT4gfSA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgaW5wdXQpIHtcclxuICAgICAgY29uc3QgZmllbGQ6IGFueSA9IGdldFByb3BlcnR5KHZhbHVlLCBwcm9wKTtcclxuXHJcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhcnJbZmllbGRdKSkge1xyXG4gICAgICAgIGFycltmaWVsZF0gPSBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXJyW2ZpZWxkXS5wdXNoKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYXJyKS5tYXAoa2V5ID0+ICh7IGtleSwgdmFsdWU6IGFycltrZXldIH0pKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbR3JvdXBCeVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtHcm91cEJ5UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0dyb3VwQnlQaXBlTW9kdWxlIHt9XHJcbiJdfQ==