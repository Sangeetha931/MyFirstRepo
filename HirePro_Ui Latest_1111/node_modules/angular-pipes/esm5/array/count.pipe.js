import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { count } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var CountPipe = /** @class */ (function () {
    function CountPipe() {
    }
    CountPipe.prototype.transform = function (input) {
        return count(input);
    };
CountPipe.ɵfac = function CountPipe_Factory(t) { return new (t || CountPipe)(); };
CountPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "count", type: CountPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountPipe, [{
        type: Pipe,
        args: [{
                name: 'count'
            }]
    }], function () { return []; }, null); })();
    return CountPipe;
}());
export { CountPipe };
var NgCountPipeModule = /** @class */ (function () {
    function NgCountPipeModule() {
    }
NgCountPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCountPipeModule });
NgCountPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCountPipeModule_Factory(t) { return new (t || NgCountPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCountPipeModule, { declarations: [CountPipe], exports: [CountPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCountPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CountPipe],
                exports: [CountPipe]
            }]
    }], function () { return []; }, null); })();
    return NgCountPipeModule;
}());
export { NgCountPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9jb3VudC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2QztBQUE2QyxJQUE3QztBQUF1QixJQUl2QixDQUFDO0FBQ0QsSUFKRSw2QkFBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLElBQUUsQ0FBQztJQUhVLFNBQVMsZ0NBSHJCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxRQUNXLFNBQVMsQ0FJckI7Ozs7OztnREFDRDtBQUNBLElBRkEsZ0JBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsU0FBUztBQVV0QjtBQUNtQixJQURuQjtBQUErQixJQUFDLENBQUM7SUFBcEIsaUJBQWlCLGdDQUo3QixRQUFRLENBQUMsY0FDUjtTQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FDekIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQ3JCLENBQUMsUUFDVyxpQkFBaUIsQ0FBRzs7Ozs7Ozs7Z0RBQ2pDO0FBQUMsSUFEK0Isd0JBQUM7QUFDaEMsQ0FEZ0MsQUFBakMsSUFBaUM7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNvdW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdjb3VudCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb3VudFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gY291bnQoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtDb3VudFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtDb3VudFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdDb3VudFBpcGVNb2R1bGUge31cclxuIl19