import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { every } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var EveryPipe = /** @class */ (function () {
    function EveryPipe() {
    }
    EveryPipe.prototype.transform = function (input, predicate) {
        return every(input, predicate);
    };
EveryPipe.ɵfac = function EveryPipe_Factory(t) { return new (t || EveryPipe)(); };
EveryPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "every", type: EveryPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EveryPipe, [{
        type: Pipe,
        args: [{
                name: 'every'
            }]
    }], function () { return []; }, null); })();
    return EveryPipe;
}());
export { EveryPipe };
var NgEveryPipeModule = /** @class */ (function () {
    function NgEveryPipeModule() {
    }
NgEveryPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEveryPipeModule });
NgEveryPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEveryPipeModule_Factory(t) { return new (t || NgEveryPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEveryPipeModule, { declarations: [EveryPipe], exports: [EveryPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEveryPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EveryPipe],
                exports: [EveryPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEveryPipeModule;
}());
export { NgEveryPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlcnkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9ldmVyeS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEtBQUssRUFBdUIsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLNUQ7QUFBNkMsSUFBN0M7QUFBdUIsSUFJdkIsQ0FBQztBQUNELElBSkUsNkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxTQUE4QjtBQUFJLFFBQ3RELE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuQyxJQUFFLENBQUM7SUFIVSxTQUFTLGdDQUhyQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsUUFDVyxTQUFTLENBSXJCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGdCQUFDO0FBRUQsQ0FGQyxBQUpELElBSUM7QUFDRCxTQUxhLFNBQVM7QUFVdEI7QUFDbUIsSUFEbkI7QUFBK0IsSUFBQyxDQUFDO0lBQXBCLGlCQUFpQixnQ0FKN0IsUUFBUSxDQUFDLGNBQ1I7U0FBWSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUNyQixDQUFDLFFBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7O2dEQUNqQztBQUFDLElBRCtCLHdCQUFDO0FBQ2hDLENBRGdDLEFBQWpDLElBQWlDOztBQWhCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUlBLEFBSkEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGV2ZXJ5LCBDb2xsZWN0aW9uUHJlZGljYXRlIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdldmVyeScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFdmVyeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJlZGljYXRlOiBDb2xsZWN0aW9uUHJlZGljYXRlKTogYW55IHtcclxuICAgIHJldHVybiBldmVyeShpbnB1dCwgcHJlZGljYXRlKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRXZlcnlQaXBlXSxcclxuICBleHBvcnRzOiBbRXZlcnlQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRXZlcnlQaXBlTW9kdWxlIHt9XHJcbiJdfQ==