import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, isDeepObject, unwrapDeep, deepIndexOf } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var UnionPipe = /** @class */ (function () {
    function UnionPipe() {
    }
    UnionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return []
                .concat(unwrapped)
                .concat(b)
                .filter(function (value, index, input) { return deepIndexOf(input, value) === index; });
        }
        return []
            .concat(a)
            .concat(b)
            .filter(function (value, index, input) { return input.indexOf(value) === index; });
    };
UnionPipe.ɵfac = function UnionPipe_Factory(t) { return new (t || UnionPipe)(); };
UnionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "union", type: UnionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnionPipe, [{
        type: Pipe,
        args: [{
                name: 'union'
            }]
    }], function () { return []; }, null); })();
    return UnionPipe;
}());
export { UnionPipe };
var NgUnionPipeModule = /** @class */ (function () {
    function NgUnionPipeModule() {
    }
NgUnionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgUnionPipeModule });
NgUnionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgUnionPipeModule_Factory(t) { return new (t || NgUnionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgUnionPipeModule, { declarations: [UnionPipe], exports: [UnionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgUnionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [UnionPipe],
                exports: [UnionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgUnionPipeModule;
}());
export { NgUnionPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pb24ucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS91bmlvbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUtoRjtBQUE2QyxJQUE3QztBQUF1QixJQXVCdkIsQ0FBQztBQUNELElBdkJFLDZCQUFTLEdBQVQsVUFBVSxDQUFPLEVBQUUsQ0FBTztBQUFJLFFBQzVCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzFELFlBQU0sT0FBTyxFQUFFLENBQUM7QUFDaEIsU0FBSztBQUNMLFFBQ0ksSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDekIsWUFBTSxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEMsWUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQy9CLGdCQUFRLE9BQU8sRUFBRSxDQUFDO0FBQ2xCLGFBQU87QUFDUCxZQUNNLE9BQU8sRUFBRTtBQUNmLGlCQUFTLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDMUIsaUJBQVMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNsQixpQkFBUyxNQUFNLENBQUMsVUFBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEtBQVksSUFBSyxPQUFBLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFuQyxDQUFtQyxDQUFDLENBQUM7QUFDbEcsU0FBSztBQUNMLFFBQ0ksT0FBTyxFQUFFO0FBQ2IsYUFBTyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLGFBQU8sTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoQixhQUFPLE1BQU0sQ0FBQyxVQUFDLEtBQVUsRUFBRSxLQUFhLEVBQUUsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQTlCLENBQThCLENBQUMsQ0FBQztBQUMzRixJQUFFLENBQUM7SUF0QlUsU0FBUyxnQ0FIckIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLFFBQ1csU0FBUyxDQXVCckI7Ozs7OztnREFDRDtBQUNBLElBRkEsZ0JBQUM7QUFFRCxDQUZDLEFBdkJELElBdUJDO0FBQ0QsU0F4QmEsU0FBUztBQTZCdEI7QUFDbUIsSUFEbkI7QUFBK0IsSUFBQyxDQUFDO0lBQXBCLGlCQUFpQixnQ0FKN0IsUUFBUSxDQUFDLGNBQ1I7U0FBWSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUNyQixDQUFDLFFBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7O2dEQUNqQztBQUFDLElBRCtCLHdCQUFDO0FBQ2hDLENBRGdDLEFBQWpDLElBQWlDOztBQW5DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBdUJBLEFBQUEsQUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdEJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBdUJBLEFBQUEsQUFBQSxBQUFBLEFBdkJBLEFBdUJBLEFBdkJBLEFBQUEsQUE2QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNEZWVwT2JqZWN0LCB1bndyYXBEZWVwLCBkZWVwSW5kZXhPZiB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndW5pb24nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVW5pb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGE/OiBhbnksIGI/OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCghaXNBcnJheShhKSAmJiAhaXNEZWVwT2JqZWN0KGEpKSB8fCAhaXNBcnJheShiKSkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzRGVlcE9iamVjdChhKSkge1xyXG4gICAgICBjb25zdCB1bndyYXBwZWQgPSB1bndyYXBEZWVwKGEpO1xyXG4gICAgICBpZiAoIWlzQXJyYXkodW53cmFwcGVkKSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgLmNvbmNhdCh1bndyYXBwZWQpXHJcbiAgICAgICAgLmNvbmNhdChiKVxyXG4gICAgICAgIC5maWx0ZXIoKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIsIGlucHV0OiBhbnlbXSkgPT4gZGVlcEluZGV4T2YoaW5wdXQsIHZhbHVlKSA9PT0gaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXVxyXG4gICAgICAuY29uY2F0KGEpXHJcbiAgICAgIC5jb25jYXQoYilcclxuICAgICAgLmZpbHRlcigodmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgaW5wdXQ6IGFueVtdKSA9PiBpbnB1dC5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtVbmlvblBpcGVdLFxyXG4gIGV4cG9ydHM6IFtVbmlvblBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdVbmlvblBpcGVNb2R1bGUge31cclxuIl19