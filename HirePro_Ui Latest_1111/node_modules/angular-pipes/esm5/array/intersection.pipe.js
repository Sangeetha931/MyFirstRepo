import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, isDeepObject, unwrapDeep, deepIndexOf } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var IntersectionPipe = /** @class */ (function () {
    function IntersectionPipe() {
    }
    IntersectionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return unwrapped.reduce(function (intersection, value) {
                return intersection.concat(deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1 ? value : []);
            }, []);
        }
        return a.reduce(function (intersection, value) {
            return intersection.concat(b.indexOf(value) !== -1 && intersection.indexOf(value) === -1 ? value : []);
        }, []);
    };
IntersectionPipe.ɵfac = function IntersectionPipe_Factory(t) { return new (t || IntersectionPipe)(); };
IntersectionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "intersection", type: IntersectionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionPipe, [{
        type: Pipe,
        args: [{
                name: 'intersection'
            }]
    }], function () { return []; }, null); })();
    return IntersectionPipe;
}());
export { IntersectionPipe };
var NgIntersectionPipeModule = /** @class */ (function () {
    function NgIntersectionPipeModule() {
    }
NgIntersectionPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgIntersectionPipeModule });
NgIntersectionPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgIntersectionPipeModule_Factory(t) { return new (t || NgIntersectionPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIntersectionPipeModule, { declarations: [IntersectionPipe], exports: [IntersectionPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgIntersectionPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [IntersectionPipe],
                exports: [IntersectionPipe]
            }]
    }], function () { return []; }, null); })();
    return NgIntersectionPipeModule;
}());
export { NgIntersectionPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYXJyYXkvaW50ZXJzZWN0aW9uLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS2hGO0FBQW9ELElBQXBEO0FBQThCLElBeUI5QixDQUFDO0FBQ0QsSUF6QkUsb0NBQVMsR0FBVCxVQUFVLENBQU8sRUFBRSxDQUFPO0FBQUksUUFDNUIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDMUQsWUFBTSxPQUFPLEVBQUUsQ0FBQztBQUNoQixTQUFLO0FBQ0wsUUFDSSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6QixZQUFNLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0IsZ0JBQVEsT0FBTyxFQUFFLENBQUM7QUFDbEIsYUFBTztBQUNQLFlBQ00sT0FBTyxTQUFTLENBQUMsTUFBTSxDQUNyQixVQUFDLFlBQW1CLEVBQUUsS0FBVTtBQUFJLGdCQUNsQyxPQUFBLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNuSCxZQURVLENBQXlHLEVBQzNHLEVBQUUsQ0FDSCxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUNiLFVBQUMsWUFBbUIsRUFBRSxLQUFVO0FBQUksWUFDbEMsT0FBQSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdkcsUUFEUSxDQUErRixFQUNqRyxFQUFFLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztJQXhCVSxnQkFBZ0IsZ0NBSDVCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxjQUFjLFdBQ3JCLENBQUM7T0FDVyxnQkFBZ0IsQ0F5QjVCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLHVCQUFDO0FBRUQsQ0FGQyxBQXpCRCxJQXlCQztBQUNELFNBMUJhLGdCQUFnQjtBQStCN0I7QUFDbUIsSUFEbkI7QUFBc0MsSUFBQyxDQUFDO0lBQTNCLHdCQUF3QixnQ0FKcEMsUUFBUSxDQUFDLGNBQ1I7RUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsY0FDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsV0FDNUIsQ0FBQyxRQUNXLHdCQUF3QixDQUFHOzs7Ozs7OztnREFDeEM7QUFBQyxJQURzQywrQkFBQztBQUN2QyxDQUR1QyxBQUF4QyxJQUF3Qzs7QUFyQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQXlCQSxBQUFBLEFBeEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBeEJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBeUJBLEFBQUEsQUFBQSxBQUFBLEFBekJBLEFBeUJBLEFBekJBLEFBQUEsQUErQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNEZWVwT2JqZWN0LCB1bndyYXBEZWVwLCBkZWVwSW5kZXhPZiB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaW50ZXJzZWN0aW9uJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oYT86IGFueSwgYj86IGFueSk6IGFueSB7XHJcbiAgICBpZiAoKCFpc0FycmF5KGEpICYmICFpc0RlZXBPYmplY3QoYSkpIHx8ICFpc0FycmF5KGIpKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNEZWVwT2JqZWN0KGEpKSB7XHJcbiAgICAgIGNvbnN0IHVud3JhcHBlZCA9IHVud3JhcERlZXAoYSk7XHJcbiAgICAgIGlmICghaXNBcnJheSh1bndyYXBwZWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdW53cmFwcGVkLnJlZHVjZShcclxuICAgICAgICAoaW50ZXJzZWN0aW9uOiBhbnlbXSwgdmFsdWU6IGFueSkgPT5cclxuICAgICAgICAgIGludGVyc2VjdGlvbi5jb25jYXQoZGVlcEluZGV4T2YoYiwgdmFsdWUpICE9PSAtMSAmJiBkZWVwSW5kZXhPZihpbnRlcnNlY3Rpb24sIHZhbHVlKSA9PT0gLTEgPyB2YWx1ZSA6IFtdKSxcclxuICAgICAgICBbXVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhLnJlZHVjZShcclxuICAgICAgKGludGVyc2VjdGlvbjogYW55W10sIHZhbHVlOiBhbnkpID0+XHJcbiAgICAgICAgaW50ZXJzZWN0aW9uLmNvbmNhdChiLmluZGV4T2YodmFsdWUpICE9PSAtMSAmJiBpbnRlcnNlY3Rpb24uaW5kZXhPZih2YWx1ZSkgPT09IC0xID8gdmFsdWUgOiBbXSksXHJcbiAgICAgIFtdXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJbnRlcnNlY3Rpb25QaXBlXSxcclxuICBleHBvcnRzOiBbSW50ZXJzZWN0aW9uUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0ludGVyc2VjdGlvblBpcGVNb2R1bGUge31cclxuIl19