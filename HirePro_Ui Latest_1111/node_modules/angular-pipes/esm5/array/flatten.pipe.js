import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, isDeepObject, unwrapDeep, flatten } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var FlattenPipe = /** @class */ (function () {
    function FlattenPipe() {
    }
    FlattenPipe.prototype.transform = function (input) {
        var isDeep = isDeepObject(input);
        if (!isArray(input) && !isDeep) {
            return input;
        }
        if (isDeep) {
            var unwrapped = unwrapDeep(input);
            if (!isArray(unwrapped)) {
                return unwrapped;
            }
            return flatten(unwrapped, 0);
        }
        return [].concat.apply([], input);
    };
FlattenPipe.ɵfac = function FlattenPipe_Factory(t) { return new (t || FlattenPipe)(); };
FlattenPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "flatten", type: FlattenPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FlattenPipe, [{
        type: Pipe,
        args: [{ name: 'flatten' }]
    }], function () { return []; }, null); })();
    return FlattenPipe;
}());
export { FlattenPipe };
var NgFlattenPipeModule = /** @class */ (function () {
    function NgFlattenPipeModule() {
    }
NgFlattenPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFlattenPipeModule });
NgFlattenPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFlattenPipeModule_Factory(t) { return new (t || NgFlattenPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFlattenPipeModule, { declarations: [FlattenPipe], exports: [FlattenPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFlattenPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [FlattenPipe],
                exports: [FlattenPipe]
            }]
    }], function () { return []; }, null); })();
    return NgFlattenPipeModule;
}());
export { NgFlattenPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHRlbi5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L2ZsYXR0ZW4ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHNUU7QUFBK0MsSUFBL0M7QUFBeUIsSUFrQnpCLENBQUM7QUFDRCxJQWxCRSwrQkFBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLElBQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDcEMsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFJLE1BQU0sRUFBRTtBQUNoQixZQUFNLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0IsZ0JBQVEsT0FBTyxTQUFTLENBQUM7QUFDekIsYUFBTztBQUNQLFlBQ00sT0FBTyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFNBQUs7QUFDTCxRQUNJLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztJQWpCVSxXQUFXLGdDQUR2QixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsUUFDYjtFQUFXLENBa0J2Qjs7OztnREFDRDtBQUNBLElBRkEsa0JBQUM7QUFFRCxDQUZDLEFBbEJELElBa0JDO0FBQ0QsU0FuQmEsV0FBVztBQXdCeEI7QUFDbUIsSUFEbkI7QUFBaUMsSUFBQyxDQUFDO0lBQXRCLG1CQUFtQixnQ0FKL0IsUUFBUSxDQUFDLGNBQ1I7T0FBWSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQzNCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUN2QixDQUFDLFFBQ1csbUJBQW1CLENBQUc7Ozs7Ozs7O2dEQUNuQztBQUFDLElBRGlDLDBCQUFDO0FBQ2xDLENBRGtDLEFBQW5DLElBQW1DOztBQTVCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBa0JBLEFBQUEsQUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBakJBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBa0JBLEFBQUEsQUFBQSxBQUFBLEFBbEJBLEFBa0JBLEFBbEJBLEFBQUEsQUF3QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNEZWVwT2JqZWN0LCB1bndyYXBEZWVwLCBmbGF0dGVuIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAnZmxhdHRlbicgfSlcclxuZXhwb3J0IGNsYXNzIEZsYXR0ZW5QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgaXNEZWVwID0gaXNEZWVwT2JqZWN0KGlucHV0KTtcclxuICAgIGlmICghaXNBcnJheShpbnB1dCkgJiYgIWlzRGVlcCkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzRGVlcCkge1xyXG4gICAgICBjb25zdCB1bndyYXBwZWQgPSB1bndyYXBEZWVwKGlucHV0KTtcclxuICAgICAgaWYgKCFpc0FycmF5KHVud3JhcHBlZCkpIHtcclxuICAgICAgICByZXR1cm4gdW53cmFwcGVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmxhdHRlbih1bndyYXBwZWQsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGlucHV0KTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbRmxhdHRlblBpcGVdLFxyXG4gIGV4cG9ydHM6IFtGbGF0dGVuUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0ZsYXR0ZW5QaXBlTW9kdWxlIHt9XHJcbiJdfQ==