import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var InitialPipe = /** @class */ (function () {
    function InitialPipe() {
    }
    InitialPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, input.length - 1);
    };
InitialPipe.ɵfac = function InitialPipe_Factory(t) { return new (t || InitialPipe)(); };
InitialPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "initial", type: InitialPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InitialPipe, [{
        type: Pipe,
        args: [{
                name: 'initial'
            }]
    }], function () { return []; }, null); })();
    return InitialPipe;
}());
export { InitialPipe };
var NgInitialPipeModule = /** @class */ (function () {
    function NgInitialPipeModule() {
    }
NgInitialPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgInitialPipeModule });
NgInitialPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgInitialPipeModule_Factory(t) { return new (t || NgInitialPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgInitialPipeModule, { declarations: [InitialPipe], exports: [InitialPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgInitialPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [InitialPipe],
                exports: [InitialPipe]
            }]
    }], function () { return []; }, null); })();
    return NgInitialPipeModule;
}());
export { NgInitialPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L2luaXRpYWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekM7QUFBK0MsSUFBL0M7QUFBeUIsSUFRekIsQ0FBQztBQUNELElBUkUsK0JBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztJQVBVLFdBQVcsZ0NBSHZCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxTQUFTO0dBQ2hCLENBQUMsUUFDVyxXQUFXLENBUXZCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGtCQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLFdBQVc7QUFjeEI7QUFDbUIsSUFEbkI7QUFBaUMsSUFBQyxDQUFDO0lBQXRCLG1CQUFtQixnQ0FKL0IsUUFBUSxDQUFDLGNBQ1I7T0FBWSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQzNCLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUN2QixDQUFDLFFBQ1csbUJBQW1CLENBQUc7Ozs7Ozs7O2dEQUNuQztBQUFDLElBRGlDLDBCQUFDO0FBQ2xDLENBRGtDLEFBQW5DLElBQW1DOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBUUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpbml0aWFsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEluaXRpYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIGlucHV0Lmxlbmd0aCAtIDEpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtJbml0aWFsUGlwZV0sXHJcbiAgZXhwb3J0czogW0luaXRpYWxQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nSW5pdGlhbFBpcGVNb2R1bGUge31cclxuIl19