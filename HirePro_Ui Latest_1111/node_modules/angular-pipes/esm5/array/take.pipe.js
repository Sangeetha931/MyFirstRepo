import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var TakePipe = /** @class */ (function () {
    function TakePipe() {
    }
    TakePipe.prototype.transform = function (input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, quantity || 1);
    };
TakePipe.ɵfac = function TakePipe_Factory(t) { return new (t || TakePipe)(); };
TakePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "take", type: TakePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakePipe, [{
        type: Pipe,
        args: [{
                name: 'take'
            }]
    }], function () { return []; }, null); })();
    return TakePipe;
}());
export { TakePipe };
var NgTakePipeModule = /** @class */ (function () {
    function NgTakePipeModule() {
    }
NgTakePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakePipeModule });
NgTakePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakePipeModule_Factory(t) { return new (t || NgTakePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakePipeModule, { declarations: [TakePipe], exports: [TakePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakePipe],
                exports: [TakePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTakePipeModule;
}());
export { NgTakePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFrZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3Rha2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekM7QUFBNEMsSUFBNUM7QUFBc0IsSUFRdEIsQ0FBQztBQUNELElBUkUsNEJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxRQUFpQjtBQUFJLFFBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN6QyxJQUFFLENBQUM7SUFQVSxRQUFRLGdDQUhwQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsTUFBTTtNQUNiLENBQUMsUUFDVyxRQUFRLENBUXBCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGVBQUM7QUFFRCxDQUZDLEFBUkQsSUFRQztBQUNELFNBVGEsUUFBUTtBQWNyQjtBQUNtQixJQURuQjtBQUE4QixJQUFDLENBQUM7SUFBbkIsZ0JBQWdCLGdDQUo1QixRQUFRLENBQUMsY0FDUjtVQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDeEIsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQ3BCLENBQUMsUUFDVyxnQkFBZ0IsQ0FBRzs7Ozs7Ozs7Z0RBQ2hDO0FBQUMsSUFEOEIsdUJBQUM7QUFDL0IsQ0FEK0IsQUFBaEMsSUFBZ0M7O0FBcEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3Rha2UnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFrZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcXVhbnRpdHk/OiBudW1iZXIpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIHF1YW50aXR5IHx8IDEpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtUYWtlUGlwZV0sXHJcbiAgZXhwb3J0czogW1Rha2VQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nVGFrZVBpcGVNb2R1bGUge31cclxuIl19