import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { shuffle } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var ShufflePipe = /** @class */ (function () {
    function ShufflePipe() {
    }
    ShufflePipe.prototype.transform = function (input) {
        return shuffle(input);
    };
ShufflePipe.ɵfac = function ShufflePipe_Factory(t) { return new (t || ShufflePipe)(); };
ShufflePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "shuffle", type: ShufflePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShufflePipe, [{
        type: Pipe,
        args: [{
                name: 'shuffle'
            }]
    }], function () { return []; }, null); })();
    return ShufflePipe;
}());
export { ShufflePipe };
var NgShufflePipeModule = /** @class */ (function () {
    function NgShufflePipeModule() {
    }
NgShufflePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgShufflePipeModule });
NgShufflePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgShufflePipeModule_Factory(t) { return new (t || NgShufflePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgShufflePipeModule, { declarations: [ShufflePipe], exports: [ShufflePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgShufflePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ShufflePipe],
                exports: [ShufflePipe]
            }]
    }], function () { return []; }, null); })();
    return NgShufflePipeModule;
}());
export { NgShufflePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3NodWZmbGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekM7QUFBK0MsSUFBL0M7QUFBeUIsSUFJekIsQ0FBQztBQUNELElBSkUsK0JBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFFLENBQUM7SUFIVSxXQUFXLGdDQUh2QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsU0FBUztHQUNoQixDQUFDLFFBQ1csV0FBVyxDQUl2Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxrQkFBQztBQUVELENBRkMsQUFKRCxJQUlDO0FBQ0QsU0FMYSxXQUFXO0FBVXhCO0FBQ21CLElBRG5CO0FBQWlDLElBQUMsQ0FBQztJQUF0QixtQkFBbUIsZ0NBSi9CLFFBQVEsQ0FBQyxjQUNSO09BQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FDdkIsQ0FBQyxRQUNXLG1CQUFtQixDQUFHOzs7Ozs7OztnREFDbkM7QUFBQyxJQURpQywwQkFBQztBQUNsQyxDQURrQyxBQUFuQyxJQUFtQzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBSUEsQUFKQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgc2h1ZmZsZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc2h1ZmZsZScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaHVmZmxlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIHJldHVybiBzaHVmZmxlKGlucHV0KTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU2h1ZmZsZVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtTaHVmZmxlUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1NodWZmbGVQaXBlTW9kdWxlIHt9XHJcbiJdfQ==