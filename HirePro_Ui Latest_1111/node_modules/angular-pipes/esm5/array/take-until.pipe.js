import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, takeUntil, isNil } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var TakeUntilPipe = /** @class */ (function () {
    function TakeUntilPipe() {
    }
    TakeUntilPipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeUntil(input, predicate);
    };
TakeUntilPipe.ɵfac = function TakeUntilPipe_Factory(t) { return new (t || TakeUntilPipe)(); };
TakeUntilPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "takeUntil", type: TakeUntilPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TakeUntilPipe, [{
        type: Pipe,
        args: [{
                name: 'takeUntil'
            }]
    }], function () { return []; }, null); })();
    return TakeUntilPipe;
}());
export { TakeUntilPipe };
var NgTakeUntilPipeModule = /** @class */ (function () {
    function NgTakeUntilPipeModule() {
    }
NgTakeUntilPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTakeUntilPipeModule });
NgTakeUntilPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTakeUntilPipeModule_Factory(t) { return new (t || NgTakeUntilPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTakeUntilPipeModule, { declarations: [TakeUntilPipe], exports: [TakeUntilPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTakeUntilPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TakeUntilPipe],
                exports: [TakeUntilPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTakeUntilPipeModule;
}());
export { NgTakeUntilPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFrZS11bnRpbC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3Rha2UtdW50aWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUF1QixLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLaEY7QUFBaUQsSUFBakQ7QUFBMkIsSUFRM0IsQ0FBQztBQUNELElBUkUsaUNBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxTQUErQjtBQUFJLFFBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQzdDLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztJQVBVLGFBQWEsZ0NBSHpCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxXQUFXO0NBQ2xCLENBQUMsUUFDVyxhQUFhLENBUXpCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLG9CQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLGFBQWE7QUFjMUI7QUFDbUIsSUFEbkI7QUFBbUMsSUFBQyxDQUFDO0lBQXhCLHFCQUFxQixnQ0FKakMsUUFBUSxDQUFDLGNBQ1I7S0FBWSxFQUFFLENBQUMsYUFBYSxDQUFDLGNBQzdCLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUN6QixDQUFDLFFBQ1cscUJBQXFCLENBQUc7Ozs7Ozs7O2dEQUNyQztBQUFDLElBRG1DLDRCQUFDO0FBQ3BDLENBRG9DLEFBQXJDLElBQXFDOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgdGFrZVVudGlsLCBDb2xsZWN0aW9uUHJlZGljYXRlLCBpc05pbCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndGFrZVVudGlsJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRha2VVbnRpbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJlZGljYXRlPzogQ29sbGVjdGlvblByZWRpY2F0ZSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpIHx8IGlzTmlsKHByZWRpY2F0ZSkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YWtlVW50aWwoaW5wdXQsIHByZWRpY2F0ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1Rha2VVbnRpbFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtUYWtlVW50aWxQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nVGFrZVVudGlsUGlwZU1vZHVsZSB7fVxyXG4iXX0=