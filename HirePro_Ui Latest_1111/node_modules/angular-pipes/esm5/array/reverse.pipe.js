import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var ReversePipe = /** @class */ (function () {
    function ReversePipe() {
    }
    ReversePipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return tslib_1.__spread(input).reverse();
    };
ReversePipe.ɵfac = function ReversePipe_Factory(t) { return new (t || ReversePipe)(); };
ReversePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "reverse", type: ReversePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReversePipe, [{
        type: Pipe,
        args: [{
                name: 'reverse'
            }]
    }], function () { return []; }, null); })();
    return ReversePipe;
}());
export { ReversePipe };
var NgReversePipeModule = /** @class */ (function () {
    function NgReversePipeModule() {
    }
NgReversePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReversePipeModule });
NgReversePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReversePipeModule_Factory(t) { return new (t || NgReversePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReversePipeModule, { declarations: [ReversePipe], exports: [ReversePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReversePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReversePipe],
                exports: [ReversePipe]
            }]
    }], function () { return []; }, null); })();
    return NgReversePipeModule;
}());
export { NgReversePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3JldmVyc2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekM7QUFBK0MsSUFBL0M7QUFBeUIsSUFRekIsQ0FBQztBQUNELElBUkUsK0JBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxpQkFBSSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDaEMsSUFBRSxDQUFDO0lBUFUsV0FBVyxnQ0FIdkIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFNBQVM7R0FDaEIsQ0FBQyxRQUNXLFdBQVcsQ0FRdkI7Ozs7OztnREFDRDtBQUNBLElBRkEsa0JBQUM7QUFFRCxDQUZDLEFBUkQsSUFRQztBQUNELFNBVGEsV0FBVztBQWN4QjtBQUNtQixJQURuQjtBQUFpQyxJQUFDLENBQUM7SUFBdEIsbUJBQW1CLGdDQUovQixRQUFRLENBQUMsY0FDUjtPQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FDM0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQ3ZCLENBQUMsUUFDVyxtQkFBbUIsQ0FBRzs7Ozs7Ozs7Z0RBQ25DO0FBQUMsSUFEaUMsMEJBQUM7QUFDbEMsQ0FEa0MsQUFBbkMsSUFBbUM7O0FBcEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdyZXZlcnNlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJldmVyc2VQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFsuLi5pbnB1dF0ucmV2ZXJzZSgpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSZXZlcnNlUGlwZV0sXHJcbiAgZXhwb3J0czogW1JldmVyc2VQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUmV2ZXJzZVBpcGVNb2R1bGUge31cclxuIl19