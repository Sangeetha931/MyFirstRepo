import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var RangePipe = /** @class */ (function () {
    function RangePipe() {
    }
    RangePipe.prototype.transform = function (_input, size, start, step) {
        if (size === void 0) { size = 0; }
        if (start === void 0) { start = 1; }
        if (step === void 0) { step = 1; }
        var range = [];
        for (var length_1 = 0; length_1 < size; ++length_1) {
            range.push(start);
            start += step;
        }
        return range;
    };
RangePipe.ɵfac = function RangePipe_Factory(t) { return new (t || RangePipe)(); };
RangePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "range", type: RangePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangePipe, [{
        type: Pipe,
        args: [{
                name: 'range'
            }]
    }], function () { return []; }, null); })();
    return RangePipe;
}());
export { RangePipe };
var NgRangePipeModule = /** @class */ (function () {
    function NgRangePipeModule() {
    }
NgRangePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRangePipeModule });
NgRangePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRangePipeModule_Factory(t) { return new (t || NgRangePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRangePipeModule, { declarations: [RangePipe], exports: [RangePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRangePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RangePipe],
                exports: [RangePipe]
            }]
    }], function () { return []; }, null); })();
    return NgRangePipeModule;
}());
export { NgRangePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9yYW5nZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlEO0FBQTZDLElBQTdDO0FBQXVCLElBVXZCLENBQUM7QUFDRCxJQVZFLDZCQUFTLEdBQVQsVUFBVSxNQUFXLEVBQUUsSUFBZ0IsRUFBRSxLQUFpQixFQUFFLElBQWdCO0FBQUksUUFBekQscUJBQUEsRUFBQSxRQUFnQjtBQUFJLFFBQUYsc0JBQUEsRUFBQSxTQUFpQjtBQUFJLFFBQUYscUJBQUEsRUFBQSxRQUFnQjtBQUFJLFFBQzlFLElBQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztBQUMvQixRQUFJLEtBQUssSUFBSSxRQUFNLEdBQUcsQ0FBQyxFQUFFLFFBQU0sR0FBRyxJQUFJLEVBQUUsRUFBRSxRQUFNLEVBQUU7QUFDbEQsWUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLFlBQU0sS0FBSyxJQUFJLElBQUksQ0FBQztBQUNwQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUM7SUFUVSxTQUFTLGdDQUhyQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsUUFDVyxTQUFTLENBVXJCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGdCQUFDO0FBRUQsQ0FGQyxBQVZELElBVUM7QUFDRCxTQVhhLFNBQVM7QUFnQnRCO0FBQ21CLElBRG5CO0FBQStCLElBQUMsQ0FBQztJQUFwQixpQkFBaUIsZ0NBSjdCLFFBQVEsQ0FBQyxjQUNSO1NBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FDckIsQ0FBQyxRQUNXLGlCQUFpQixDQUFHOzs7Ozs7OztnREFDakM7QUFBQyxJQUQrQix3QkFBQztBQUNoQyxDQURnQyxBQUFqQyxJQUFpQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBVUEsQUFBQSxBQVRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFWQSxBQVVBLEFBVkEsQUFBQSxBQWdCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdyYW5nZScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSYW5nZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oX2lucHV0OiBhbnksIHNpemU6IG51bWJlciA9IDAsIHN0YXJ0OiBudW1iZXIgPSAxLCBzdGVwOiBudW1iZXIgPSAxKTogYW55IHtcclxuICAgIGNvbnN0IHJhbmdlOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgbGVuZ3RoID0gMDsgbGVuZ3RoIDwgc2l6ZTsgKytsZW5ndGgpIHtcclxuICAgICAgcmFuZ2UucHVzaChzdGFydCk7XHJcbiAgICAgIHN0YXJ0ICs9IHN0ZXA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJhbmdlO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSYW5nZVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtSYW5nZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdSYW5nZVBpcGVNb2R1bGUge31cclxuIl19