import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray, getProperty } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var PluckPipe = /** @class */ (function () {
    function PluckPipe() {
    }
    PluckPipe.prototype.transform = function (input, key) {
        if (!isArray(input) || !key) {
            return input;
        }
        return input.map(function (value) {
            return getProperty(value, key);
        });
    };
PluckPipe.ɵfac = function PluckPipe_Factory(t) { return new (t || PluckPipe)(); };
PluckPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pluck", type: PluckPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PluckPipe, [{
        type: Pipe,
        args: [{
                name: 'pluck'
            }]
    }], function () { return []; }, null); })();
    return PluckPipe;
}());
export { PluckPipe };
var NgPluckPipeModule = /** @class */ (function () {
    function NgPluckPipeModule() {
    }
NgPluckPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPluckPipeModule });
NgPluckPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPluckPipeModule_Factory(t) { return new (t || NgPluckPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPluckPipeModule, { declarations: [PluckPipe], exports: [PluckPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPluckPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PluckPipe],
                exports: [PluckPipe]
            }]
    }], function () { return []; }, null); })();
    return NgPluckPipeModule;
}());
export { NgPluckPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Y2sucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9wbHVjay5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdEQ7QUFBNkMsSUFBN0M7QUFBdUIsSUFVdkIsQ0FBQztBQUNELElBVkUsNkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxHQUFXO0FBQUksUUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNqQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQVU7QUFBSSxZQUM5QixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztJQVRVLFNBQVMsZ0NBSHJCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxRQUNXLFNBQVMsQ0FVckI7Ozs7OztnREFDRDtBQUNBLElBRkEsZ0JBQUM7QUFFRCxDQUZDLEFBVkQsSUFVQztBQUNELFNBWGEsU0FBUztBQWdCdEI7QUFDbUIsSUFEbkI7QUFBK0IsSUFBQyxDQUFDO0lBQXBCLGlCQUFpQixnQ0FKN0IsUUFBUSxDQUFDLGNBQ1I7U0FBWSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUNyQixDQUFDLFFBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7O2dEQUNqQztBQUFDLElBRCtCLHdCQUFDO0FBQ2hDLENBRGdDLEFBQWpDLElBQWlDOztBQXRCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVVBLEFBQUEsQUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFWQSxBQVVBLEFBVkEsQUFBQSxBQWdCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBnZXRQcm9wZXJ0eSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncGx1Y2snLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGx1Y2tQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGtleTogc3RyaW5nKTogYW55IHtcclxuICAgIGlmICghaXNBcnJheShpbnB1dCkgfHwgIWtleSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0Lm1hcCgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICByZXR1cm4gZ2V0UHJvcGVydHkodmFsdWUsIGtleSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbUGx1Y2tQaXBlXSxcclxuICBleHBvcnRzOiBbUGx1Y2tQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUGx1Y2tQaXBlTW9kdWxlIHt9XHJcbiJdfQ==