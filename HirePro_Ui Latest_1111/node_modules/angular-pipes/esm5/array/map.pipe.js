import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var MapPipe = /** @class */ (function () {
    function MapPipe() {
    }
    MapPipe.prototype.transform = function (input, fn) {
        if (!isArray(input) || !fn) {
            return input;
        }
        return input.map(fn);
    };
MapPipe.ɵfac = function MapPipe_Factory(t) { return new (t || MapPipe)(); };
MapPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "map", type: MapPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MapPipe, [{
        type: Pipe,
        args: [{
                name: 'map'
            }]
    }], function () { return []; }, null); })();
    return MapPipe;
}());
export { MapPipe };
var NgMapPipeModule = /** @class */ (function () {
    function NgMapPipeModule() {
    }
NgMapPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMapPipeModule });
NgMapPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMapPipeModule_Factory(t) { return new (t || NgMapPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMapPipeModule, { declarations: [MapPipe], exports: [MapPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMapPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MapPipe],
                exports: [MapPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMapPipeModule;
}());
export { NgMapPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvYXJyYXkvbWFwLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3pDO0FBQTJDLElBQTNDO0FBQXFCLElBUXJCLENBQUM7QUFDRCxJQVJFLDJCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsRUFBWTtBQUFJLFFBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDaEMsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsSUFBRSxDQUFDO0lBUFUsT0FBTyxnQ0FIbkIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLEtBQUs7T0FDWixDQUFDLFFBQ1csT0FBTyxDQVFuQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxjQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLE9BQU87QUFjcEI7QUFDbUIsSUFEbkI7QUFBNkIsSUFBQyxDQUFDO0lBQWxCLGVBQWUsZ0NBSjNCLFFBQVEsQ0FBQyxjQUNSO1dBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUN2QixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FDbkIsQ0FBQyxRQUNXLGVBQWUsQ0FBRzs7Ozs7Ozs7Z0RBQy9CO0FBQUMsSUFENkIsc0JBQUM7QUFDOUIsQ0FEOEIsQUFBL0IsSUFBK0I7O0FBcEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdtYXAnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWFwUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBmbjogRnVuY3Rpb24pOiBhbnkge1xyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSB8fCAhZm4pIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnB1dC5tYXAoZm4pO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtNYXBQaXBlXSxcclxuICBleHBvcnRzOiBbTWFwUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ01hcFBpcGVNb2R1bGUge31cclxuIl19