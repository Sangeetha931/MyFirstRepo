import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var SomePipe = /** @class */ (function () {
    function SomePipe() {
    }
    SomePipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || !predicate) {
            return input;
        }
        var result = false;
        var i = -1;
        while (++i < input.length && !result) {
            result = predicate(input[i], i, input);
        }
        return result;
    };
SomePipe.ɵfac = function SomePipe_Factory(t) { return new (t || SomePipe)(); };
SomePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "some", type: SomePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SomePipe, [{
        type: Pipe,
        args: [{
                name: 'some'
            }]
    }], function () { return []; }, null); })();
    return SomePipe;
}());
export { SomePipe };
var NgSomePipeModule = /** @class */ (function () {
    function NgSomePipeModule() {
    }
NgSomePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSomePipeModule });
NgSomePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSomePipeModule_Factory(t) { return new (t || NgSomePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSomePipeModule, { declarations: [SomePipe], exports: [SomePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSomePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SomePipe],
                exports: [SomePipe]
            }]
    }], function () { return []; }, null); })();
    return NgSomePipeModule;
}());
export { NgSomePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29tZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL2FycmF5L3NvbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekM7QUFBNEMsSUFBNUM7QUFBc0IsSUFldEIsQ0FBQztBQUNELElBZkUsNEJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxTQUFtQjtBQUFJLFFBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDdkMsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdkIsUUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNmLFFBQ0ksT0FBTyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQzFDLFlBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdDLFNBQUs7QUFDTCxRQUNJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztJQWRVLFFBQVEsZ0NBSHBCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxNQUFNO01BQ2IsQ0FBQyxRQUNXLFFBQVEsQ0FlcEI7Ozs7OztnREFDRDtBQUNBLElBRkEsZUFBQztBQUVELENBRkMsQUFmRCxJQWVDO0FBQ0QsU0FoQmEsUUFBUTtBQXFCckI7QUFDbUIsSUFEbkI7QUFBOEIsSUFBQyxDQUFDO0lBQW5CLGdCQUFnQixnQ0FKNUIsUUFBUSxDQUFDLGNBQ1I7VUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3hCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUNwQixDQUFDLFFBQ1csZ0JBQWdCLENBQUc7Ozs7Ozs7O2dEQUNoQztBQUFDLElBRDhCLHVCQUFDO0FBQy9CLENBRCtCLEFBQWhDLElBQWdDOztBQTNCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBZUEsQUFBQSxBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBZEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFlQSxBQUFBLEFBQUEsQUFBQSxBQWZBLEFBZUEsQUFmQSxBQUFBLEFBcUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3NvbWUnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU29tZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJlZGljYXRlOiBGdW5jdGlvbik6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpIHx8ICFwcmVkaWNhdGUpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuICAgIGxldCBpID0gLTE7XHJcblxyXG4gICAgd2hpbGUgKCsraSA8IGlucHV0Lmxlbmd0aCAmJiAhcmVzdWx0KSB7XHJcbiAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZShpbnB1dFtpXSwgaSwgaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1NvbWVQaXBlXSxcclxuICBleHBvcnRzOiBbU29tZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTb21lUGlwZU1vZHVsZSB7fVxyXG4iXX0=