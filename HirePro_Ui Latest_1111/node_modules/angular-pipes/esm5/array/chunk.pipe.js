import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isArray } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var ChunkPipe = /** @class */ (function () {
    function ChunkPipe() {
    }
    ChunkPipe.prototype.transform = function (input, size) {
        if (size === void 0) { size = 1; }
        if (!isArray(input)) {
            return input;
        }
        return [].concat.apply([], input.map(function (_elem, i) {
            return i % size ? [] : [input.slice(i, i + size)];
        }));
    };
ChunkPipe.ɵfac = function ChunkPipe_Factory(t) { return new (t || ChunkPipe)(); };
ChunkPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "chunk", type: ChunkPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChunkPipe, [{
        type: Pipe,
        args: [{
                name: 'chunk'
            }]
    }], function () { return []; }, null); })();
    return ChunkPipe;
}());
export { ChunkPipe };
var NgChunkPipeModule = /** @class */ (function () {
    function NgChunkPipeModule() {
    }
NgChunkPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChunkPipeModule });
NgChunkPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgChunkPipeModule_Factory(t) { return new (t || NgChunkPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChunkPipeModule, { declarations: [ChunkPipe], exports: [ChunkPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChunkPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ChunkPipe],
                exports: [ChunkPipe]
            }]
    }], function () { return []; }, null); })();
    return NgChunkPipeModule;
}());
export { NgChunkPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmsucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9hcnJheS9jaHVuay5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt6QztBQUE2QyxJQUE3QztBQUF1QixJQWF2QixDQUFDO0FBQ0QsSUFiRSw2QkFBUyxHQUFULFVBQVUsS0FBVSxFQUFFLElBQWdCO0FBQUksUUFBcEIscUJBQUEsRUFBQSxRQUFnQjtBQUFJLFFBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNwQixFQUFFLEVBQ0YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQVUsRUFBRSxDQUFTO0FBQUksWUFDbEMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUQsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0lBWlUsU0FBUyxnQ0FIckIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLFFBQ1csU0FBUyxDQWFyQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxnQkFBQztBQUVELENBRkMsQUFiRCxJQWFDO0FBQ0QsU0FkYSxTQUFTO0FBbUJ0QjtBQUNtQixJQURuQjtBQUErQixJQUFDLENBQUM7SUFBcEIsaUJBQWlCLGdDQUo3QixRQUFRLENBQUMsY0FDUjtTQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FDekIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQ3JCLENBQUMsUUFDVyxpQkFBaUIsQ0FBRzs7Ozs7Ozs7Z0RBQ2pDO0FBQUMsSUFEK0Isd0JBQUM7QUFDaEMsQ0FEZ0MsQUFBakMsSUFBaUM7O0FBekJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFhQSxBQUFBLEFBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVpBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFiQSxBQWFBLEFBYkEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdjaHVuaycsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaHVua1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgc2l6ZTogbnVtYmVyID0gMSk6IGFueSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFxyXG4gICAgICBbXSxcclxuICAgICAgaW5wdXQubWFwKChfZWxlbTogYW55LCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgICByZXR1cm4gaSAlIHNpemUgPyBbXSA6IFtpbnB1dC5zbGljZShpLCBpICsgc2l6ZSldO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbQ2h1bmtQaXBlXSxcclxuICBleHBvcnRzOiBbQ2h1bmtQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nQ2h1bmtQaXBlTW9kdWxlIHt9XHJcbiJdfQ==