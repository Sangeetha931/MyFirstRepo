import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject, isArray, isNil } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var DefaultsPipe = /** @class */ (function () {
    function DefaultsPipe() {
    }
    DefaultsPipe.prototype.transform = function (input, defaults) {
        if (!isObject(defaults)) {
            return input;
        }
        if (isNil(input)) {
            return defaults;
        }
        if (isArray(input)) {
            return input.map(function (item) {
                if (isObject(item)) {
                    return Object.assign({}, defaults, item);
                }
                if (isNil(item)) {
                    return defaults;
                }
                return item;
            });
        }
        if (isObject(input)) {
            return Object.assign({}, defaults, input);
        }
        return input;
    };
DefaultsPipe.ɵfac = function DefaultsPipe_Factory(t) { return new (t || DefaultsPipe)(); };
DefaultsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "defaults", type: DefaultsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultsPipe, [{
        type: Pipe,
        args: [{ name: 'defaults' }]
    }], function () { return []; }, null); })();
    return DefaultsPipe;
}());
export { DefaultsPipe };
var NgDefaultsPipeModule = /** @class */ (function () {
    function NgDefaultsPipeModule() {
    }
NgDefaultsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDefaultsPipeModule });
NgDefaultsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDefaultsPipeModule_Factory(t) { return new (t || NgDefaultsPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDefaultsPipeModule, { declarations: [DefaultsPipe], exports: [DefaultsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgDefaultsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [DefaultsPipe],
                exports: [DefaultsPipe]
            }]
    }], function () { return []; }, null); })();
    return NgDefaultsPipeModule;
}());
export { NgDefaultsPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9vYmplY3QvZGVmYXVsdHMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUcxRDtBQUFnRCxJQUFoRDtBQUEwQixJQThCMUIsQ0FBQztBQUNELElBOUJFLGdDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsUUFBYTtBQUFJLFFBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDN0IsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN0QixZQUFNLE9BQU8sUUFBUSxDQUFDO0FBQ3RCLFNBQUs7QUFDTCxRQUNJLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hCLFlBQU0sT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBUztBQUFJLGdCQUM3QixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1QixvQkFBVSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRCxpQkFBUztBQUNULGdCQUNRLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3pCLG9CQUFVLE9BQU8sUUFBUSxDQUFDO0FBQzFCLGlCQUFTO0FBQ1QsZ0JBQ1EsT0FBTyxJQUFJLENBQUM7QUFDcEIsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxRQUNJLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUM7QUFDakIsSUFBRSxDQUFDO0lBN0JVLFlBQVksZ0NBRHhCLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxRQUNkO0VBQVksQ0E4QnhCOzs7O2dEQUNEO0FBQ0EsSUFGQSxtQkFBQztBQUVELENBRkMsQUE5QkQsSUE4QkM7QUFDRCxTQS9CYSxZQUFZO0FBb0N6QjtBQUNtQixJQURuQjtBQUFrQyxJQUFDLENBQUM7SUFBdkIsb0JBQW9CLGdDQUpoQyxRQUFRLENBQUMsY0FDUjtNQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FDNUIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQ3hCLENBQUMsUUFDVyxvQkFBb0IsQ0FBRzs7Ozs7Ozs7Z0RBQ3BDO0FBQUMsSUFEa0MsMkJBQUM7QUFDbkMsQ0FEbUMsQUFBcEMsSUFBb0M7O0FBeENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQThCQSxBQUFBLEFBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE3QkEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE4QkEsQUFBQSxBQUFBLEFBQUEsQUE5QkEsQUE4QkEsQUE5QkEsQUFBQSxBQW9DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc09iamVjdCwgaXNBcnJheSwgaXNOaWwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICdkZWZhdWx0cycgfSlcclxuZXhwb3J0IGNsYXNzIERlZmF1bHRzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBkZWZhdWx0czogYW55KTogYW55IHtcclxuICAgIGlmICghaXNPYmplY3QoZGVmYXVsdHMpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNOaWwoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBkZWZhdWx0cztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0Lm1hcCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIGl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzTmlsKGl0ZW0pKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIGlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQ7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0RlZmF1bHRzUGlwZV0sXHJcbiAgZXhwb3J0czogW0RlZmF1bHRzUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0RlZmF1bHRzUGlwZU1vZHVsZSB7fVxyXG4iXX0=