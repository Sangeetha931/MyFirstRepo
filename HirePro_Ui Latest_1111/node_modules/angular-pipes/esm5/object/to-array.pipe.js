import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var ToArrayPipe = /** @class */ (function () {
    function ToArrayPipe() {
    }
    ToArrayPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input).map(function (value) { return input[value]; });
    };
ToArrayPipe.ɵfac = function ToArrayPipe_Factory(t) { return new (t || ToArrayPipe)(); };
ToArrayPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "toArray", type: ToArrayPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToArrayPipe, [{
        type: Pipe,
        args: [{ name: 'toArray' }]
    }], function () { return []; }, null); })();
    return ToArrayPipe;
}());
export { ToArrayPipe };
var NgToArrayPipeModule = /** @class */ (function () {
    function NgToArrayPipeModule() {
    }
NgToArrayPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgToArrayPipeModule });
NgToArrayPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgToArrayPipeModule_Factory(t) { return new (t || NgToArrayPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgToArrayPipeModule, { declarations: [ToArrayPipe], exports: [ToArrayPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgToArrayPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ToArrayPipe],
                exports: [ToArrayPipe]
            }]
    }], function () { return []; }, null); })();
    return NgToArrayPipeModule;
}());
export { NgToArrayPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tYXJyYXkucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9vYmplY3QvdG8tYXJyYXkucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHMUM7QUFBK0MsSUFBL0M7QUFBeUIsSUFRekIsQ0FBQztBQUNELElBUkUsK0JBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBWixDQUFZLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7SUFQVSxXQUFXLGdDQUR2QixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsUUFDYjtFQUFXLENBUXZCOzs7O2dEQUNEO0FBQ0EsSUFGQSxrQkFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxXQUFXO0FBY3hCO0FBQ21CLElBRG5CO0FBQWlDLElBQUMsQ0FBQztJQUF0QixtQkFBbUIsZ0NBSi9CLFFBQVEsQ0FBQyxjQUNSO09BQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FDdkIsQ0FBQyxRQUNXLG1CQUFtQixDQUFHOzs7Ozs7OztnREFDbkM7QUFBQyxJQURpQywwQkFBQztBQUNsQyxDQURrQyxBQUFuQyxJQUFtQzs7QUFsQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAndG9BcnJheScgfSlcclxuZXhwb3J0IGNsYXNzIFRvQXJyYXlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc09iamVjdChpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnB1dCkubWFwKHZhbHVlID0+IGlucHV0W3ZhbHVlXSk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1RvQXJyYXlQaXBlXSxcclxuICBleHBvcnRzOiBbVG9BcnJheVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdUb0FycmF5UGlwZU1vZHVsZSB7fVxyXG4iXX0=