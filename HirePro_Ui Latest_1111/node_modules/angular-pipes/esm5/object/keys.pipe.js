import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isObject } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input);
    };
KeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };
KeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: KeysPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{
        type: Pipe,
        args: [{ name: 'keys' }]
    }], function () { return []; }, null); })();
    return KeysPipe;
}());
export { KeysPipe };
var NgKeysPipeModule = /** @class */ (function () {
    function NgKeysPipeModule() {
    }
NgKeysPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgKeysPipeModule });
NgKeysPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgKeysPipeModule_Factory(t) { return new (t || NgKeysPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgKeysPipeModule, { declarations: [KeysPipe], exports: [KeysPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgKeysPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [KeysPipe],
                exports: [KeysPipe]
            }]
    }], function () { return []; }, null); })();
    return NgKeysPipeModule;
}());
export { NgKeysPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL29iamVjdC9rZXlzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDO0FBQTRDLElBQTVDO0FBQXNCLElBUXRCLENBQUM7QUFDRCxJQVJFLDRCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixJQUFFLENBQUM7SUFQVSxRQUFRLGdDQURwQixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFDVjtFQUFRLENBUXBCOzs7O2dEQUNEO0FBQ0EsSUFGQSxlQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLFFBQVE7QUFjckI7QUFDbUIsSUFEbkI7QUFBOEIsSUFBQyxDQUFDO0lBQW5CLGdCQUFnQixnQ0FKNUIsUUFBUSxDQUFDLGNBQ1I7VUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3hCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUNwQixDQUFDLFFBQ1csZ0JBQWdCLENBQUc7Ozs7Ozs7O2dEQUNoQztBQUFDLElBRDhCLHVCQUFDO0FBQy9CLENBRCtCLEFBQWhDLElBQWdDOztBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBUUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ2tleXMnIH0pXHJcbmV4cG9ydCBjbGFzcyBLZXlzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNPYmplY3QoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtLZXlzUGlwZV0sXHJcbiAgZXhwb3J0czogW0tleXNQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nS2V5c1BpcGVNb2R1bGUge31cclxuIl19