import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var MatchPipe = /** @class */ (function () {
    function MatchPipe() {
    }
    MatchPipe.prototype.transform = function (input, pattern, flag) {
        if (!isString(input)) {
            return input;
        }
        var regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return input.match(regexp);
    };
MatchPipe.ɵfac = function MatchPipe_Factory(t) { return new (t || MatchPipe)(); };
MatchPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "match", type: MatchPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatchPipe, [{
        type: Pipe,
        args: [{
                name: 'match'
            }]
    }], function () { return []; }, null); })();
    return MatchPipe;
}());
export { MatchPipe };
var NgMatchPipeModule = /** @class */ (function () {
    function NgMatchPipeModule() {
    }
NgMatchPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMatchPipeModule });
NgMatchPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMatchPipeModule_Factory(t) { return new (t || NgMatchPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMatchPipeModule, { declarations: [MatchPipe], exports: [MatchPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMatchPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [MatchPipe],
                exports: [MatchPipe]
            }]
    }], function () { return []; }, null); })();
    return NgMatchPipeModule;
}());
export { NgMatchPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0Y2gucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvbWF0Y2gucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBNkMsSUFBN0M7QUFBdUIsSUFTdkIsQ0FBQztBQUNELElBVEUsNkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxPQUFZLEVBQUUsSUFBUztBQUFJLFFBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxJQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRixRQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixJQUFFLENBQUM7SUFSVSxTQUFTLGdDQUhyQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsUUFDVyxTQUFTLENBU3JCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGdCQUFDO0FBRUQsQ0FGQyxBQVRELElBU0M7QUFDRCxTQVZhLFNBQVM7QUFldEI7QUFDbUIsSUFEbkI7QUFBK0IsSUFBQyxDQUFDO0lBQXBCLGlCQUFpQixnQ0FKN0IsUUFBUSxDQUFDLGNBQ1I7U0FBWSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQ3pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUNyQixDQUFDLFFBQ1csaUJBQWlCLENBQUc7Ozs7Ozs7O2dEQUNqQztBQUFDLElBRCtCLHdCQUFDO0FBQ2hDLENBRGdDLEFBQWpDLElBQWlDOztBQXJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBU0EsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQVRBLEFBU0EsQUFUQSxBQUFBLEFBZUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ21hdGNoJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdGNoUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBwYXR0ZXJuOiBhbnksIGZsYWc6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVnZXhwID0gcGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCA/IHBhdHRlcm4gOiBuZXcgUmVnRXhwKHBhdHRlcm4sIGZsYWcpO1xyXG4gICAgcmV0dXJuIGlucHV0Lm1hdGNoKHJlZ2V4cCk7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW01hdGNoUGlwZV0sXHJcbiAgZXhwb3J0czogW01hdGNoUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ01hdGNoUGlwZU1vZHVsZSB7fVxyXG4iXX0=