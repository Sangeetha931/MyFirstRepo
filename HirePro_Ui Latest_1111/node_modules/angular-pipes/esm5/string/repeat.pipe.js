import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var RepeatPipe = /** @class */ (function () {
    function RepeatPipe() {
    }
    RepeatPipe.prototype.transform = function (input, times, characters) {
        if (times === void 0) { times = 1; }
        if (characters === void 0) { characters = ''; }
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        var repeated = [input];
        for (var i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    };
RepeatPipe.ɵfac = function RepeatPipe_Factory(t) { return new (t || RepeatPipe)(); };
RepeatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "repeat", type: RepeatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RepeatPipe, [{
        type: Pipe,
        args: [{
                name: 'repeat'
            }]
    }], function () { return []; }, null); })();
    return RepeatPipe;
}());
export { RepeatPipe };
var NgRepeatPipeModule = /** @class */ (function () {
    function NgRepeatPipeModule() {
    }
NgRepeatPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRepeatPipeModule });
NgRepeatPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRepeatPipeModule_Factory(t) { return new (t || NgRepeatPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRepeatPipeModule, { declarations: [RepeatPipe], exports: [RepeatPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRepeatPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RepeatPipe],
                exports: [RepeatPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRepeatPipeModule;
}());
export { NgRepeatPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvc3RyaW5nL3JlcGVhdC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUsxQztBQUE4QyxJQUE5QztBQUF3QixJQWlCeEIsQ0FBQztBQUNELElBakJFLDhCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsS0FBaUIsRUFBRSxVQUF1QjtBQUFJLFFBQTlDLHNCQUFBLEVBQUEsU0FBaUI7QUFBSSxRQUFGLDJCQUFBLEVBQUEsZUFBdUI7QUFBSSxRQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO0FBQ3BCLFlBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixTQUFLO0FBQ0wsUUFDSSxJQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLFFBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNwQyxZQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0IsU0FBSztBQUNMLFFBQ0ksT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLElBQUUsQ0FBQztJQWhCVSxVQUFVLGdDQUh0QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsUUFBUTtJQUNmLENBQUMsUUFDVyxVQUFVLENBaUJ0Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxpQkFBQztBQUVELENBRkMsQUFqQkQsSUFpQkM7QUFDRCxTQWxCYSxVQUFVO0FBdUJ2QjtBQUNtQixJQURuQjtBQUFnQyxJQUFDLENBQUM7SUFBckIsa0JBQWtCLGdDQUo5QixRQUFRLENBQUMsY0FDUjtRQUFZLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FDMUIsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQ3RCLENBQUMsUUFDVyxrQkFBa0IsQ0FBRzs7Ozs7Ozs7Z0RBQ2xDO0FBQUMsSUFEZ0MseUJBQUM7QUFDakMsQ0FEaUMsQUFBbEMsSUFBa0M7O0FBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFpQkEsQUFBQSxBQWhCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFoQkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFpQkEsQUFBQSxBQUFBLEFBQUEsQUFqQkEsQUFpQkEsQUFqQkEsQUFBQSxBQXVCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncmVwZWF0JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlcGVhdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgdGltZXM6IG51bWJlciA9IDEsIGNoYXJhY3RlcnM6IHN0cmluZyA9ICcnKTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGltZXMgPD0gMCkge1xyXG4gICAgICB0aW1lcyA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVwZWF0ZWQgPSBbaW5wdXRdO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aW1lczsgKytpKSB7XHJcbiAgICAgIHJlcGVhdGVkLnB1c2goaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXBlYXRlZC5qb2luKGNoYXJhY3RlcnMpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSZXBlYXRQaXBlXSxcclxuICBleHBvcnRzOiBbUmVwZWF0UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1JlcGVhdFBpcGVNb2R1bGUge31cclxuIl19