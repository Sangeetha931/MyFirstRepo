import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var SplitPipe = /** @class */ (function () {
    function SplitPipe() {
    }
    SplitPipe.prototype.transform = function (input, separator, limit) {
        if (separator === void 0) { separator = ' '; }
        if (!isString(input)) {
            return input;
        }
        return input.split(separator, limit);
    };
SplitPipe.ɵfac = function SplitPipe_Factory(t) { return new (t || SplitPipe)(); };
SplitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "split", type: SplitPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitPipe, [{
        type: Pipe,
        args: [{
                name: 'split'
            }]
    }], function () { return []; }, null); })();
    return SplitPipe;
}());
export { SplitPipe };
var NgSplitPipeModule = /** @class */ (function () {
    function NgSplitPipeModule() {
    }
NgSplitPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSplitPipeModule });
NgSplitPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSplitPipeModule_Factory(t) { return new (t || NgSplitPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSplitPipeModule, { declarations: [SplitPipe], exports: [SplitPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSplitPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SplitPipe],
                exports: [SplitPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSplitPipeModule;
}());
export { NgSplitPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvc3BsaXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBNkMsSUFBN0M7QUFBdUIsSUFRdkIsQ0FBQztBQUNELElBUkUsNkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxTQUF1QixFQUFFLEtBQWM7QUFBSSxRQUEzQywwQkFBQSxFQUFBLGVBQXVCO0FBQUksUUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekMsSUFBRSxDQUFDO0lBUFUsU0FBUyxnQ0FIckIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLFFBQ1csU0FBUyxDQVFyQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxnQkFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxTQUFTO0FBY3RCO0FBQ21CLElBRG5CO0FBQStCLElBQUMsQ0FBQztJQUFwQixpQkFBaUIsZ0NBSjdCLFFBQVEsQ0FBQyxjQUNSO1NBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FDckIsQ0FBQyxRQUNXLGlCQUFpQixDQUFHOzs7Ozs7OztnREFDakM7QUFBQyxJQUQrQix3QkFBQztBQUNoQyxDQURnQyxBQUFqQyxJQUFpQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc3BsaXQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU3BsaXRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHNlcGFyYXRvcjogc3RyaW5nID0gJyAnLCBsaW1pdD86IG51bWJlcik6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTcGxpdFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtTcGxpdFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTcGxpdFBpcGVNb2R1bGUge31cclxuIl19