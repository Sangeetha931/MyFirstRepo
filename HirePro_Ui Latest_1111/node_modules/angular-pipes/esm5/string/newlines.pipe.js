import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var NewlinesPipe = /** @class */ (function () {
    function NewlinesPipe() {
    }
    NewlinesPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
    };
NewlinesPipe.ɵfac = function NewlinesPipe_Factory(t) { return new (t || NewlinesPipe)(); };
NewlinesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "newlines", type: NewlinesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NewlinesPipe, [{
        type: Pipe,
        args: [{
                name: 'newlines'
            }]
    }], function () { return []; }, null); })();
    return NewlinesPipe;
}());
export { NewlinesPipe };
var NgNewlinesPipeModule = /** @class */ (function () {
    function NgNewlinesPipeModule() {
    }
NgNewlinesPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgNewlinesPipeModule });
NgNewlinesPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgNewlinesPipeModule_Factory(t) { return new (t || NgNewlinesPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgNewlinesPipeModule, { declarations: [NewlinesPipe], exports: [NewlinesPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNewlinesPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [NewlinesPipe],
                exports: [NewlinesPipe]
            }]
    }], function () { return []; }, null); })();
    return NgNewlinesPipeModule;
}());
export { NgNewlinesPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3bGluZXMucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvbmV3bGluZXMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFRMUIsQ0FBQztBQUNELElBUkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3RELElBQUUsQ0FBQztJQVBVLFlBQVksZ0NBSHhCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxVQUFVO0VBQ2pCLENBQUMsUUFDVyxZQUFZLENBUXhCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLG1CQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLFlBQVk7QUFjekI7QUFDbUIsSUFEbkI7QUFBa0MsSUFBQyxDQUFDO0lBQXZCLG9CQUFvQixnQ0FKaEMsUUFBUSxDQUFDLGNBQ1I7TUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQzVCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUN4QixDQUFDLFFBQ1csb0JBQW9CLENBQUc7Ozs7Ozs7O2dEQUNwQztBQUFDLElBRGtDLDJCQUFDO0FBQ25DLENBRG1DLEFBQXBDLElBQW9DOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBUUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ25ld2xpbmVzJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5ld2xpbmVzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csICc8YnIgLz4nKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbTmV3bGluZXNQaXBlXSxcclxuICBleHBvcnRzOiBbTmV3bGluZXNQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nTmV3bGluZXNQaXBlTW9kdWxlIHt9XHJcbiJdfQ==