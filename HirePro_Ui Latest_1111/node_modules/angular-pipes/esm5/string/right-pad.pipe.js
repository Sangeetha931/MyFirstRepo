import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { rightPad, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var RightPadPipe = /** @class */ (function () {
    function RightPadPipe() {
    }
    RightPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return rightPad(input, length, character);
    };
RightPadPipe.ɵfac = function RightPadPipe_Factory(t) { return new (t || RightPadPipe)(); };
RightPadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "rightpad", type: RightPadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RightPadPipe, [{
        type: Pipe,
        args: [{
                name: 'rightpad'
            }]
    }], function () { return []; }, null); })();
    return RightPadPipe;
}());
export { RightPadPipe };
var NgRightPadPipeModule = /** @class */ (function () {
    function NgRightPadPipeModule() {
    }
NgRightPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgRightPadPipeModule });
NgRightPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgRightPadPipeModule_Factory(t) { return new (t || NgRightPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgRightPadPipeModule, { declarations: [RightPadPipe], exports: [RightPadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgRightPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [RightPadPipe],
                exports: [RightPadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgRightPadPipeModule;
}());
export { NgRightPadPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlnaHQtcGFkLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvc3RyaW5nL3JpZ2h0LXBhZC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLcEQ7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFRMUIsQ0FBQztBQUNELElBUkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxNQUFrQixFQUFFLFNBQXVCO0FBQUksUUFBL0MsdUJBQUEsRUFBQSxVQUFrQjtBQUFJLFFBQUYsMEJBQUEsRUFBQSxlQUF1QjtBQUFJLFFBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLElBQUUsQ0FBQztJQVBVLFlBQVksZ0NBSHhCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxVQUFVO0VBQ2pCLENBQUMsUUFDVyxZQUFZLENBUXhCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLG1CQUFDO0FBRUQsQ0FGQyxBQVJELElBUUM7QUFDRCxTQVRhLFlBQVk7QUFjekI7QUFDbUIsSUFEbkI7QUFBa0MsSUFBQyxDQUFDO0lBQXZCLG9CQUFvQixnQ0FKaEMsUUFBUSxDQUFDLGNBQ1I7TUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQzVCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUN4QixDQUFDLFFBQ1csb0JBQW9CLENBQUc7Ozs7Ozs7O2dEQUNwQztBQUFDLElBRGtDLDJCQUFDO0FBQ25DLENBRG1DLEFBQXBDLElBQW9DOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHJpZ2h0UGFkLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAncmlnaHRwYWQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmlnaHRQYWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGxlbmd0aDogbnVtYmVyID0gMCwgY2hhcmFjdGVyOiBzdHJpbmcgPSAnICcpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByaWdodFBhZChpbnB1dCwgbGVuZ3RoLCBjaGFyYWN0ZXIpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSaWdodFBhZFBpcGVdLFxyXG4gIGV4cG9ydHM6IFtSaWdodFBhZFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdSaWdodFBhZFBpcGVNb2R1bGUge31cclxuIl19