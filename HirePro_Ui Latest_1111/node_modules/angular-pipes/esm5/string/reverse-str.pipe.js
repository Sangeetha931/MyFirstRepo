import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var ReverseStrPipe = /** @class */ (function () {
    function ReverseStrPipe() {
    }
    ReverseStrPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return Array.from(input)
            .reverse()
            .join('');
    };
ReverseStrPipe.ɵfac = function ReverseStrPipe_Factory(t) { return new (t || ReverseStrPipe)(); };
ReverseStrPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "reverseStr", type: ReverseStrPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReverseStrPipe, [{
        type: Pipe,
        args: [{
                name: 'reverseStr'
            }]
    }], function () { return []; }, null); })();
    return ReverseStrPipe;
}());
export { ReverseStrPipe };
var NgReverseStrPipeModule = /** @class */ (function () {
    function NgReverseStrPipeModule() {
    }
NgReverseStrPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgReverseStrPipeModule });
NgReverseStrPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgReverseStrPipeModule_Factory(t) { return new (t || NgReverseStrPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgReverseStrPipeModule, { declarations: [ReverseStrPipe], exports: [ReverseStrPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgReverseStrPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [ReverseStrPipe],
                exports: [ReverseStrPipe]
            }]
    }], function () { return []; }, null); })();
    return NgReverseStrPipeModule;
}());
export { NgReverseStrPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZS1zdHIucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvcmV2ZXJzZS1zdHIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBa0QsSUFBbEQ7QUFBNEIsSUFVNUIsQ0FBQztBQUNELElBVkUsa0NBQVMsR0FBVCxVQUFVLEtBQWE7QUFBSSxRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUM1QixhQUFPLE9BQU8sRUFBRTtBQUNoQixhQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQixJQUFFLENBQUM7SUFUVSxjQUFjLGdDQUgxQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsWUFBWTtBQUNuQixDQUFDLFFBQ1csY0FBYyxDQVUxQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxxQkFBQztBQUVELENBRkMsQUFWRCxJQVVDO0FBQ0QsU0FYYSxjQUFjO0FBZ0IzQjtBQUNtQixJQURuQjtBQUFvQyxJQUFDLENBQUM7SUFBekIsc0JBQXNCLGdDQUpsQyxRQUFRLENBQUMsY0FDUjtJQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUMsY0FDOUIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLFdBQzFCLENBQUMsUUFDVyxzQkFBc0IsQ0FBRzs7Ozs7Ozs7Z0RBQ3RDO0FBQUMsSUFEb0MsNkJBQUM7QUFDckMsQ0FEcUMsQUFBdEMsSUFBc0M7O0FBdEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFVQSxBQUFBLEFBVEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFUQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBVkEsQUFVQSxBQVZBLEFBQUEsQUFnQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3JldmVyc2VTdHInLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmV2ZXJzZVN0clBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oaW5wdXQpXHJcbiAgICAgIC5yZXZlcnNlKClcclxuICAgICAgLmpvaW4oJycpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtSZXZlcnNlU3RyUGlwZV0sXHJcbiAgZXhwb3J0czogW1JldmVyc2VTdHJQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUmV2ZXJzZVN0clBpcGVNb2R1bGUge31cclxuIl19