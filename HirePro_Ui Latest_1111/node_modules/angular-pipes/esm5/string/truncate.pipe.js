// Inspired from https://github.com/a8m/angular-filter/blob/master/src/_filter/string/truncate.js
import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var TruncatePipe = /** @class */ (function () {
    function TruncatePipe() {
    }
    TruncatePipe.prototype.transform = function (input, length, suffix, preserve) {
        if (!isString(input)) {
            return input;
        }
        length = isUndefined(length) ? input.length : length;
        if (input.length <= length) {
            return input;
        }
        preserve = preserve || false;
        suffix = suffix || '';
        var index = length;
        if (preserve) {
            if (input.indexOf(' ', length) === -1) {
                index = input.length;
            }
            else {
                index = input.indexOf(' ', length);
            }
        }
        return input.substring(0, index) + suffix;
    };
TruncatePipe.ɵfac = function TruncatePipe_Factory(t) { return new (t || TruncatePipe)(); };
TruncatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "truncate", type: TruncatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TruncatePipe, [{
        type: Pipe,
        args: [{
                name: 'truncate'
            }]
    }], function () { return []; }, null); })();
    return TruncatePipe;
}());
export { TruncatePipe };
var NgTruncatePipeModule = /** @class */ (function () {
    function NgTruncatePipeModule() {
    }
NgTruncatePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTruncatePipeModule });
NgTruncatePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTruncatePipeModule_Factory(t) { return new (t || NgTruncatePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTruncatePipeModule, { declarations: [TruncatePipe], exports: [TruncatePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTruncatePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TruncatePipe],
                exports: [TruncatePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTruncatePipeModule;
}());
export { NgTruncatePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1bmNhdGUucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvdHJ1bmNhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpR0FBaUc7QUFDakc7QUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdkQ7QUFBZ0QsSUFBaEQ7QUFBMEIsSUEwQjFCLENBQUM7QUFDRCxJQTFCRSxnQ0FBUyxHQUFULFVBQVUsS0FBVSxFQUFFLE1BQWUsRUFBRSxNQUFlLEVBQUUsUUFBa0I7QUFBSSxRQUM1RSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3pELFFBQ0ksSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUNoQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLFFBQVEsR0FBRyxRQUFRLElBQUksS0FBSyxDQUFDO0FBQ2pDLFFBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDMUIsUUFBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDdkIsUUFDSSxJQUFJLFFBQVEsRUFBRTtBQUNsQixZQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDN0MsZ0JBQVEsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDN0IsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFDSSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUM5QyxJQUFFLENBQUM7SUF6QlUsWUFBWSxnQ0FIeEIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFVBQVU7RUFDakIsQ0FBQyxRQUNXLFlBQVksQ0EwQnhCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLG1CQUFDO0FBRUQsQ0FGQyxBQTFCRCxJQTBCQztBQUNELFNBM0JhLFlBQVk7QUFnQ3pCO0FBQ21CLElBRG5CO0FBQWtDLElBQUMsQ0FBQztJQUF2QixvQkFBb0IsZ0NBSmhDLFFBQVEsQ0FBQyxjQUNSO01BQVksRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUM1QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FDeEIsQ0FBQyxRQUNXLG9CQUFvQixDQUFHOzs7Ozs7OztnREFDcEM7QUFBQyxJQURrQywyQkFBQztBQUNuQyxDQURtQyxBQUFwQyxJQUFvQzs7QUF4Q0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBMEJBLEFBQUEsQUF6QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXpCQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTBCQSxBQUFBLEFBQUEsQUFBQSxBQTFCQSxBQTBCQSxBQTFCQSxBQUFBLEFBZ0NBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEluc3BpcmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2E4bS9hbmd1bGFyLWZpbHRlci9ibG9iL21hc3Rlci9zcmMvX2ZpbHRlci9zdHJpbmcvdHJ1bmNhdGUuanNcclxuXHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndHJ1bmNhdGUnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJ1bmNhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGxlbmd0aD86IG51bWJlciwgc3VmZml4Pzogc3RyaW5nLCBwcmVzZXJ2ZT86IGJvb2xlYW4pOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGxlbmd0aCA9IGlzVW5kZWZpbmVkKGxlbmd0aCkgPyBpbnB1dC5sZW5ndGggOiBsZW5ndGg7XHJcblxyXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSBsZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHByZXNlcnZlID0gcHJlc2VydmUgfHwgZmFsc2U7XHJcbiAgICBzdWZmaXggPSBzdWZmaXggfHwgJyc7XHJcbiAgICBsZXQgaW5kZXggPSBsZW5ndGg7XHJcblxyXG4gICAgaWYgKHByZXNlcnZlKSB7XHJcbiAgICAgIGlmIChpbnB1dC5pbmRleE9mKCcgJywgbGVuZ3RoKSA9PT0gLTEpIHtcclxuICAgICAgICBpbmRleCA9IGlucHV0Lmxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbmRleCA9IGlucHV0LmluZGV4T2YoJyAnLCBsZW5ndGgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCBpbmRleCkgKyBzdWZmaXg7XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1RydW5jYXRlUGlwZV0sXHJcbiAgZXhwb3J0czogW1RydW5jYXRlUGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1RydW5jYXRlUGlwZU1vZHVsZSB7fVxyXG4iXX0=