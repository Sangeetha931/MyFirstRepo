import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var EncodeURIComponentPipe = /** @class */ (function () {
    function EncodeURIComponentPipe() {
    }
    EncodeURIComponentPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURIComponent(input);
    };
EncodeURIComponentPipe.ɵfac = function EncodeURIComponentPipe_Factory(t) { return new (t || EncodeURIComponentPipe)(); };
EncodeURIComponentPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "encodeURIComponent", type: EncodeURIComponentPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EncodeURIComponentPipe, [{
        type: Pipe,
        args: [{
                name: 'encodeURIComponent'
            }]
    }], function () { return []; }, null); })();
    return EncodeURIComponentPipe;
}());
export { EncodeURIComponentPipe };
var NgEncodeURIComponentPipeModule = /** @class */ (function () {
    function NgEncodeURIComponentPipeModule() {
    }
NgEncodeURIComponentPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgEncodeURIComponentPipeModule });
NgEncodeURIComponentPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgEncodeURIComponentPipeModule_Factory(t) { return new (t || NgEncodeURIComponentPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgEncodeURIComponentPipeModule, { declarations: [EncodeURIComponentPipe], exports: [EncodeURIComponentPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgEncodeURIComponentPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [EncodeURIComponentPipe],
                exports: [EncodeURIComponentPipe]
            }]
    }], function () { return []; }, null); })();
    return NgEncodeURIComponentPipeModule;
}());
export { NgEncodeURIComponentPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLXVyaS1jb21wb25lbnQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvZW5jb2RlLXVyaS1jb21wb25lbnQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBMEQsSUFBMUQ7QUFBb0MsSUFRcEMsQ0FBQztBQUNELElBUkUsMENBQVMsR0FBVCxVQUFVLEtBQVU7QUFDdEIsUUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxJQUFFLENBQUM7SUFQVSxzQkFBc0IsZ0NBSGxDLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxvQkFBb0IsV0FDM0IsQ0FBQztDQUNXLHNCQUFzQixDQVFsQzs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSw2QkFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxzQkFBc0I7QUFjbkM7QUFDbUIsSUFEbkI7QUFBNEMsSUFBQyxDQUFDO0lBQWpDLDhCQUE4QixnQ0FKMUMsUUFBUSxDQUFDLGNBQ1IsWUFBWSxFQUFFLENBQUM7cUJBQXNCLENBQUMsY0FDdEMsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUMsV0FDbEMsQ0FBQyxRQUNXLDhCQUE4QixDQUFHOzs7Ozs7OztnREFDOUM7QUFBQyxJQUQ0QyxxQ0FBQztBQUM3QyxDQUQ2QyxBQUE5QyxJQUE4Qzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZW5jb2RlVVJJQ29tcG9uZW50JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEVuY29kZVVSSUNvbXBvbmVudFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtFbmNvZGVVUklDb21wb25lbnRQaXBlXSxcclxuICBleHBvcnRzOiBbRW5jb2RlVVJJQ29tcG9uZW50UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0VuY29kZVVSSUNvbXBvbmVudFBpcGVNb2R1bGUge31cclxuIl19