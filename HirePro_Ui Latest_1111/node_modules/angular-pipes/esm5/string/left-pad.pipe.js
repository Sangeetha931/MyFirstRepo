import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { leftPad, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var LeftPadPipe = /** @class */ (function () {
    function LeftPadPipe() {
    }
    LeftPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return leftPad(input, length, character);
    };
LeftPadPipe.ɵfac = function LeftPadPipe_Factory(t) { return new (t || LeftPadPipe)(); };
LeftPadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "leftpad", type: LeftPadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LeftPadPipe, [{
        type: Pipe,
        args: [{
                name: 'leftpad'
            }]
    }], function () { return []; }, null); })();
    return LeftPadPipe;
}());
export { LeftPadPipe };
var NgLeftPadPipeModule = /** @class */ (function () {
    function NgLeftPadPipeModule() {
    }
NgLeftPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgLeftPadPipeModule });
NgLeftPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgLeftPadPipeModule_Factory(t) { return new (t || NgLeftPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgLeftPadPipeModule, { declarations: [LeftPadPipe], exports: [LeftPadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgLeftPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [LeftPadPipe],
                exports: [LeftPadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgLeftPadPipeModule;
}());
export { NgLeftPadPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVmdC1wYWQucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvbGVmdC1wYWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS25EO0FBQStDLElBQS9DO0FBQXlCLElBUXpCLENBQUM7QUFDRCxJQVJFLCtCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBa0IsRUFBRSxTQUF1QjtBQUFJLFFBQS9DLHVCQUFBLEVBQUEsVUFBa0I7QUFBSSxRQUFGLDBCQUFBLEVBQUEsZUFBdUI7QUFBSSxRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQ0ksT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3QyxJQUFFLENBQUM7SUFQVSxXQUFXLGdDQUh2QixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsU0FBUztHQUNoQixDQUFDLFFBQ1csV0FBVyxDQVF2Qjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxrQkFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxXQUFXO0FBY3hCO0FBQ21CLElBRG5CO0FBQWlDLElBQUMsQ0FBQztJQUF0QixtQkFBbUIsZ0NBSi9CLFFBQVEsQ0FBQyxjQUNSO09BQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FDdkIsQ0FBQyxRQUNXLG1CQUFtQixDQUFHOzs7Ozs7OztnREFDbkM7QUFBQyxJQURpQywwQkFBQztBQUNsQyxDQURrQyxBQUFuQyxJQUFtQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBsZWZ0UGFkLCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbGVmdHBhZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMZWZ0UGFkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBsZW5ndGg6IG51bWJlciA9IDAsIGNoYXJhY3Rlcjogc3RyaW5nID0gJyAnKTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGVmdFBhZChpbnB1dCwgbGVuZ3RoLCBjaGFyYWN0ZXIpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtMZWZ0UGFkUGlwZV0sXHJcbiAgZXhwb3J0czogW0xlZnRQYWRQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nTGVmdFBhZFBpcGVNb2R1bGUge31cclxuIl19