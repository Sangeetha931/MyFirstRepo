import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { pad, isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var PadPipe = /** @class */ (function () {
    function PadPipe() {
    }
    PadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return pad(input, length, character);
    };
PadPipe.ɵfac = function PadPipe_Factory(t) { return new (t || PadPipe)(); };
PadPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "pad", type: PadPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PadPipe, [{
        type: Pipe,
        args: [{
                name: 'pad'
            }]
    }], function () { return []; }, null); })();
    return PadPipe;
}());
export { PadPipe };
var NgPadPipeModule = /** @class */ (function () {
    function NgPadPipeModule() {
    }
NgPadPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgPadPipeModule });
NgPadPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgPadPipeModule_Factory(t) { return new (t || NgPadPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgPadPipeModule, { declarations: [PadPipe], exports: [PadPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgPadPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [PadPipe],
                exports: [PadPipe]
            }]
    }], function () { return []; }, null); })();
    return NgPadPipeModule;
}());
export { NgPadPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkLnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcGlwZXMvc3RyaW5nL3BhZC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLL0M7QUFBMkMsSUFBM0M7QUFBcUIsSUFRckIsQ0FBQztBQUNELElBUkUsMkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxNQUFrQixFQUFFLFNBQXVCO0FBQUksUUFBL0MsdUJBQUEsRUFBQSxVQUFrQjtBQUFJLFFBQUYsMEJBQUEsRUFBQSxlQUF1QjtBQUFJLFFBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLElBQUUsQ0FBQztJQVBVLE9BQU8sZ0NBSG5CLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxLQUFLO09BQ1osQ0FBQyxRQUNXLE9BQU8sQ0FRbkI7Ozs7OztnREFDRDtBQUNBLElBRkEsY0FBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxPQUFPO0FBY3BCO0FBQ21CLElBRG5CO0FBQTZCLElBQUMsQ0FBQztJQUFsQixlQUFlLGdDQUozQixRQUFRLENBQUMsY0FDUjtXQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FDdkIsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQ25CLENBQUMsUUFDVyxlQUFlLENBQUc7Ozs7Ozs7O2dEQUMvQjtBQUFDLElBRDZCLHNCQUFDO0FBQzlCLENBRDhCLEFBQS9CLElBQStCOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHBhZCwgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3BhZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGxlbmd0aDogbnVtYmVyID0gMCwgY2hhcmFjdGVyOiBzdHJpbmcgPSAnICcpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYWQoaW5wdXQsIGxlbmd0aCwgY2hhcmFjdGVyKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbUGFkUGlwZV0sXHJcbiAgZXhwb3J0czogW1BhZFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQYWRQaXBlTW9kdWxlIHt9XHJcbiJdfQ==