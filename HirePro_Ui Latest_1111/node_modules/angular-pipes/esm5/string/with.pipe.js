import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isNull } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    WithPipe.prototype.transform = function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || start == '' || ends == '') {
            return input;
        }
        input = csensitive ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            var a = !input.indexOf(csensitive ? start : start.toLowerCase());
            var b = input.indexOf(csensitive ? ends : ends.toLowerCase(), input.length - ends.length) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf(csensitive ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            var position = input.length - ends.length;
            return input.indexOf(csensitive ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
WithPipe.ɵfac = function WithPipe_Factory(t) { return new (t || WithPipe)(); };
WithPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "with", type: WithPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WithPipe, [{
        type: Pipe,
        args: [{ name: 'with' }]
    }], function () { return []; }, null); })();
    return WithPipe;
}());
export { WithPipe };
var NgWithPipeModule = /** @class */ (function () {
    function NgWithPipeModule() {
    }
NgWithPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWithPipeModule });
NgWithPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWithPipeModule_Factory(t) { return new (t || NgWithPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWithPipeModule, { declarations: [WithPipe], exports: [WithPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWithPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WithPipe],
                exports: [WithPipe]
            }]
    }], function () { return []; }, null); })();
    return NgWithPipeModule;
}());
export { NgWithPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUdsRDtBQUE0QyxJQUE1QztBQUFzQixJQTZCdEIsQ0FBQztBQUNELElBN0JFLDRCQUFTLEdBQVQsVUFBVSxLQUFhLEVBQUUsS0FBMkIsRUFBRSxJQUEwQixFQUFFLFVBQTJCO0FBQUksUUFBeEYsc0JBQUEsRUFBQSxZQUEyQjtBQUFJLFFBQUYscUJBQUEsRUFBQSxXQUEwQjtBQUFJLFFBQUYsMkJBQUEsRUFBQSxrQkFBMkI7QUFBSSxRQUMvRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUMxRixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JELFFBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN6QyxZQUFNLElBQUksQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDaEYsWUFBTSxJQUFJLENBQUMsR0FBWSxLQUFLLENBQUMsT0FB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QUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQTVCQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTZCQSxBQUFBLEFBQUEsQUFBQSxBQTdCQSxBQTZCQSxBQTdCQSxBQUFBLEFBbUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nLCBpc051bGwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICd3aXRoJyB9KVxyXG5leHBvcnQgY2xhc3MgV2l0aFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgc3RhcnQ6IHN0cmluZyB8IG51bGwgPSBudWxsLCBlbmRzOiBzdHJpbmcgfCBudWxsID0gbnVsbCwgY3NlbnNpdGl2ZTogYm9vbGVhbiA9IGZhbHNlKTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpIHx8IChpc051bGwoc3RhcnQpICYmIGlzTnVsbChlbmRzKSkgfHwgc3RhcnQgPT0gJycgfHwgZW5kcyA9PSAnJykge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXQgPSBjc2Vuc2l0aXZlID8gaW5wdXQgOiBpbnB1dC50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgIGlmICghaXNOdWxsKHN0YXJ0KSAmJiAhaXNOdWxsKGVuZHMpKSB7XHJcbiAgICAgIGxldCBhOiBib29sZWFuID0gIWlucHV0LmluZGV4T2YoY3NlbnNpdGl2ZSA/IHN0YXJ0IDogc3RhcnQudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgIGxldCBiOiBib29sZWFuID0gaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gZW5kcyA6IGVuZHMudG9Mb3dlckNhc2UoKSwgaW5wdXQubGVuZ3RoIC0gZW5kcy5sZW5ndGgpICE9PSAtMTtcclxuXHJcbiAgICAgIGlmIChhID09IHRydWUgJiYgYiA9PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc051bGwoc3RhcnQpKSB7XHJcbiAgICAgIHJldHVybiAhaW5wdXQuaW5kZXhPZihjc2Vuc2l0aXZlID8gc3RhcnQgOiBzdGFydC50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTnVsbChlbmRzKSkge1xyXG4gICAgICBsZXQgcG9zaXRpb246IGFueSA9IGlucHV0Lmxlbmd0aCAtIGVuZHMubGVuZ3RoO1xyXG5cclxuICAgICAgcmV0dXJuIGlucHV0LmluZGV4T2YoY3NlbnNpdGl2ZSA/IGVuZHMgOiBlbmRzLnRvTG93ZXJDYXNlKCksIHBvc2l0aW9uKSAhPT0gLTE7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1dpdGhQaXBlXSxcclxuICBleHBvcnRzOiBbV2l0aFBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdXaXRoUGlwZU1vZHVsZSB7fVxyXG4iXX0=