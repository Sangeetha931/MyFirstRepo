import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var TrimPipe = /** @class */ (function () {
    function TrimPipe() {
    }
    TrimPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.trim();
    };
TrimPipe.ɵfac = function TrimPipe_Factory(t) { return new (t || TrimPipe)(); };
TrimPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "trim", type: TrimPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TrimPipe, [{
        type: Pipe,
        args: [{
                name: 'trim'
            }]
    }], function () { return []; }, null); })();
    return TrimPipe;
}());
export { TrimPipe };
var NgTrimPipeModule = /** @class */ (function () {
    function NgTrimPipeModule() {
    }
NgTrimPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTrimPipeModule });
NgTrimPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTrimPipeModule_Factory(t) { return new (t || NgTrimPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTrimPipeModule, { declarations: [TrimPipe], exports: [TrimPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTrimPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TrimPipe],
                exports: [TrimPipe]
            }]
    }], function () { return []; }, null); })();
    return NgTrimPipeModule;
}());
export { NgTrimPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpbS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy90cmltLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSzFDO0FBQTRDLElBQTVDO0FBQXNCLElBUXRCLENBQUM7QUFDRCxJQVJFLDRCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hCLElBQUUsQ0FBQztJQVBVLFFBQVEsZ0NBSHBCLElBQUksQ0FBQyxjQUNKLElBQUksRUFBRSxNQUFNO01BQ2IsQ0FBQyxRQUNXLFFBQVEsQ0FRcEI7Ozs7OztnREFDRDtBQUNBLElBRkEsZUFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxRQUFRO0FBY3JCO0FBQ21CLElBRG5CO0FBQThCLElBQUMsQ0FBQztJQUFuQixnQkFBZ0IsZ0NBSjVCLFFBQVEsQ0FBQyxjQUNSO1VBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUN4QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FDcEIsQ0FBQyxRQUNXLGdCQUFnQixDQUFHOzs7Ozs7OztnREFDaEM7QUFBQyxJQUQ4Qix1QkFBQztBQUMvQixDQUQrQixBQUFoQyxJQUFnQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQVFBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFRQSxBQVJBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndHJpbScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmltUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYW55IHtcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQudHJpbSgpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtUcmltUGlwZV0sXHJcbiAgZXhwb3J0czogW1RyaW1QaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nVHJpbVBpcGVNb2R1bGUge31cclxuIl19