// idea from https://github.com/a8m/angular-filter
import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var StripTagsPipe = /** @class */ (function () {
    function StripTagsPipe() {
    }
    StripTagsPipe.prototype.transform = function (input) {
        if (!isString(input) || isUndefined(input))
            return input;
        return input.replace(/<\S[^><]*>/g, '');
    };
StripTagsPipe.ɵfac = function StripTagsPipe_Factory(t) { return new (t || StripTagsPipe)(); };
StripTagsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "stripTags", type: StripTagsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripTagsPipe, [{
        type: Pipe,
        args: [{
                name: 'stripTags'
            }]
    }], function () { return []; }, null); })();
    return StripTagsPipe;
}());
export { StripTagsPipe };
var NgStripTagsPipeModule = /** @class */ (function () {
    function NgStripTagsPipeModule() {
    }
NgStripTagsPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgStripTagsPipeModule });
NgStripTagsPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgStripTagsPipeModule_Factory(t) { return new (t || NgStripTagsPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgStripTagsPipeModule, { declarations: [StripTagsPipe], exports: [StripTagsPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgStripTagsPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [StripTagsPipe],
                exports: [StripTagsPipe]
            }]
    }], function () { return []; }, null); })();
    return NgStripTagsPipeModule;
}());
export { NgStripTagsPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXAtdGFncy5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9zdHJpcC10YWdzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBQ2xEO0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3ZEO0FBQWlELElBQWpEO0FBQTJCLElBTTNCLENBQUM7QUFDRCxJQU5FLGlDQUFTLEdBQVQsVUFBVSxLQUFhO0FBQUksUUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQUUsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUM3RCxRQUNJLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUMsSUFBRSxDQUFDO0lBTFUsYUFBYSxnQ0FIekIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFdBQVc7Q0FDbEIsQ0FBQyxRQUNXLGFBQWEsQ0FNekI7Ozs7OztnREFDRDtBQUNBLElBRkEsb0JBQUM7QUFFRCxDQUZDLEFBTkQsSUFNQztBQUNELFNBUGEsYUFBYTtBQVkxQjtBQUNtQixJQURuQjtBQUFtQyxJQUFDLENBQUM7SUFBeEIscUJBQXFCLGdDQUpqQyxRQUFRLENBQUMsY0FDUjtLQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsY0FDN0IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQ3pCLENBQUMsUUFDVyxxQkFBcUIsQ0FBRzs7Ozs7Ozs7Z0RBQ3JDO0FBQUMsSUFEbUMsNEJBQUM7QUFDcEMsQ0FEb0MsQUFBckMsSUFBcUM7O0FBcEJBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQU1BLEFBQUEsQUFMQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFOQSxBQU1BLEFBTkEsQUFBQSxBQVlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGlkZWEgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYThtL2FuZ3VsYXItZmlsdGVyXHJcblxyXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3N0cmlwVGFncycsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTdHJpcFRhZ3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkgfHwgaXNVbmRlZmluZWQoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XHJcblxyXG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLzxcXFNbXj48XSo+L2csICcnKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU3RyaXBUYWdzUGlwZV0sXHJcbiAgZXhwb3J0czogW1N0cmlwVGFnc1BpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTdHJpcFRhZ3NQaXBlTW9kdWxlIHt9XHJcbiJdfQ==