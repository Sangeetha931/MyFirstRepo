// idea from https://github.com/a8m/angular-filter
import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, isUndefined } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var WrapPipe = /** @class */ (function () {
    function WrapPipe() {
    }
    WrapPipe.prototype.transform = function (input, wrap, ends) {
        return isString(input) && !isUndefined(wrap) ? [wrap, input, ends || wrap].join('') : input;
    };
WrapPipe.ɵfac = function WrapPipe_Factory(t) { return new (t || WrapPipe)(); };
WrapPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "wrap", type: WrapPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WrapPipe, [{
        type: Pipe,
        args: [{
                name: 'wrap'
            }]
    }], function () { return []; }, null); })();
    return WrapPipe;
}());
export { WrapPipe };
var NgWrapPipeModule = /** @class */ (function () {
    function NgWrapPipeModule() {
    }
NgWrapPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgWrapPipeModule });
NgWrapPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgWrapPipeModule_Factory(t) { return new (t || NgWrapPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWrapPipeModule, { declarations: [WrapPipe], exports: [WrapPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgWrapPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [WrapPipe],
                exports: [WrapPipe]
            }]
    }], function () { return []; }, null); })();
    return NgWrapPipeModule;
}());
export { NgWrapPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy93cmFwLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBQ2xEO0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3ZEO0FBQTRDLElBQTVDO0FBQXNCLElBSXRCLENBQUM7QUFDRCxJQUpFLDRCQUFTLEdBQVQsVUFBVSxLQUFhLEVBQUUsSUFBWSxFQUFFLElBQWE7QUFBSSxRQUN0RCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNoRyxJQUFFLENBQUM7SUFIVSxRQUFRLGdDQUhwQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsTUFBTTtNQUNiLENBQUMsUUFDVyxRQUFRLENBSXBCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGVBQUM7QUFFRCxDQUZDLEFBSkQsSUFJQztBQUNELFNBTGEsUUFBUTtBQVVyQjtBQUNtQixJQURuQjtBQUE4QixJQUFDLENBQUM7SUFBbkIsZ0JBQWdCLGdDQUo1QixRQUFRLENBQUMsY0FDUjtVQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDeEIsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQ3BCLENBQUMsUUFDVyxnQkFBZ0IsQ0FBRzs7Ozs7Ozs7Z0RBQ2hDO0FBQUMsSUFEOEIsdUJBQUM7QUFDL0IsQ0FEK0IsQUFBaEMsSUFBZ0M7O0FBbEJBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFIQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFJQSxBQUpBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpZGVhIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2E4bS9hbmd1bGFyLWZpbHRlclxyXG5cclxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICd3cmFwJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFdyYXBQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBzdHJpbmcsIHdyYXA6IHN0cmluZywgZW5kcz86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gaXNTdHJpbmcoaW5wdXQpICYmICFpc1VuZGVmaW5lZCh3cmFwKSA/IFt3cmFwLCBpbnB1dCwgZW5kcyB8fCB3cmFwXS5qb2luKCcnKSA6IGlucHV0O1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtXcmFwUGlwZV0sXHJcbiAgZXhwb3J0czogW1dyYXBQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nV3JhcFBpcGVNb2R1bGUge31cclxuIl19