import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var TemplatePipe = /** @class */ (function () {
    function TemplatePipe() {
    }
    TemplatePipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!isString(input) || args.length === 0) {
            return input;
        }
        var template = input;
        for (var i = 0; i < args.length; ++i) {
            template = template.replace("$" + (i + 1), args[i]);
        }
        return template;
    };
TemplatePipe.ɵfac = function TemplatePipe_Factory(t) { return new (t || TemplatePipe)(); };
TemplatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "template", type: TemplatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePipe, [{
        type: Pipe,
        args: [{
                name: 'template'
            }]
    }], function () { return []; }, null); })();
    return TemplatePipe;
}());
export { TemplatePipe };
var NgTemplatePipeModule = /** @class */ (function () {
    function NgTemplatePipeModule() {
    }
NgTemplatePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTemplatePipeModule });
NgTemplatePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTemplatePipeModule_Factory(t) { return new (t || NgTemplatePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTemplatePipeModule, { declarations: [TemplatePipe], exports: [TemplatePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTemplatePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [TemplatePipe],
                exports: [TemplatePipe]
            }]
    }], function () { return []; }, null); })();
    return NgTemplatePipeModule;
}());
export { NgTemplatePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUucGlwZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1waXBlcy9zdHJpbmcvdGVtcGxhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLMUM7QUFBZ0QsSUFBaEQ7QUFBMEIsSUFhMUIsQ0FBQztBQUNELElBYkUsZ0NBQVMsR0FBVCxVQUFVLEtBQVU7QUFBSSxRQUFGLGNBQWM7QUFBQyxhQUFmLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7QUFBSSxZQUFsQiw2QkFBYztBQUFDO0FBQ3JDLFFBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzFDLFlBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsU0FBSztBQUNMLFFBQ0ksT0FBTyxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDO0lBWlUsWUFBWSxnQ0FIeEIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFVBQVU7RUFDakIsQ0FBQyxRQUNXLFlBQVksQ0FheEI7Ozs7OztnREFDRDtBQUNBLElBRkEsbUJBQUM7QUFFRCxDQUZDLEFBYkQsSUFhQztBQUNELFNBZGEsWUFBWTtBQW1CekI7QUFDbUIsSUFEbkI7QUFBa0MsSUFBQyxDQUFDO0lBQXZCLG9CQUFvQixnQ0FKaEMsUUFBUSxDQUFDLGNBQ1I7TUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQzVCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUN4QixDQUFDLFFBQ1csb0JBQW9CLENBQUc7Ozs7Ozs7O2dEQUNwQztBQUFDLElBRGtDLDJCQUFDO0FBQ25DLENBRG1DLEFBQXBDLElBQW9DOztBQXpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBYUEsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQWJBLEFBYUEsQUFiQSxBQUFBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICd0ZW1wbGF0ZScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgLi4uYXJnczogYW55W10pOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkgfHwgYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZW1wbGF0ZSA9IGlucHV0O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShgJCR7aSArIDF9YCwgYXJnc1tpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtUZW1wbGF0ZVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtUZW1wbGF0ZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdUZW1wbGF0ZVBpcGVNb2R1bGUge31cclxuIl19