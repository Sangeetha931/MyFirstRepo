import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, upperFirst } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var UpperFirstPipe = /** @class */ (function () {
    function UpperFirstPipe() {
    }
    UpperFirstPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return upperFirst(input);
    };
UpperFirstPipe.ɵfac = function UpperFirstPipe_Factory(t) { return new (t || UpperFirstPipe)(); };
UpperFirstPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "upperfirst", type: UpperFirstPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UpperFirstPipe, [{
        type: Pipe,
        args: [{
                name: 'upperfirst'
            }]
    }], function () { return []; }, null); })();
    return UpperFirstPipe;
}());
export { UpperFirstPipe };
var NgUpperFirstPipeModule = /** @class */ (function () {
    function NgUpperFirstPipeModule() {
    }
NgUpperFirstPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgUpperFirstPipeModule });
NgUpperFirstPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgUpperFirstPipeModule_Factory(t) { return new (t || NgUpperFirstPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgUpperFirstPipeModule, { declarations: [UpperFirstPipe], exports: [UpperFirstPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgUpperFirstPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [UpperFirstPipe],
                exports: [UpperFirstPipe]
            }]
    }], function () { return []; }, null); })();
    return NgUpperFirstPipeModule;
}());
export { NgUpperFirstPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBwZXJmaXJzdC5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy91cHBlcmZpcnN0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt0RDtBQUFrRCxJQUFsRDtBQUE0QixJQVE1QixDQUFDO0FBQ0QsSUFSRSxrQ0FBUyxHQUFULFVBQVUsS0FBVTtBQUFJLFFBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFDSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixJQUFFLENBQUM7SUFQVSxjQUFjLGdDQUgxQixJQUFJLENBQUMsY0FDSixJQUFJLEVBQUUsWUFBWTtBQUNuQixDQUFDLFFBQ1csY0FBYyxDQVExQjs7Ozs7O2dEQUNEO0FBQ0EsSUFGQSxxQkFBQztBQUVELENBRkMsQUFSRCxJQVFDO0FBQ0QsU0FUYSxjQUFjO0FBYzNCO0FBQ21CLElBRG5CO0FBQW9DLElBQUMsQ0FBQztJQUF6QixzQkFBc0IsZ0NBSmxDLFFBQVEsQ0FBQyxjQUNSO0lBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQyxjQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsV0FDMUIsQ0FBQyxRQUNXLHNCQUFzQixDQUFHOzs7Ozs7OztnREFDdEM7QUFBQyxJQURvQyw2QkFBQztBQUNyQyxDQURxQyxBQUF0QyxJQUFzQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFRQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFSQSxBQUFBLEFBY0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIHVwcGVyRmlyc3QgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3VwcGVyZmlyc3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVXBwZXJGaXJzdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVwcGVyRmlyc3QoaW5wdXQpO1xyXG4gIH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtVcHBlckZpcnN0UGlwZV0sXHJcbiAgZXhwb3J0czogW1VwcGVyRmlyc3RQaXBlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nVXBwZXJGaXJzdFBpcGVNb2R1bGUge31cclxuIl19