import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var SlugifyPipe = /** @class */ (function () {
    function SlugifyPipe() {
    }
    SlugifyPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input
            .toLowerCase()
            .trim()
            .replace(/[^a-z0-9\s-]/g, ' ')
            .replace(/[\s-]+/g, '-');
    };
SlugifyPipe.ɵfac = function SlugifyPipe_Factory(t) { return new (t || SlugifyPipe)(); };
SlugifyPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "slugify", type: SlugifyPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlugifyPipe, [{
        type: Pipe,
        args: [{ name: 'slugify' }]
    }], function () { return []; }, null); })();
    return SlugifyPipe;
}());
export { SlugifyPipe };
var NgSlugifyPipeModule = /** @class */ (function () {
    function NgSlugifyPipeModule() {
    }
NgSlugifyPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSlugifyPipeModule });
NgSlugifyPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSlugifyPipeModule_Factory(t) { return new (t || NgSlugifyPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSlugifyPipeModule, { declarations: [SlugifyPipe], exports: [SlugifyPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSlugifyPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SlugifyPipe],
                exports: [SlugifyPipe]
            }]
    }], function () { return []; }, null); })();
    return NgSlugifyPipeModule;
}());
export { NgSlugifyPipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2x1Z2lmeS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9zbHVnaWZ5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDO0FBQStDLElBQS9DO0FBQXlCLElBWXpCLENBQUM7QUFDRCxJQVpFLCtCQUFTLEdBQVQsVUFBVSxLQUFVO0FBQUksUUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLE9BQU8sS0FBSztBQUNoQixhQUFPLFdBQVcsRUFBRTtBQUNwQixhQUFPLElBQUksRUFBRTtBQUNiLGFBQU8sT0FBTyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUM7QUFDcEMsYUFBTyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLElBQUUsQ0FBQztJQVhVLFdBQVcsZ0NBRHZCLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxRQUNiO0VBQVcsQ0FZdkI7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLGtCQUFDO0FBRUQsQ0FGQyxBQVpELElBWUM7QUFDRCxTQWJhLFdBQVc7QUFrQnhCO0FBQ21CLElBRG5CO0FBQWlDLElBQUMsQ0FBQztJQUF0QixtQkFBbUIsZ0NBSi9CLFFBQVEsQ0FBQyxjQUNSO09BQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FDdkIsQ0FBQyxRQUNXLG1CQUFtQixDQUFHOzs7Ozs7OztnREFDbkM7QUFBQyxJQURpQywwQkFBQztBQUNsQyxDQURrQyxBQUFuQyxJQUFtQzs7QUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQVlBLEFBQUEsQUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWEEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQVpBLEFBWUEsQUFaQSxBQUFBLEFBa0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAnc2x1Z2lmeScgfSlcclxuZXhwb3J0IGNsYXNzIFNsdWdpZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnB1dFxyXG4gICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgICAudHJpbSgpXHJcbiAgICAgIC5yZXBsYWNlKC9bXmEtejAtOVxccy1dL2csICcgJylcclxuICAgICAgLnJlcGxhY2UoL1tcXHMtXSsvZywgJy0nKTtcclxuICB9XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU2x1Z2lmeVBpcGVdLFxyXG4gIGV4cG9ydHM6IFtTbHVnaWZ5UGlwZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1NsdWdpZnlQaXBlTW9kdWxlIHt9XHJcbiJdfQ==