import * as tslib_1 from "tslib";
import { Pipe, NgModule } from '@angular/core';
import { isString, upperFirst } from '../utils/utils';
import * as ɵngcc0 from '@angular/core';
var CapitalizePipe = /** @class */ (function () {
    function CapitalizePipe() {
    }
    CapitalizePipe.prototype.transform = function (input, all) {
        if (all === void 0) { all = false; }
        if (!isString(input)) {
            return input;
        }
        if (!all) {
            return upperFirst(input.toLowerCase());
        }
        else {
            return input
                .toLowerCase()
                .split(' ')
                .map(function (value) { return upperFirst(value); })
                .join(' ');
        }
    };
CapitalizePipe.ɵfac = function CapitalizePipe_Factory(t) { return new (t || CapitalizePipe)(); };
CapitalizePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "capitalize", type: CapitalizePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CapitalizePipe, [{
        type: Pipe,
        args: [{
                name: 'capitalize'
            }]
    }], function () { return []; }, null); })();
    return CapitalizePipe;
}());
export { CapitalizePipe };
var NgCapitalizePipeModule = /** @class */ (function () {
    function NgCapitalizePipeModule() {
    }
NgCapitalizePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgCapitalizePipeModule });
NgCapitalizePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgCapitalizePipeModule_Factory(t) { return new (t || NgCapitalizePipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCapitalizePipeModule, { declarations: [CapitalizePipe], exports: [CapitalizePipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgCapitalizePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [CapitalizePipe],
                exports: [CapitalizePipe]
            }]
    }], function () { return []; }, null); })();
    return NgCapitalizePipeModule;
}());
export { NgCapitalizePipeModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwaXRhbGl6ZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLXBpcGVzL3N0cmluZy9jYXBpdGFsaXplLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt0RDtBQUFrRCxJQUFsRDtBQUE0QixJQWdCNUIsQ0FBQztBQUNELElBaEJFLGtDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsR0FBb0I7QUFBSSxRQUF4QixvQkFBQSxFQUFBLFdBQW9CO0FBQUksUUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDZCxZQUFNLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxPQUFPLEtBQUs7QUFDbEIsaUJBQVMsV0FBVyxFQUFFO0FBQ3RCLGlCQUFTLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDbkIsaUJBQVMsR0FBRyxDQUFDLFVBQUMsS0FBYSxJQUFLLE9BQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFqQixDQUFpQixDQUFDO0FBQ2xELGlCQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0lBZlUsY0FBYyxnQ0FIMUIsSUFBSSxDQUFDLGNBQ0osSUFBSSxFQUFFLFlBQVk7QUFDbkIsQ0FBQyxRQUNXLGNBQWMsQ0FnQjFCOzs7Ozs7Z0RBQ0Q7QUFDQSxJQUZBLHFCQUFDO0FBRUQsQ0FGQyxBQWhCRCxJQWdCQztBQUNELFNBakJhLGNBQWM7QUFzQjNCO0FBQ21CLElBRG5CO0FBQW9DLElBQUMsQ0FBQztJQUF6QixzQkFBc0IsZ0NBSmxDLFFBQVEsQ0FBQyxjQUNSO0lBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQyxjQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsV0FDMUIsQ0FBQyxRQUNXLHNCQUFzQixDQUFHOzs7Ozs7OztnREFDdEM7QUFBQyxJQURvQyw2QkFBQztBQUNyQyxDQURxQyxBQUF0QyxJQUFzQzs7QUE1QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFnQkEsQUFBQSxBQWZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWZBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBZ0JBLEFBQUEsQUFBQSxBQUFBLEFBaEJBLEFBZ0JBLEFBaEJBLEFBQUEsQUFzQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcsIHVwcGVyRmlyc3QgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2NhcGl0YWxpemUnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FwaXRhbGl6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgYWxsOiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWxsKSB7XHJcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KGlucHV0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGlucHV0XHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAuc3BsaXQoJyAnKVxyXG4gICAgICAgIC5tYXAoKHZhbHVlOiBzdHJpbmcpID0+IHVwcGVyRmlyc3QodmFsdWUpKVxyXG4gICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NhcGl0YWxpemVQaXBlXSxcclxuICBleHBvcnRzOiBbQ2FwaXRhbGl6ZVBpcGVdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdDYXBpdGFsaXplUGlwZU1vZHVsZSB7fVxyXG4iXX0=