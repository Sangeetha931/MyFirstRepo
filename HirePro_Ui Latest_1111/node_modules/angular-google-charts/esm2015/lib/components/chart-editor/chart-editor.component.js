/// <reference path="./types.ts" />
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptLoaderService } from '../../services/script-loader.service';
import { ChartEditorRef } from './chart-editor-ref';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/script-loader.service';

const _c0 = ["*"];
export class ChartEditorComponent {
    constructor(scriptLoaderService) {
        this.scriptLoaderService = scriptLoaderService;
        this.initializedSubject = new Subject();
    }
    /**
     * Emits as soon as the chart editor is fully initialized.
     */
    get initialized$() {
        return this.initializedSubject.asObservable();
    }
    ngOnInit() {
        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {
            this.editor = new google.visualization.ChartEditor();
            this.initializedSubject.next(this.editor);
            this.initializedSubject.complete();
        });
    }
    editChart(component, options) {
        if (!component.chartWrapper) {
            throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');
        }
        if (!this.editor) {
            throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');
        }
        const handle = new ChartEditorRef(this.editor);
        this.editor.openDialog(component.chartWrapper, options || {});
        handle.afterClosed().subscribe(result => {
            if (result) {
                component.chartWrapper = result;
            }
        });
        return handle;
    }
}
ChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) { return new (t || ChartEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScriptLoaderService)); };
ChartEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartEditorComponent, selectors: [["chart-editor"]], hostAttrs: [1, "chart-editor"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ChartEditorComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartEditorComponent, [{
        type: Component,
        args: [{
                selector: 'chart-editor',
                template: `<ng-content></ng-content>`,
                host: { class: 'chart-editor' },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.ScriptLoaderService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9jb21wb25lbnRzL2NoYXJ0LWVkaXRvci9jaGFydC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUVuQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7OztBQVFwRCxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUFJbEMsWUFBb0IsbUJBQXdDO0FBQUksUUFBNUMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtBQUFDLFFBRnJELHVCQUFrQixHQUFHLElBQUksT0FBTyxFQUFvQyxDQUFDO0FBQy9FLElBQ2lFLENBQUM7QUFDbEUsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsSUFBVyxZQUFZO0FBQ3pCLFFBQUksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDbEQsSUFBRSxDQUFDO0FBQ0gsSUFDUyxRQUFRO0FBQ2pCLFFBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDN0UsWUFBTSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzRCxZQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3pDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQVVTLFNBQVMsQ0FBQyxTQUFvQixFQUFFLE9BQWlEO0FBQzFGLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7QUFDakMsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNiLDRHQUE0RyxDQUM3RyxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDdEIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNiLDJHQUEyRyxDQUM1RyxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbEUsUUFDSSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQzVDLFlBQU0sSUFBSSxNQUFNLEVBQUU7QUFDbEIsZ0JBQVEsU0FBUyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7QUFDeEMsYUFBTztBQUNQLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztBQUNIO2dEQTNEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGNBQWMsa0JBQ3hCLFFBQVEsRUFBRSwyQkFBMkI7YUFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxrQkFDL0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sY0FDaEQ7OztpREFDSTtBQUFDO0FBQThDLFlBWDNDLG1CQUFtQjtBQUFHOzs7Ozs7Ozs7b0ZBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGVzLnRzXCIgLz5cblxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2hhcnRCYXNlIH0gZnJvbSAnLi4vY2hhcnQtYmFzZS9jaGFydC1iYXNlLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENoYXJ0RWRpdG9yUmVmIH0gZnJvbSAnLi9jaGFydC1lZGl0b3ItcmVmJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2hhcnQtZWRpdG9yJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgaG9zdDogeyBjbGFzczogJ2NoYXJ0LWVkaXRvcicgfSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2hhcnRFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIGVkaXRvcjogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3IgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8Z29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3I+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzY3JpcHRMb2FkZXJTZXJ2aWNlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBFbWl0cyBhcyBzb29uIGFzIHRoZSBjaGFydCBlZGl0b3IgaXMgZnVsbHkgaW5pdGlhbGl6ZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGluaXRpYWxpemVkJCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zY3JpcHRMb2FkZXJTZXJ2aWNlLmxvYWRDaGFydFBhY2thZ2VzKCdjaGFydGVkaXRvcicpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmVkaXRvciA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvcigpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QubmV4dCh0aGlzLmVkaXRvcik7XG4gICAgICB0aGlzLmluaXRpYWxpemVkU3ViamVjdC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBjaGFydCBlZGl0b3IgYXMgYW4gZW1iZWRkZWQgZGlhbG9nIGJveCBvbiB0aGUgcGFnZS5cbiAgICogSWYgdGhlIGVkaXRvciBnZXRzIHNhdmVkLCB0aGUgY29tcG9uZW50cycgY2hhcnQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdC5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY2hhcnQgdG8gYmUgZWRpdGVkLlxuICAgKiBAcmV0dXJucyBBIHJlZmVyZW5jZSB0byB0aGUgb3BlbiBlZGl0b3IuXG4gICAqL1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlKTogQ2hhcnRFZGl0b3JSZWY7XG4gIHB1YmxpYyBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UsIG9wdGlvbnM6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yT3B0aW9ucyk6IENoYXJ0RWRpdG9yUmVmO1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlLCBvcHRpb25zPzogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3JPcHRpb25zKSB7XG4gICAgaWYgKCFjb21wb25lbnQuY2hhcnRXcmFwcGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDaGFydCB3cmFwcGVyIGlzIGB1bmRlZmluZWRgLiBQbGVhc2Ugd2FpdCBmb3IgdGhlIGBpbml0aWFsaXplZCRgIG9ic2VydmFibGUgYmVmb3JlIHRyeWluZyB0byBlZGl0IGEgY2hhcnQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmVkaXRvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2hhcnQgZWRpdG9yIGlzIGB1bmRlZmluZWRgLiBQbGVhc2Ugd2FpdCBmb3IgdGhlIGBpbml0aWFsaXplZCRgIG9ic2VydmFibGUgYmVmb3JlIHRyeWluZyB0byBlZGl0IGEgY2hhcnQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGUgPSBuZXcgQ2hhcnRFZGl0b3JSZWYodGhpcy5lZGl0b3IpO1xuICAgIHRoaXMuZWRpdG9yLm9wZW5EaWFsb2coY29tcG9uZW50LmNoYXJ0V3JhcHBlciwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICBoYW5kbGUuYWZ0ZXJDbG9zZWQoKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgY29tcG9uZW50LmNoYXJ0V3JhcHBlciA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGU7XG4gIH1cbn1cbiJdfQ==