import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class DataTableService {
    create(data, columns, formatters) {
        if (data == null) {
            return undefined;
        }
        let firstRowIsData = true;
        if (columns != null) {
            firstRowIsData = false;
        }
        const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);
        if (formatters) {
            this.applyFormatters(dataTable, formatters);
        }
        return dataTable;
    }
    getDataAsTable(data, columns) {
        if (columns) {
            return [columns, ...data];
        }
        else {
            return data;
        }
    }
    applyFormatters(dataTable, formatters) {
        for (const val of formatters) {
            val.formatter.format(dataTable, val.colIndex);
        }
    }
}
DataTableService.ɵfac = function DataTableService_Factory(t) { return new (t || DataTableService)(); };
DataTableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DataTableService_Factory() { return new DataTableService(); }, token: DataTableService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItZ29vZ2xlLWNoYXJ0cy9zcmMvbGliL3NlcnZpY2VzL2RhdGEtdGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDOztBQUtBLE1BQU0sT0FBTyxnQkFBZ0I7QUFDN0IsSUFBUyxNQUFNLENBQ1gsSUFBdUIsRUFDdkIsT0FBa0IsRUFDbEIsVUFBd0I7QUFDekIsUUFDQyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDdEIsWUFBTSxPQUFPLFNBQVMsQ0FBQztBQUN2QixTQUFLO0FBQ0wsUUFDSSxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDOUIsUUFBSSxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7QUFDekIsWUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQzdCLFNBQUs7QUFDTCxRQUNJLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDaEgsUUFBSSxJQUFJLFVBQVUsRUFBRTtBQUNwQixZQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELFNBQUs7QUFDTCxRQUNJLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLElBQUUsQ0FBQztBQUNILElBQ1UsY0FBYyxDQUFDLElBQVcsRUFBRSxPQUE2QjtBQUFJLFFBQ25FLElBQUksT0FBTyxFQUFFO0FBQ2pCLFlBQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2hDLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDVSxlQUFlLENBQUMsU0FBeUMsRUFBRSxVQUF1QjtBQUFJLFFBQzVGLEtBQUssTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO0FBQ2xDLFlBQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7dUdBQUM7QUFDRDs0Q0F0Q0MsVUFBVSxTQUFDLEVBQUU7QUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBQzdCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbHVtbiwgUm93IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gJy4uL3R5cGVzL2Zvcm1hdHRlcic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlU2VydmljZSB7XG4gIHB1YmxpYyBjcmVhdGUoXG4gICAgZGF0YTogUm93W10gfCB1bmRlZmluZWQsXG4gICAgY29sdW1ucz86IENvbHVtbltdLFxuICAgIGZvcm1hdHRlcnM/OiBGb3JtYXR0ZXJbXVxuICApOiBnb29nbGUudmlzdWFsaXphdGlvbi5EYXRhVGFibGUgfCB1bmRlZmluZWQge1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbGV0IGZpcnN0Um93SXNEYXRhID0gdHJ1ZTtcbiAgICBpZiAoY29sdW1ucyAhPSBudWxsKSB7XG4gICAgICBmaXJzdFJvd0lzRGF0YSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGFUYWJsZSA9IGdvb2dsZS52aXN1YWxpemF0aW9uLmFycmF5VG9EYXRhVGFibGUodGhpcy5nZXREYXRhQXNUYWJsZShkYXRhLCBjb2x1bW5zKSwgZmlyc3RSb3dJc0RhdGEpO1xuICAgIGlmIChmb3JtYXR0ZXJzKSB7XG4gICAgICB0aGlzLmFwcGx5Rm9ybWF0dGVycyhkYXRhVGFibGUsIGZvcm1hdHRlcnMpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhVGFibGU7XG4gIH1cblxuICBwcml2YXRlIGdldERhdGFBc1RhYmxlKGRhdGE6IFJvd1tdLCBjb2x1bW5zOiBDb2x1bW5bXSB8IHVuZGVmaW5lZCk6IChSb3cgfCBDb2x1bW5bXSlbXSB7XG4gICAgaWYgKGNvbHVtbnMpIHtcbiAgICAgIHJldHVybiBbY29sdW1ucywgLi4uZGF0YV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlGb3JtYXR0ZXJzKGRhdGFUYWJsZTogZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlLCBmb3JtYXR0ZXJzOiBGb3JtYXR0ZXJbXSk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgdmFsIG9mIGZvcm1hdHRlcnMpIHtcbiAgICAgIHZhbC5mb3JtYXR0ZXIuZm9ybWF0KGRhdGFUYWJsZSwgdmFsLmNvbEluZGV4KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==